{
  "problem_idx": 1721,
  "task_name": "Swapping Nodes in a Linked List",
  "markdown_description": "\nYou are given the `head` of a linked list, and an integer `k`.\n\n\nReturn *the head of the linked list after **swapping** the values of the* `kth` *node from the beginning and the* `kth` *node from the end (the list is **1-indexed**).*\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n![](https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/1700-1799/1721.Swapping%20Nodes%20in%20a%20Linked%20List/images/linked1.jpg)\n\n```\n\n**Input:** head = [1,2,3,4,5], k = 2\n**Output:** [1,4,3,2,5]\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** head = [7,9,6,6,7,8,3,0,9,5], k = 5\n**Output:** [7,9,6,6,8,7,3,0,9,5]\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* The number of nodes in the list is `n`.\n* `1 <= k <= n <= 105`\n* `0 <= Node.val <= 100`\n\n\n",
  "canonical_solution": "# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution:\n    def swapNodes(self, head: Optional[ListNode], k: int) -> Optional[ListNode]:\n        fast = slow = head\n        for _ in range(k - 1):\n            fast = fast.next\n        p = fast\n        while fast.next:\n            fast, slow = fast.next, slow.next\n        q = slow\n        p.val, q.val = q.val, p.val\n        return head\n",
  "test_case_generator": "\nimport random\n\nclass ListNode:\n    def __init__(self, val=0, next=None):\n        self.val = val\n        self.next = next\n\nclass Solution:\n    def swapNodes(self, head: Optional[ListNode], k: int) -> Optional[ListNode]:\n        fast = slow = head\n        for _ in range(k - 1):\n            fast = fast.next\n        p = fast\n        while fast.next:\n            fast, slow = fast.next, slow.next\n        q = slow\n        p.val, q.val = q.val, p.val\n        return head\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate the linked list\n    nums = random.sample(range(1, 101), random.randint(2, 10))\n    head = ListNode(nums[0])\n    curr = head\n    for num in nums[1:]:\n        curr.next = ListNode(num)\n        curr = curr.next\n    \n    # Generate a random target k\n    k = random.randint(1, len(nums))\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.swapNodes(head, k)\n\n    return head, k, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        head, k, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.swapNodes(head, k) == expected_result\n        if expected_result is not None:\n            print(f\"assert solution.swapNodes(head, {k}) == {expected_result}\")\n            test_case_generator_results.append(f\"assert solution.swapNodes(head, {k}) == {expected_result}\") # You can find that we construct the test case in the same format as the example\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.swapNodes(head, 6) == <__main__.ListNode object at 0x7f39cba84d90>\nassert solution.swapNodes(head, 5) == <__main__.ListNode object at 0x7f39cba85050>\nassert solution.swapNodes(head, 6) == <__main__.ListNode object at 0x7f39cba84dd0>\nassert solution.swapNodes(head, 1) == <__main__.ListNode object at 0x7f39cba850d0>\nassert solution.swapNodes(head, 3) == <__main__.ListNode object at 0x7f39cba84e10>\nassert solution.swapNodes(head, 7) == <__main__.ListNode object at 0x7f39cba85190>\nassert solution.swapNodes(head, 2) == <__main__.ListNode object at 0x7f39cba84e50>\nassert solution.swapNodes(head, 1) == <__main__.ListNode object at 0x7f39cba85210>\nassert solution.swapNodes(head, 2) == <__main__.ListNode object at 0x7f39cba84e90>\nassert solution.swapNodes(head, 1) == <__main__.ListNode object at 0x7f39cba84e50>\nassert solution.swapNodes(head, 2) == <__main__.ListNode object at 0x7f39cba85250>\nassert solution.swapNodes(head, 1) == <__main__.ListNode object at 0x7f39cba85190>\nassert solution.swapNodes(head, 8) == <__main__.ListNode object at 0x7f39cba84f10>\nassert solution.swapNodes(head, 3) == <__main__.ListNode object at 0x7f39cba85050>\nassert solution.swapNodes(head, 6) == <__main__.ListNode object at 0x7f39cba84f50>\nassert solution.swapNodes(head, 4) == <__main__.ListNode object at 0x7f39cba851d0>\nassert solution.swapNodes(head, 2) == <__main__.ListNode object at 0x7f39cba84fd0>\nassert solution.swapNodes(head, 2) == <__main__.ListNode object at 0x7f39cba84e50>\nassert solution.swapNodes(head, 10) == <__main__.ListNode object at 0x7f39cba85090>\nassert solution.swapNodes(head, 3) == <__main__.ListNode object at 0x7f39cba850d0>\nassert solution.swapNodes(head, 4) == <__main__.ListNode object at 0x7f39cba84dd0>\nassert solution.swapNodes(head, 3) == <__main__.ListNode object at 0x7f39cba85190>\nassert solution.swapNodes(head, 5) == <__main__.ListNode object at 0x7f39cba84f50>\nassert solution.swapNodes(head, 1) == <__main__.ListNode object at 0x7f39cba84e90>\nassert solution.swapNodes(head, 5) == <__main__.ListNode object at 0x7f39cba85010>\nassert solution.swapNodes(head, 5) == <__main__.ListNode object at 0x7f39cba84e10>\nassert solution.swapNodes(head, 5) == <__main__.ListNode object at 0x7f39cba85210>\nassert solution.swapNodes(head, 4) == <__main__.ListNode object at 0x7f39cba850d0>\nassert solution.swapNodes(head, 5) == <__main__.ListNode object at 0x7f39cba84e50>\nassert solution.swapNodes(head, 2) == <__main__.ListNode object at 0x7f39cba85110>\nassert solution.swapNodes(head, 1) == <__main__.ListNode object at 0x7f39cba84d50>\nassert solution.swapNodes(head, 1) == <__main__.ListNode object at 0x7f39cba85050>\nassert solution.swapNodes(head, 2) == <__main__.ListNode object at 0x7f39cba85250>\nassert solution.swapNodes(head, 1) == <__main__.ListNode object at 0x7f39cba851d0>\nassert solution.swapNodes(head, 6) == <__main__.ListNode object at 0x7f39cba85150>\nassert solution.swapNodes(head, 7) == <__main__.ListNode object at 0x7f39cba85110>\nassert solution.swapNodes(head, 1) == <__main__.ListNode object at 0x7f39cba84d50>\nassert solution.swapNodes(head, 3) == <__main__.ListNode object at 0x7f39cba850d0>\nassert solution.swapNodes(head, 1) == <__main__.ListNode object at 0x7f39cba84f10>\nassert solution.swapNodes(head, 1) == <__main__.ListNode object at 0x7f39cba85010>\nassert solution.swapNodes(head, 3) == <__main__.ListNode object at 0x7f39cba84dd0>\nassert solution.swapNodes(head, 4) == <__main__.ListNode object at 0x7f39cba84fd0>\nassert solution.swapNodes(head, 3) == <__main__.ListNode object at 0x7f39cba84f50>\nassert solution.swapNodes(head, 2) == <__main__.ListNode object at 0x7f39cba85110>\nassert solution.swapNodes(head, 3) == <__main__.ListNode object at 0x7f39cba85150>\nassert solution.swapNodes(head, 6) == <__main__.ListNode object at 0x7f39cba84d90>\nassert solution.swapNodes(head, 7) == <__main__.ListNode object at 0x7f39cba85090>\nassert solution.swapNodes(head, 1) == <__main__.ListNode object at 0x7f39cba84fd0>\nassert solution.swapNodes(head, 5) == <__main__.ListNode object at 0x7f39cba85210>\nassert solution.swapNodes(head, 4) == <__main__.ListNode object at 0x7f39cba85290>\nassert solution.swapNodes(head, 3) == <__main__.ListNode object at 0x7f39cba84d50>\nassert solution.swapNodes(head, 3) == <__main__.ListNode object at 0x7f39cba851d0>\nassert solution.swapNodes(head, 8) == <__main__.ListNode object at 0x7f39cba84dd0>\nassert solution.swapNodes(head, 4) == <__main__.ListNode object at 0x7f39cba84e50>\nassert solution.swapNodes(head, 4) == <__main__.ListNode object at 0x7f39cba85210>\nassert solution.swapNodes(head, 8) == <__main__.ListNode object at 0x7f39cba850d0>\nassert solution.swapNodes(head, 5) == <__main__.ListNode object at 0x7f39cba85050>\nassert solution.swapNodes(head, 6) == <__main__.ListNode object at 0x7f39cba84f50>\nassert solution.swapNodes(head, 1) == <__main__.ListNode object at 0x7f39cba85110>\nassert solution.swapNodes(head, 1) == <__main__.ListNode object at 0x7f39cba84ed0>\nassert solution.swapNodes(head, 10) == <__main__.ListNode object at 0x7f39cba84e90>\nassert solution.swapNodes(head, 8) == <__main__.ListNode object at 0x7f39cba85150>\nassert solution.swapNodes(head, 7) == <__main__.ListNode object at 0x7f39cba85050>\nassert solution.swapNodes(head, 3) == <__main__.ListNode object at 0x7f39cba85090>\nassert solution.swapNodes(head, 4) == <__main__.ListNode object at 0x7f39cba85250>\nassert solution.swapNodes(head, 1) == <__main__.ListNode object at 0x7f39cba84f50>\nassert solution.swapNodes(head, 6) == <__main__.ListNode object at 0x7f39cba84dd0>\nassert solution.swapNodes(head, 2) == <__main__.ListNode object at 0x7f39cba84d50>\nassert solution.swapNodes(head, 3) == <__main__.ListNode object at 0x7f39cba85050>\nassert solution.swapNodes(head, 7) == <__main__.ListNode object at 0x7f39cba85150>\nassert solution.swapNodes(head, 4) == <__main__.ListNode object at 0x7f39cba84fd0>\nassert solution.swapNodes(head, 4) == <__main__.ListNode object at 0x7f39cba850d0>\nassert solution.swapNodes(head, 2) == <__main__.ListNode object at 0x7f39cba84d90>\nassert solution.swapNodes(head, 2) == <__main__.ListNode object at 0x7f39cba84e90>\nassert solution.swapNodes(head, 3) == <__main__.ListNode object at 0x7f39cba851d0>\nassert solution.swapNodes(head, 2) == <__main__.ListNode object at 0x7f39cba85210>\nassert solution.swapNodes(head, 3) == <__main__.ListNode object at 0x7f39cba85190>\nassert solution.swapNodes(head, 2) == <__main__.ListNode object at 0x7f39cba85250>\nassert solution.swapNodes(head, 3) == <__main__.ListNode object at 0x7f39cba84f50>\nassert solution.swapNodes(head, 4) == <__main__.ListNode object at 0x7f39cba84e90>\nassert solution.swapNodes(head, 6) == <__main__.ListNode object at 0x7f39cba84d90>\nassert solution.swapNodes(head, 6) == <__main__.ListNode object at 0x7f39cba84e50>\nassert solution.swapNodes(head, 3) == <__main__.ListNode object at 0x7f39cba84dd0>\nassert solution.swapNodes(head, 2) == <__main__.ListNode object at 0x7f39cba85110>\nassert solution.swapNodes(head, 6) == <__main__.ListNode object at 0x7f39cba85150>\nassert solution.swapNodes(head, 1) == <__main__.ListNode object at 0x7f39cba85290>\nassert solution.swapNodes(head, 1) == <__main__.ListNode object at 0x7f39cba84d50>\nassert solution.swapNodes(head, 3) == <__main__.ListNode object at 0x7f39cba850d0>\nassert solution.swapNodes(head, 4) == <__main__.ListNode object at 0x7f39cba85190>\nassert solution.swapNodes(head, 4) == <__main__.ListNode object at 0x7f39cba84e10>\nassert solution.swapNodes(head, 1) == <__main__.ListNode object at 0x7f39cba84d90>\nassert solution.swapNodes(head, 1) == <__main__.ListNode object at 0x7f39cba85250>\nassert solution.swapNodes(head, 1) == <__main__.ListNode object at 0x7f39cba84e50>\nassert solution.swapNodes(head, 8) == <__main__.ListNode object at 0x7f39cba85110>\nassert solution.swapNodes(head, 2) == <__main__.ListNode object at 0x7f39cba85150>\nassert solution.swapNodes(head, 2) == <__main__.ListNode object at 0x7f39cba851d0>\nassert solution.swapNodes(head, 2) == <__main__.ListNode object at 0x7f39cba84e10>\nassert solution.swapNodes(head, 4) == <__main__.ListNode object at 0x7f39cba84d50>\nassert solution.swapNodes(head, 3) == <__main__.ListNode object at 0x7f39cba84e50>\nassert solution.swapNodes(head, 2) == <__main__.ListNode object at 0x7f39cba85190>",
  "inefficient_solution": "class Solution:\n    def swapNodes(self, head: Optional[ListNode], k: int) -> Optional[ListNode]:\n        if not head:\n            return None\n        if not head.next:\n            return head\n        if k == 1:\n            return head\n\n        linked_list_values = []\n        while head:\n            linked_list_values.append(head.val)\n            head = head.next\n\n        linked_list_copy = []\n        for val in linked_list_values:\n            linked_list_copy.append(val)\n\n        linked_list_copy[k - 1], linked_list_copy[-k] = linked_list_copy[-k], linked_list_copy[k - 1]\n\n        head = ListNode(linked_list_copy[0])\n        current = head\n        for val in linked_list_copy[1:]:\n            current.next = ListNode(val)\n            current = current.next\n\n        return head",
  "is_python": true
}