{
  "problem_idx": 2962,
  "task_name": "Count Subarrays Where Max Element Appears at Least K Times",
  "markdown_description": "\nYou are given an integer array `nums` and a **positive** integer `k`.\n\n\nReturn *the number of subarrays where the **maximum** element of* `nums` *appears **at least*** `k` *times in that subarray.*\n\n\nA **subarray** is a contiguous sequence of elements within an array.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums = [1,3,2,3,3], k = 2\n**Output:** 6\n**Explanation:** The subarrays that contain the element 3 at least 2 times are: [1,3,2,3], [1,3,2,3,3], [3,2,3], [3,2,3,3], [2,3,3] and [3,3].\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums = [1,4,2,1], k = 3\n**Output:** 0\n**Explanation:** No subarray contains the element 4 at least 3 times.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= nums.length <= 105`\n* `1 <= nums[i] <= 106`\n* `1 <= k <= 105`\n\n\n",
  "canonical_solution": "class Solution:\n    def countSubarrays(self, nums: List[int], k: int) -> int:\n        mx = max(nums)\n        n = len(nums)\n        ans = cnt = j = 0\n        for x in nums:\n            while j < n and cnt < k:\n                cnt += nums[j] == mx\n                j += 1\n            if cnt < k:\n                break\n            ans += n - j + 1\n            cnt -= x == mx\n        return ans\n",
  "test_case_generator": "\nimport random\nfrom typing import List\n\nclass Solution:\n    def countSubarrays(self, nums: List[int], k: int) -> int:\n        mx = max(nums)\n        n = len(nums)\n        ans = cnt = j = 0\n        for x in nums:\n            while j < n and cnt < k:\n                cnt += nums[j] == mx\n                j += 1\n            if cnt < k:\n                break\n            ans += n - j + 1\n            cnt -= x == mx\n        return ans\n\ndef generate_test_case():\n    solution = Solution()\n\n    # Generate random numbers list\n    nums = random.sample(range(1, 101), random.randint(2, 10))\n\n    # Generate a random target sum\n    k = random.randint(1, 11)\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.countSubarrays(nums, k)\n\n    return nums, k, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n\n    for i in range(num_tests):\n        nums, k, expected_result = generate_test_case()\n\n        solution = Solution()\n\n        assert solution.countSubarrays(nums, k) == expected_result\n\n        test_case = f\"assert solution.countSubarrays({nums}, {k}) == {expected_result}\"\n        test_case_generator_results.append(test_case)\n\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.countSubarrays([6, 15, 56, 98, 1, 18, 55, 33, 25], 2) == 0\nassert solution.countSubarrays([20, 26, 86, 87, 84, 72, 90], 10) == 0\nassert solution.countSubarrays([51, 76, 98, 75, 80, 30, 47], 3) == 0\nassert solution.countSubarrays([53, 62, 61, 98, 16, 80, 24, 30, 89, 43], 4) == 0\nassert solution.countSubarrays([15, 67], 9) == 0\nassert solution.countSubarrays([26, 39, 70, 48, 1, 11, 10], 3) == 0\nassert solution.countSubarrays([37, 91, 23, 33, 11, 3, 79, 100, 49], 7) == 0\nassert solution.countSubarrays([15, 27, 66, 60], 8) == 0\nassert solution.countSubarrays([49, 73, 8, 29, 17, 59, 4, 64], 8) == 0\nassert solution.countSubarrays([81, 77, 61, 75, 96, 25], 4) == 0\nassert solution.countSubarrays([59, 2, 10, 31], 8) == 0\nassert solution.countSubarrays([58, 90, 63, 16, 74], 9) == 0\nassert solution.countSubarrays([81, 51, 14, 99, 9, 21], 5) == 0\nassert solution.countSubarrays([95, 9, 67, 36, 56, 71, 92, 54], 6) == 0\nassert solution.countSubarrays([23, 93, 87, 71, 10, 96], 10) == 0\nassert solution.countSubarrays([31, 97, 11, 66, 68], 2) == 0\nassert solution.countSubarrays([98, 11, 71, 90, 82, 93, 7, 76], 11) == 0\nassert solution.countSubarrays([83, 25, 89, 100], 9) == 0\nassert solution.countSubarrays([92, 82], 2) == 0\nassert solution.countSubarrays([82, 96], 9) == 0\nassert solution.countSubarrays([26, 59, 2, 18, 9, 96, 66, 67], 8) == 0\nassert solution.countSubarrays([74, 43, 7, 64, 45, 82], 8) == 0\nassert solution.countSubarrays([10, 43, 95, 32, 28, 8, 72, 85, 22], 9) == 0\nassert solution.countSubarrays([55, 11, 42], 11) == 0\nassert solution.countSubarrays([70, 44, 45, 81, 82, 5, 94, 8], 4) == 0\nassert solution.countSubarrays([79, 14], 2) == 0\nassert solution.countSubarrays([20, 12, 34], 9) == 0\nassert solution.countSubarrays([39, 33, 53, 23, 79, 21, 85, 27, 89], 11) == 0\nassert solution.countSubarrays([49, 69], 3) == 0\nassert solution.countSubarrays([83, 64, 6, 90, 69, 59, 95, 72, 24, 7], 11) == 0\nassert solution.countSubarrays([6, 4, 69, 41, 63, 55, 5, 94, 78, 93], 1) == 24\nassert solution.countSubarrays([20, 90, 31, 14, 5, 92, 29, 85], 10) == 0\nassert solution.countSubarrays([78, 48, 89, 82, 41, 58, 63, 42, 77, 10], 8) == 0\nassert solution.countSubarrays([73, 65, 52, 80, 14, 16, 78], 8) == 0\nassert solution.countSubarrays([33, 63, 73, 38, 70, 94], 1) == 6\nassert solution.countSubarrays([93, 75, 70, 50, 77, 37, 74], 2) == 0\nassert solution.countSubarrays([12, 80, 39, 6, 74, 29, 63, 52], 8) == 0\nassert solution.countSubarrays([11, 32, 2, 95, 63, 34, 96, 68, 18], 10) == 0\nassert solution.countSubarrays([9, 34, 11, 32, 64, 2], 5) == 0\nassert solution.countSubarrays([68, 5], 7) == 0\nassert solution.countSubarrays([65, 75, 94, 96, 47, 60, 50, 28], 3) == 0\nassert solution.countSubarrays([26, 43, 62, 67, 23, 50, 80, 39, 33], 9) == 0\nassert solution.countSubarrays([1, 62, 51, 72, 46, 19, 35, 91, 7, 49], 2) == 0\nassert solution.countSubarrays([9, 53, 27, 49, 85], 2) == 0\nassert solution.countSubarrays([70, 80, 34], 8) == 0\nassert solution.countSubarrays([54, 87, 15, 56, 25, 95, 9, 18, 49, 32], 5) == 0\nassert solution.countSubarrays([89, 86, 96, 3], 3) == 0\nassert solution.countSubarrays([13, 21], 8) == 0\nassert solution.countSubarrays([23, 46], 6) == 0\nassert solution.countSubarrays([7, 14, 96, 70, 47, 100, 46], 5) == 0\nassert solution.countSubarrays([37, 16, 80], 6) == 0\nassert solution.countSubarrays([66, 91, 27, 6, 45, 21, 47], 5) == 0\nassert solution.countSubarrays([53, 8, 6, 84, 9, 55, 14, 31, 21, 95], 1) == 10\nassert solution.countSubarrays([60, 80, 6], 7) == 0\nassert solution.countSubarrays([68, 91, 83, 45, 49, 93], 1) == 6\nassert solution.countSubarrays([47, 23, 25, 85, 96], 8) == 0\nassert solution.countSubarrays([2, 98, 73, 36, 22, 51, 76, 7, 13], 5) == 0\nassert solution.countSubarrays([79, 29, 27, 59, 66, 10], 11) == 0\nassert solution.countSubarrays([74, 65, 23, 72, 89, 81, 6, 2, 44, 83], 9) == 0\nassert solution.countSubarrays([59, 99, 85, 3, 5, 96, 26], 7) == 0\nassert solution.countSubarrays([56, 33, 89, 61, 90, 5, 42, 1, 38, 99], 7) == 0\nassert solution.countSubarrays([11, 10, 21, 88, 16], 8) == 0\nassert solution.countSubarrays([85, 92, 35, 49, 31, 93, 51, 2, 60, 7], 6) == 0\nassert solution.countSubarrays([88, 10, 69, 48, 3, 78, 44, 67], 4) == 0\nassert solution.countSubarrays([23, 32, 83, 1, 22, 53, 28, 74, 14], 1) == 21\nassert solution.countSubarrays([99, 5, 13, 90, 72, 44, 23, 15, 62, 32], 5) == 0\nassert solution.countSubarrays([26, 11, 38, 92, 62, 37], 6) == 0\nassert solution.countSubarrays([77, 71, 46, 92], 11) == 0\nassert solution.countSubarrays([56, 80], 2) == 0\nassert solution.countSubarrays([43, 36, 66, 100, 98, 32, 68, 49, 92], 9) == 0\nassert solution.countSubarrays([77, 31, 35, 80, 7], 4) == 0\nassert solution.countSubarrays([98, 23, 60, 5], 2) == 0\nassert solution.countSubarrays([52, 48, 33, 62, 17, 56, 36, 77], 1) == 8\nassert solution.countSubarrays([77, 65, 63], 1) == 3\nassert solution.countSubarrays([49, 51, 17, 21, 32, 85, 78, 60], 8) == 0\nassert solution.countSubarrays([22, 28, 100, 75, 91, 89, 51, 83], 4) == 0\nassert solution.countSubarrays([47, 94, 69], 3) == 0\nassert solution.countSubarrays([27, 66, 9, 52, 51, 69, 71, 24, 33], 5) == 0\nassert solution.countSubarrays([23, 83, 46, 86, 4, 3, 42, 6], 11) == 0\nassert solution.countSubarrays([67, 88, 63, 13, 75, 43, 54, 32], 5) == 0\nassert solution.countSubarrays([94, 3], 6) == 0\nassert solution.countSubarrays([78, 92, 36], 10) == 0\nassert solution.countSubarrays([41, 4], 6) == 0\nassert solution.countSubarrays([61, 89, 26, 33, 64, 39], 4) == 0\nassert solution.countSubarrays([100, 37, 12, 56, 8, 94, 35, 82], 5) == 0\nassert solution.countSubarrays([14, 27, 9, 16, 77, 21, 67], 9) == 0\nassert solution.countSubarrays([15, 12, 11, 59, 51, 49, 21, 73, 44, 97], 10) == 0\nassert solution.countSubarrays([62, 4, 35, 6, 41, 99, 5], 8) == 0\nassert solution.countSubarrays([85, 52, 83, 44, 12, 98, 87, 88], 7) == 0\nassert solution.countSubarrays([14, 21, 64], 6) == 0\nassert solution.countSubarrays([44, 43, 45, 99, 25], 4) == 0\nassert solution.countSubarrays([64, 83, 2, 77], 4) == 0\nassert solution.countSubarrays([86, 7, 54, 16, 84, 48, 98, 80, 89], 11) == 0\nassert solution.countSubarrays([67, 30, 23], 4) == 0\nassert solution.countSubarrays([26, 10, 17, 47, 11, 45, 22, 91, 43, 27], 11) == 0\nassert solution.countSubarrays([6, 34], 2) == 0\nassert solution.countSubarrays([84, 49, 58, 24, 59, 87, 80, 18, 23, 11], 3) == 0\nassert solution.countSubarrays([20, 16, 11, 89, 3, 92, 46, 39], 9) == 0\nassert solution.countSubarrays([5, 24, 79, 82, 41, 33, 90, 40, 72, 9], 7) == 0\nassert solution.countSubarrays([97, 88, 68, 22, 11, 100, 27, 91, 81, 95], 3) == 0",
  "inefficient_solution": "class Solution:\n    def countSubarrays(self, nums: List[int], k: int) -> int:\n        mx = max(nums)\n        n = len(nums)\n        ans = 0\n        for i in range(n):\n            cnt = 0\n            subarray = []\n            for j in range(i, n):\n                subarray.append(nums[j])\n                if nums[j] == mx:\n                    cnt += 1\n                if cnt < k:\n                    subarray = []\n                    continue\n                ans += 1\n        return ans",
  "is_python": true
}