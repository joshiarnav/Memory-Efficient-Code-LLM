{
  "problem_idx": "252",
  "metrics": {
    "finetuned_model": {
      "bleu_score": 0.5409598106848774,
      "edit_similarity": 0.7810945273631841,
      "ast_similarity": 0.7727272727272727,
      "diff_bleu": 0.8684015776638667
    },
    "raw_model": {
      "bleu_score": 0.38376477371682866,
      "edit_similarity": 0.5239852398523985,
      "ast_similarity": 0.5769230769230769,
      "diff_bleu": 0.7616748489997632
    }
  },
  "deltas": {
    "bleu_delta": 0.15719503696804876,
    "edit_sim_delta": 0.25710928751078554,
    "ast_sim_delta": 0.19580419580419584,
    "diff_bleu_delta": 0.10672672866410349
  },
  "solutions": {
    "inefficient": "class Solution:\n    def canAttendMeetings(self, intervals: List[List[int]]) -> bool:\n        intervals_dict = {}\n        for i, interval in enumerate(intervals):\n            intervals_dict[i] = interval\n\n        all_intervals = list(intervals_dict.values())\n        intervals_sorted = []\n\n        for i in range(len(all_intervals)):\n            for j in range(i + 1, len(all_intervals)):\n                if all_intervals[j][0] >= all_intervals[i][1]:\n                    intervals_sorted.append([all_intervals[i], all_intervals[j]])\n\n        for i in range(0, len(intervals_sorted), 2):\n            if intervals_sorted[i][1][1] > intervals_sorted[i + 1][0][0]:\n                return False\n\n        return True",
    "efficient": "class Solution:\n    def canAttendMeetings(self, intervals: List[List[int]]) -> bool:\n        intervals.sort()\n        return all(a[1] <= b[0] for a, b in pairwise(intervals))\n",
    "finetuned": "class Solution:\n    def canAttendMeetings(self, intervals: List[List[int]]) -> bool:\n        intervals.sort()\n        return all(intervals[i][1] > intervals[i - 1][1] for i in range(1, len(intervals)))",
    "raw_model": "class Solution:\n    def canAttendMeetings(self, intervals: List[List[int]]) -> bool:\n        # Sort the intervals based on their start times\n        intervals.sort(key=lambda x: x[0])\n        \n        # Iterate over the sorted intervals and check for any conflicts\n        for i in range(1, len(intervals)):\n            if intervals[i][0] < intervals[i-1][1]:\n                return False\n        \n        return True"
  },
  "is_python": true
}