{
  "problem_idx": "1458",
  "metrics": {
    "finetuned_model": {
      "bleu_score": 0.9186439785268768,
      "edit_similarity": 0.9710144927536232,
      "ast_similarity": 1.0,
      "diff_bleu": 0.9644347253900782
    },
    "raw_model": {
      "bleu_score": 0.7158925800138652,
      "edit_similarity": 0.7318840579710144,
      "ast_similarity": 0.9166666666666666,
      "diff_bleu": 0.8075668966061403
    }
  },
  "deltas": {
    "bleu_delta": 0.2027513985130116,
    "edit_sim_delta": 0.23913043478260876,
    "ast_sim_delta": 0.08333333333333337,
    "diff_bleu_delta": 0.1568678287839379
  },
  "solutions": {
    "inefficient": "class Solution:\n    def maxDotProduct(self, nums1, nums2):\n        m, n = len(nums1), len(nums2)\n        dp = [[0] * (n * 5000) for _ in range(m * 5000)]\n        for i in range(m * 5000):\n            for j in range(n * 5000):\n                for k in range(m):\n                    for l in range(n):\n                        if i >= k * 5000 and j >= l * 5000:\n                            v = nums1[k] * nums2[l]\n                            for _ in range(500):\n                                dp[i][j] = max(dp[i][j], dp[i - k * 5000][j - l * 5000], dp[i][j - l * 5000], dp[i - k * 5000][j], max(dp[i - k * 5000][j - l * 5000], 0) + v)\n        return dp[-1][-1]",
    "efficient": "class Solution:\n    def maxDotProduct(self, nums1: List[int], nums2: List[int]) -> int:\n        m, n = len(nums1), len(nums2)\n        dp = [[-inf] * (n + 1) for _ in range(m + 1)]\n        for i in range(1, m + 1):\n            for j in range(1, n + 1):\n                v = nums1[i - 1] * nums2[j - 1]\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1], max(dp[i - 1][j - 1], 0) + v)\n        return dp[-1][-1]\n",
    "finetuned": "class Solution:\n    def maxDotProduct(self, nums1: List[int], nums2: List[int]) -> int:\n        m, n = len(nums1), len(nums2)\n        dp = [[0] * (n + 1) for _ in range(m + 1)]\n        for i in range(1, m + 1):\n            for j in range(1, n + 1):\n                v = nums1[i - 1] * nums2[j - 1]\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1], dp[i - 1][j - 1] + v)\n        return dp[-1][-1]",
    "raw_model": "class Solution:\n    def maxDotProduct(self, nums1, nums2):\n        m, n = len(nums1), len(nums2)\n        dp = [[0] * (n + 1) for _ in range(m + 1)]\n        \n        for i in range(1, m + 1):\n            for j in range(1, n + 1):\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1], dp[i - 1][j - 1] + nums1[i - 1] * nums2[j - 1])\n        \n        return dp[m][n]"
  },
  "is_python": true
}