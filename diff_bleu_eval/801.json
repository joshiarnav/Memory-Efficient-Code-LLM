{
  "problem_idx": "801",
  "metrics": {
    "finetuned_model": {
      "bleu_score": 0.38037896063195553,
      "edit_similarity": 0.6380255941499087,
      "ast_similarity": 0.7,
      "diff_bleu": 0.8692232580093497
    },
    "raw_model": {
      "bleu_score": 0.22421608163837142,
      "edit_similarity": 0.378159757330637,
      "ast_similarity": 0.6176470588235294,
      "diff_bleu": 0.7601730463809704
    }
  },
  "deltas": {
    "bleu_delta": 0.1561628789935841,
    "edit_sim_delta": 0.25986583681927167,
    "ast_sim_delta": 0.08235294117647052,
    "diff_bleu_delta": 0.10905021162837936
  },
  "solutions": {
    "inefficient": "class Solution:\n    def minSwap(self, nums1: List[int], nums2: List[int]) -> int:\n        dp = [[[float('inf')] * 2 for _ in range(len(nums1))] for _ in range(len(nums1))]\n        for i in range(len(nums1)):\n            for j in range(i, len(nums1)):\n                for k in range(j, len(nums1)):\n                    for l in range(k, len(nums1)):\n                        if i == j == k == l == 0:\n                            dp[i][j][k] = [0, 1][nums1[0] > nums2[0]]\n                        elif i < j == k == l:\n                            if nums1[i] > nums1[j] or nums2[i] > nums2[j]:\n                                dp[i][j][k][l] = dp[i+1][j][k][l]\n                            else:\n                                dp[i][j][k][l] = [dp[i+1][j][k][l][0]+1, dp[i+1][j][k][l][1]]\n                        elif i == j < k < l:\n                            if nums1[k-1] >= nums1[k] or nums2[k-1] >= nums2[k]:\n                                dp[i][j][k][l] = dp[i][j+1][k][l]\n                            else:\n                                dp[i][j][k][l] = [dp[i][j+1][k][l][0]+1, dp[i][j+1][k][l][1]]\n                        elif i == j == k < l:\n                            if nums1[k] > nums1[l] or nums2[k] > nums2[l]:\n                                dp[i][j][k][l] = dp[i][j][k+1][l]\n                            else:\n                                dp[i][j][k][l] = [dp[i][j][k+1][l][0]+1, dp[i][j][k+1][l][1]]\n                        elif i < j == k == l:\n                            if nums1[j-1] >= nums1[j] or nums2[j-1] >= nums2[j]:\n                                dp[i][j][k][l] = dp[i+1][j][k][l]\n                            else:\n                                dp[i][j][k][l] = [dp[i+1][j][k][l][0]+1, dp[i+1][j][k][l][1]]\n                        else:\n                            if nums1[k-1] >= nums1[k] or nums2[k-1] >= nums2[k] or nums1[l-1] >= nums1[l] or nums2[l-1] >= nums2[l]:\n                                dp[i][j][k][l] = dp[i][j][k+1][l]\n                            else:\n                                dp[i][j][k][l] = [dp[i][j][k+1][l][0]+1, dp[i][j][k+1][l][1]]\n        return min(min([dp[i][j][k][l] for k in range(j, len(nums1)) for l in range(k, len(nums1))]) for j in range(i, len(nums1)) for i in range(len(nums1)))",
    "efficient": "class Solution:\n    def minSwap(self, nums1: List[int], nums2: List[int]) -> int:\n        a, b = 0, 1\n        for i in range(1, len(nums1)):\n            x, y = a, b\n            if nums1[i - 1] >= nums1[i] or nums2[i - 1] >= nums2[i]:\n                a, b = y, x + 1\n            else:\n                b = y + 1\n                if nums1[i - 1] < nums2[i] and nums2[i - 1] < nums1[i]:\n                    a, b = min(a, y), min(b, x + 1)\n        return min(a, b)\n",
    "finetuned": "class Solution:\n    def minSwap(self, nums1: List[int], nums2: List[int]) -> int:\n        f = [1] * len(nums1)\n        g = [1] * len(nums1)\n        for i in range(1, len(nums1)):\n            if nums1[i] > nums1[i - 1] or nums2[i] > nums2[i - 1]:\n                f[i] = f[i - 1]\n            else:\n                f[i] = min(f[i - 1] + 1, g[i - 1])\n            if nums1[i] > nums2[i - 1] or nums2[i] > nums1[i - 1]:\n                g[i] = f[i - 1]\n            else:\n                g[i] = min(f[i - 1], g[i - 1] + 1)\n        return min(f[-1], g[-1])",
    "raw_model": "class Solution:\n    def minSwap(self, nums1: List[int], nums2: List[int]) -> int:\n        n = len(nums1)\n        dp = [[float('inf')] * 2 for _ in range(n)]\n        \n        # Initialize the base case\n        dp[0][0] = [0, 1][nums1[0] > nums2[0]]\n        dp[0][1] = 1 if nums1[0] > nums2[0] else 0\n        \n        for i in range(1, n):\n            for prev in range(2):\n                for swap in range(2):\n                    if nums1[i] > nums1[i-1] and nums1[i] > nums2[i-1] and nums2[i] > nums1[i-1] and nums2[i] > nums2[i-1]:\n                        if prev == 0 and swap == 0:\n                            dp[i][0] = min(dp[i][0], dp[i-1][0])\n                        elif prev == 1 and swap == 0:\n                            dp[i][0] = min(dp[i][0], dp[i-1][1])\n                        elif prev == 0 and swap == 1:\n                            dp[i][1] = min(dp[i][1], dp[i-1][0] + 1)\n                        elif prev == 1 and swap == 1:\n                            dp[i][1] = min(dp[i][1], dp[i-1][1] + 1)\n        \n        return min(dp[-1])"
  },
  "is_python": true
}