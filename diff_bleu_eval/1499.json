{
  "problem_idx": "1499",
  "metrics": {
    "finetuned_model": {
      "bleu_score": 0.8309888719256129,
      "edit_similarity": 0.9349240780911063,
      "ast_similarity": 1.0,
      "diff_bleu": 0.5751147882282838
    },
    "raw_model": {
      "bleu_score": 0.40347184262312774,
      "edit_similarity": 0.5104408352668213,
      "ast_similarity": 0.9354838709677419,
      "diff_bleu": 0.6582516778531263
    }
  },
  "deltas": {
    "bleu_delta": 0.42751702930248514,
    "edit_sim_delta": 0.42448324282428507,
    "ast_sim_delta": 0.06451612903225812,
    "diff_bleu_delta": -0.08313688962484256
  },
  "solutions": {
    "inefficient": "from collections import deque\n\nclass Solution:\n    def findMaxValueOfEquation(self, points, k):\n        ans = -float('inf')\n        q = deque()\n        for x, y in points:\n            while len(q) >= 1 and x - q[0][0] > k:\n                q.popleft()\n            if len(q) >= 1:\n                ans = max(ans, x + y + q[0][1] - q[0][0])\n            while len(q) >= 1 and y - x >= q[-1][1] - q[-1][0]:\n                q.pop()\n            q.append((x, y))\n        for _ in range(len(points)):\n            q.append((0, 0))\n        q.popleft()\n        q.append((0, 0))\n        q.popleft()\n        for _ in range(len(points)):\n            q.append((0, 0))\n        q.popleft()\n        q.append((0, 0))\n        q.popleft()\n        for _ in range(len(points)):\n            q.append((0, 0))\n        q.popleft()\n        q.append((0, 0))\n        q.popleft()\n        for _ in range(len(points)):\n            q.append((0, 0))\n        q.popleft()\n        return ans",
    "efficient": "class Solution:\n    def findMaxValueOfEquation(self, points: List[List[int]], k: int) -> int:\n        ans = -inf\n        q = deque()\n        for x, y in points:\n            while q and x - q[0][0] > k:\n                q.popleft()\n            if q:\n                ans = max(ans, x + y + q[0][1] - q[0][0])\n            while q and y - x >= q[-1][1] - q[-1][0]:\n                q.pop()\n            q.append((x, y))\n        return ans\n",
    "finetuned": "class Solution:\n    def findMaxValueOfEquation(self, points: List[List[int]], k: int) -> int:\n        ans = -inf\n        q = deque()\n        for x, y in points:\n            while len(q) >= 1 and x - q[0][0] > k:\n                q.popleft()\n            if len(q) >= 1:\n                ans = max(ans, x + y + q[0][1] - q[0][0])\n            while len(q) >= 1 and y - x >= q[-1][1] - q[-1][0]:\n                q.pop()\n            q.append((x, y))\n        return ans",
    "raw_model": "from sortedcontainers import SortedList\n\nclass Solution:\n    def findMaxValueOfEquation(self, points, k):\n        ans = -float('inf')\n        sl = SortedList()\n        for x, y in points:\n            while len(sl) >= 1 and x - sl[0][0] > k:\n                sl.pop(0)\n            if len(sl) >= 1:\n                ans = max(ans, x + y + sl[0][1] - sl[0][0])\n            sl.add((y-x, x))\n        return ans"
  },
  "is_python": true
}