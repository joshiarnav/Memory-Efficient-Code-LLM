{
  "problem_idx": "1356",
  "metrics": {
    "finetuned_model": {
      "bleu_score": 0.6106332676324014,
      "edit_similarity": 0.6551724137931034,
      "ast_similarity": 0.65,
      "diff_bleu": 0.9330549969806254
    },
    "raw_model": {
      "bleu_score": 0.5172425224465661,
      "edit_similarity": 0.7404580152671756,
      "ast_similarity": 0.8666666666666667,
      "diff_bleu": 0.8518141755089575
    }
  },
  "deltas": {
    "bleu_delta": 0.09339074518583534,
    "edit_sim_delta": -0.08528560147407216,
    "ast_sim_delta": -0.21666666666666667,
    "diff_bleu_delta": 0.08124082147166789
  },
  "solutions": {
    "inefficient": "class Solution:\n    def sortByBits(self, arr):\n        n = len(arr)\n        bits = [0] * n\n        for i in range(n):\n            bits[i] = bin(arr[i]).count('1')\n        bit_counts = [0] * 500\n        for i in range(n):\n            bit_counts[bits[i]] += 1\n        counts = [0] * 500\n        for i in range(500):\n            counts[i] = [0] * bit_counts[i]\n        for i in range(n):\n            counts[bits[i]][0] = arr[i]\n            counts[bits[i]][1] = i\n        sorted_counts = [0] * 500\n        for i in range(500):\n            sorted_counts[i] = sorted(counts[i], key=lambda x: x[0])\n        sorted_arr = [0] * n\n        for i in range(500):\n            for j in range(bit_counts[i]):\n                sorted_arr[sorted_counts[i][j][1]] = sorted_counts[i][j][0]\n        return sorted_arr",
    "efficient": "class Solution:\n    def sortByBits(self, arr: List[int]) -> List[int]:\n        return sorted(arr, key=lambda x: (x.bit_count(), x))\n",
    "finetuned": "class Solution:\n    def sortByBits(self, arr: List[int]) -> List[int]:\n        arr.sort(key=lambda x: (x & 0x1111) + (x >> 4))\n        return arr",
    "raw_model": "class Solution:\n    def sortByBits(self, arr):\n        return sorted(arr, key=lambda x: (bin(x).count('1'), x))"
  },
  "is_python": true
}