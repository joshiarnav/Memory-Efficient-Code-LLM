{
  "problem_idx": "842",
  "metrics": {
    "finetuned_model": {
      "bleu_score": 0.23135437068771905,
      "edit_similarity": 0.49947862356621475,
      "ast_similarity": 0.5952380952380952,
      "diff_bleu": 0.777049628347543
    },
    "raw_model": {
      "bleu_score": 0.3662373656632425,
      "edit_similarity": 0.5881627620221948,
      "ast_similarity": 0.7567567567567568,
      "diff_bleu": 0.8329107755853762
    }
  },
  "deltas": {
    "bleu_delta": -0.13488299497552345,
    "edit_sim_delta": -0.08868413845598,
    "ast_sim_delta": -0.16151866151866157,
    "diff_bleu_delta": -0.0558611472378332
  },
  "solutions": {
    "inefficient": "class Solution:\n    def splitIntoFibonacci(self, num: str) -> List[int]:\n        ans = []\n        for i in range(len(num)):\n            for j in range(i, len(num)):\n                for k in range(j, len(num)):\n                    for m in range(k, len(num)):\n                        for n in range(m, len(num)):\n                            for o in range(n, len(num)):\n                                x = int(num[i:j+1])\n                                y = int(num[j:k+1])\n                                z = int(num[k:m+1])\n                                w = int(num[m:n+1])\n                                t = int(num[n:o+1])\n                                v = int(num[o:])\n                                if x > 2**31 - 1 or y > 2**31 - 1 or z > 2**31 - 1 or w > 2**31 - 1 or t > 2**31 - 1 or v > 2**31 - 1:\n                                    break\n                                if x == 0 and y == 0 and z == 0:\n                                    continue\n                                if x == 0 and y == 0 and z > 0 and w == 0 and t == 0:\n                                    continue\n                                if x == 0 and y == 0 and z > 0 and w == 0 and t > 0 and t == z + w:\n                                    ans = [0, 0, z, w, t]\n                                    break\n                                if x > 0 and y == 0 and z == 0 and w == 0 and t == 0:\n                                    continue\n                                if x > 0 and y == 0 and z > 0 and w == 0 and t == 0:\n                                    continue\n                                if x > 0 and y == 0 and z > 0 and w == 0 and t > 0 and t == z + w:\n                                    ans = [x, z, t]\n                                    break\n                                if x > 0 and y > 0 and z == 0 and w == 0 and t == 0:\n                                    continue\n                                if x > 0 and y > 0 and z == 0 and w == 0 and t > 0 and t == y + z:\n                                    ans = [x, y, t]\n                                    break\n                                if x > 0 and y > 0 and z > 0 and w == 0 and t == 0:\n                                    continue\n                                if x > 0 and y > 0 and z > 0 and w == 0 and t > 0 and t == z + w:\n                                    ans = [x, y, z, w, t]\n                                    break\n                                if x > 0 and y > 0 and z > 0 and w > 0 and t == 0:\n                                    continue\n                                if x > 0 and y > 0 and z > 0 and w > 0 and t > 0 and t == w + z:\n                                    ans = [x, y, z, w, t]\n                                    break\n                            if len(ans) > 2:\n                                break\n                        if len(ans) > 2:\n                            break\n                    if len(ans) > 2:\n                        break\n                if len(ans) > 2:\n                    break\n            if len(ans) > 2:\n                break\n        return ans",
    "efficient": "class Solution:\n    def splitIntoFibonacci(self, num: str) -> List[int]:\n        def dfs(i):\n            if i == n:\n                return len(ans) > 2\n            x = 0\n            for j in range(i, n):\n                if j > i and num[i] == '0':\n                    break\n                x = x * 10 + int(num[j])\n                if x > 2**31 - 1 or (len(ans) > 2 and x > ans[-2] + ans[-1]):\n                    break\n                if len(ans) < 2 or ans[-2] + ans[-1] == x:\n                    ans.append(x)\n                    if dfs(j + 1):\n                        return True\n                    ans.pop()\n            return False\n\n        n = len(num)\n        ans = []\n        dfs(0)\n        return ans\n",
    "finetuned": "class Solution:\n    def splitIntoFibonacci(self, num: str) -> List[int]:\n        def dfs(pos, a, b, cache):\n            if num[pos] == '0':\n                return True if pos == len(num) else False\n            if pos + len(a) + len(b) > len(num):\n                return False\n            if (t := int(a + b)) in cache:\n                return cache[t]\n            for i in range(1, min(len(a), len(b)) + 1):\n                if not dfs(pos + i, a[i:], b, cache):\n                    continue\n                cache[t] = True\n                return True\n            cache[t] = False\n            return False\n\n        nums = num.split(',')\n        if len(nums) < 3:\n            return []\n        ans = []\n        for i in range(1, len(nums)):\n            for j in range(i):\n                if not dfs(0, nums[0], nums[j], {}):\n                    break\n            else:\n                ans = [int(x) for x in nums[: i + 1]]\n                break\n        return ans",
    "raw_model": "class Solution:\n    def splitIntoFibonacci(self, num: str) -> List[int]:\n        def backtrack(i, a):\n            if i == len(num):\n                return True\n            for j in range(i, len(num)):\n                if j > i and num[i] == '0':\n                    break\n                x = int(num[i:j+1])\n                if x > 2**31 - 1:\n                    return False\n                if len(a) >= 2 and x > a[-1] + a[-2]:\n                    return False\n                if backtrack(j + 1, a + [x]):\n                    return True\n            return False\n\n        for i in range(1, len(num)):\n            x = int(num[:i])\n            if x > 2**31 - 1:\n                break\n            if backtrack(i, [x]):\n                return [x] + [int(num[j:j+1]) for j in range(i, len(num), 1)]\n\n        return []"
  },
  "is_python": true
}