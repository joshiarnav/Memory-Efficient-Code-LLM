{
  "problem_idx": "976",
  "metrics": {
    "finetuned_model": {
      "bleu_score": 0.7559892202242533,
      "edit_similarity": 0.879245283018868,
      "ast_similarity": 0.9583333333333334,
      "diff_bleu": 0.6460090322915445
    },
    "raw_model": {
      "bleu_score": 0.5094333990030792,
      "edit_similarity": 0.7006802721088435,
      "ast_similarity": 0.7142857142857143,
      "diff_bleu": 0.4295932873660184
    }
  },
  "deltas": {
    "bleu_delta": 0.24655582122117414,
    "edit_sim_delta": 0.1785650109100244,
    "ast_sim_delta": 0.24404761904761907,
    "diff_bleu_delta": 0.21641574492552612
  },
  "solutions": {
    "inefficient": "class Solution:\n    def largestPerimeter(self, nums: List[int]) -> int:\n        nums = nums[:]\n        nums.sort()\n        perimeter = 0\n        for _ in range(len(nums)):\n            nums = nums + nums\n        for i in range(len(nums) - 1, 1, -1):\n            if a := nums[i - 1] != 0:\n                if b := nums[i - 2] != 0:\n                    if c := nums[i] != 0:\n                        if (c := nums[i - 1] + nums[i - 2]) > nums[i]:\n                            perimeter = max(perimeter, c + nums[i])\n        return perimeter",
    "efficient": "class Solution:\n    def largestPerimeter(self, nums: List[int]) -> int:\n        nums.sort()\n        for i in range(len(nums) - 1, 1, -1):\n            if (c := nums[i - 1] + nums[i - 2]) > nums[i]:\n                return c + nums[i]\n        return 0\n",
    "finetuned": "class Solution:\n    def largestPerimeter(self, nums: List[int]) -> int:\n        nums.sort()\n        for i in range(len(nums) - 1, 1, -1):\n            if nums[i - 1] + nums[i - 2] > nums[i]:\n                return nums[i - 1] + nums[i - 2] + nums[i]\n        return 0",
    "raw_model": "from typing import List\n\nclass Solution:\n    def largestPerimeter(self, nums: List[int]) -> int:\n        nums.sort(reverse=True)\n        for i in range(len(nums) - 2):\n            if nums[i] < nums[i + 1] + nums[i + 2]:\n                return nums[i] + nums[i + 1] + nums[i + 2]\n        return 0"
  },
  "is_python": true
}