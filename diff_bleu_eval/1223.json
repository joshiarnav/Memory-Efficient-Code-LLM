{
  "problem_idx": "1223",
  "metrics": {
    "finetuned_model": {
      "bleu_score": 0.16078096771510772,
      "edit_similarity": 0.42195121951219516,
      "ast_similarity": 0.6363636363636364,
      "diff_bleu": 0.4853364102273456
    },
    "raw_model": {
      "bleu_score": 0.22499554893946075,
      "edit_similarity": 0.415807560137457,
      "ast_similarity": 0.7741935483870968,
      "diff_bleu": 0.4848820039700028
    }
  },
  "deltas": {
    "bleu_delta": -0.06421458122435303,
    "edit_sim_delta": 0.006143659374738153,
    "ast_sim_delta": -0.1378299120234604,
    "diff_bleu_delta": 0.0004544062573427765
  },
  "solutions": {
    "inefficient": "class Solution:\n    def dieSimulator(self, n: int, rollMax: List[int]) -> int:\n        MOD = 10**9 + 7\n        dp = [[[0]*16 for _ in range(6)] for _ in range(n+1)]\n\n        for i in range(6):\n            dp[1][i][1] = 1\n\n        for i in range(1, n):\n            for j in range(6):\n                for k in range(16):\n                    for m in range(1, 7):\n                        if m != j:\n                            dp[i+1][m][1] += dp[i][j][k]\n                        else:\n                            if k < rollMax[j]:\n                                dp[i+1][m][k+1] += dp[i][j][k]\n\n        ans = 0\n        for i in range(6):\n            for j in range(16):\n                ans += dp[n][i][j]\n\n        return ans % MOD",
    "efficient": "class Solution:\n    def dieSimulator(self, n: int, rollMax: List[int]) -> int:\n        @cache\n        def dfs(i, j, x):\n            if i >= n:\n                return 1\n            ans = 0\n            for k in range(1, 7):\n                if k != j:\n                    ans += dfs(i + 1, k, 1)\n                elif x < rollMax[j - 1]:\n                    ans += dfs(i + 1, j, x + 1)\n            return ans % (10**9 + 7)\n\n        return dfs(0, 0, 0)\n",
    "finetuned": "class Solution:\n    def dieSimulator(self, n: int, rollMax: List[int]) -> int:\n        def mul(a, b):\n            y = 1\n            while b:\n                if b & 1:\n                    y = y * a % MOD\n                a = a * a % MOD\n                b >>= 1\n            return y\n\n        f = [1] * (n + 1)\n        g = [1] * (n + 1)\n        for i in range(6):\n            for j in range(1, rollMax[i] + 1):\n                f[1] = mul(f[1], j)\n\n        for i in range(1, n + 1):\n            for j in range(6):\n                for k in range(1, rollMax[j] + 1):\n                    if j == 0 or k == 1:\n                        g[i] = mul(g[i], k)\n                    else:\n                        g[i] = mul(g[i], k)\n                        f[i] = (f[i] + mul(f[i - k], g[i - k])) % MOD\n        return (f[n] - 1 + MOD) % MOD",
    "raw_model": "class Solution:\n    def dieSimulator(self, n: int, rollMax: List[int]) -> int:\n        MOD = 10**9 + 7\n        dp = [[0]*(17) for _ in range(6)]\n\n        for i in range(6):\n            dp[i][1] = 1\n\n        for _ in range(1, n):\n            new_dp = [[0]*(17) for _ in range(6)]\n            for j in range(6):\n                for k in range(1, 17):\n                    for m in range(1, 7):\n                        if m != j or k < 2:\n                            new_dp[m-1][1] += dp[j][k]\n                        else:\n                            if k < rollMax[j]:\n                                new_dp[j][k+1] += dp[j][k]\n                            else:\n                                new_dp[j][1] += dp[j][k]\n            dp = new_dp\n\n        ans = 0\n        for i in range(6):\n            for j in range(1, 17):\n                ans += dp[i][j]\n\n        return ans % MOD"
  },
  "is_python": true
}