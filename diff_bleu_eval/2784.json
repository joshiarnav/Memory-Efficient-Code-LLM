{
  "problem_idx": "2784",
  "metrics": {
    "finetuned_model": {
      "bleu_score": 0.5507670208866398,
      "edit_similarity": 0.5317460317460317,
      "ast_similarity": 0.68,
      "diff_bleu": 0.5409994718761005
    },
    "raw_model": {
      "bleu_score": 0.35759477158422753,
      "edit_similarity": 0.417004048582996,
      "ast_similarity": 0.5714285714285714,
      "diff_bleu": 0.4212791706783346
    }
  },
  "deltas": {
    "bleu_delta": 0.19317224930241222,
    "edit_sim_delta": 0.11474198316303574,
    "ast_sim_delta": 0.10857142857142865,
    "diff_bleu_delta": 0.11972030119776594
  },
  "solutions": {
    "inefficient": "class Solution:\n    def isGood(self, nums: List[int]) -> bool:\n        n = len(nums) - 1\n        n *= 10\n        nums2 = [num + n for num in nums]\n        nums3 = [num * num for num in nums2]\n        nums4 = [num for num in nums3]\n        nums5 = [num for num in nums4]\n        nums6 = [num for num in nums5]\n        nums7 = [num for num in nums6]\n        nums8 = [num for num in nums7]\n        nums9 = [num for num in nums8]\n        nums10 = [num for num in nums9]\n        cnt = {}\n        for num in nums10:\n            if num in cnt:\n                cnt[num] += 1\n            else:\n                cnt[num] = 1\n        for i in range(1, n):\n            if i not in cnt:\n                return False\n            if cnt[i] != 1:\n                return False\n        if n not in cnt:\n            return False\n        if cnt[n] != 2:\n            return False\n        return True",
    "efficient": "class Solution:\n    def isGood(self, nums: List[int]) -> bool:\n        n = len(nums) - 1\n        cnt = Counter(nums)\n        cnt[n] -= 2\n        for i in range(1, n):\n            cnt[i] -= 1\n        return all(v == 0 for v in cnt.values())\n",
    "finetuned": "class Solution:\n    def isGood(self, nums: List[int]) -> bool:\n        n = len(nums) - 1\n        cnt = Counter(nums)\n        for i in range(1, n):\n            if i not in cnt:\n                return False\n            if cnt[i]!= 1:\n                return False\n        if n not in cnt:\n            return False\n        if cnt[n]!= 2:\n            return False\n        return True",
    "raw_model": "class Solution:\n    def isGood(self, nums: List[int]) -> bool:\n        n = max(nums)\n        cnt = {}\n        \n        # Count the occurrences of each number\n        for num in nums:\n            if num in cnt:\n                cnt[num] += 1\n            else:\n                cnt[num] = 1\n        \n        # Check if the array is a permutation of base[n]\n        for i in range(1, n):\n            if i not in cnt:\n                return False\n            if cnt[i] != 1:\n                return False\n        \n        if n not in cnt:\n            return False\n        if cnt[n] != 2:\n            return False\n        \n        return True"
  },
  "is_python": true
}