{
  "problem_idx": "2595",
  "metrics": {
    "finetuned_model": {
      "bleu_score": 0.34221823466313184,
      "edit_similarity": 0.5042372881355932,
      "ast_similarity": 0.625,
      "diff_bleu": 0.7368560295031619
    },
    "raw_model": {
      "bleu_score": 0.328026405138721,
      "edit_similarity": 0.46579804560260585,
      "ast_similarity": 0.5714285714285714,
      "diff_bleu": 0.6557329064925661
    }
  },
  "deltas": {
    "bleu_delta": 0.014191829524410837,
    "edit_sim_delta": 0.03843924253298736,
    "ast_sim_delta": 0.0535714285714286,
    "diff_bleu_delta": 0.08112312301059577
  },
  "solutions": {
    "inefficient": "class Solution:\n    def evenOddBit(self, n: int) -> List[int]:\n        binary = bin(n)[2:]\n        even = []\n        odd = []\n        even_count = 0\n        odd_count = 0\n        for i, char in enumerate(binary):\n            if char == '1' and i % 2 == 0:\n                even.append(i)\n            elif char == '1' and i % 2 != 0:\n                odd.append(i)\n        for index in even:\n            even_count += 1\n        for index in odd:\n            odd_count += 1\n        return [even_count, odd_count]",
    "efficient": "class Solution:\n    def evenOddBit(self, n: int) -> List[int]:\n        mask = 0x5555\n        even = (n & mask).bit_count()\n        odd = (n & ~mask).bit_count()\n        return [even, odd]\n",
    "finetuned": "class Solution:\n    def evenOddBit(self, n: int) -> List[int]:\n        cnt = 0\n        ans = [0, 0]\n        while n:\n            n &= n << 1\n            cnt += 1\n            if n & 1:\n                ans[cnt & 1] += 1\n        return ans",
    "raw_model": "class Solution:\n    def evenOddBit(self, n: int) -> List[int]:\n        even_count = 0\n        odd_count = 0\n        while n:\n            bit = n & 1\n            n >>= 1\n            if bit:\n                even_count += n % 2 == 0\n                odd_count += not n % 2\n        return [even_count, odd_count]"
  },
  "is_python": true
}