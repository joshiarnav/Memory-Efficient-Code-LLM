{
  "problem_idx": "35",
  "metrics": {
    "finetuned_model": {
      "bleu_score": 1.0,
      "edit_similarity": 1.0,
      "ast_similarity": 1.0,
      "diff_bleu": 1.0
    },
    "raw_model": {
      "bleu_score": 0.6484459208946511,
      "edit_similarity": 0.7881136950904393,
      "ast_similarity": 0.7692307692307693,
      "diff_bleu": 0.5973994952294782
    }
  },
  "deltas": {
    "bleu_delta": 0.35155407910534886,
    "edit_sim_delta": 0.21188630490956073,
    "ast_sim_delta": 0.23076923076923073,
    "diff_bleu_delta": 0.4026005047705218
  },
  "solutions": {
    "inefficient": "class Solution:\n    def searchInsert(self, nums: List[int], target: int) -> int:\n        def recursive_search(nums, left, right, target):\n            if left == right:\n                return left\n            mid = (left + right) >> 1\n            if nums[mid] >= target:\n                return recursive_search(nums, left, mid, target)\n            else:\n                return recursive_search(nums, mid + 1, right, target)\n        \n        return recursive_search(nums, 0, len(nums), target)",
    "efficient": "class Solution:\n    def searchInsert(self, nums: List[int], target: int) -> int:\n        left, right = 0, len(nums)\n        while left < right:\n            mid = (left + right) >> 1\n            if nums[mid] >= target:\n                right = mid\n            else:\n                left = mid + 1\n        return left\n",
    "finetuned": "class Solution:\n    def searchInsert(self, nums: List[int], target: int) -> int:\n        left, right = 0, len(nums)\n        while left < right:\n            mid = (left + right) >> 1\n            if nums[mid] >= target:\n                right = mid\n            else:\n                left = mid + 1\n        return left",
    "raw_model": "class Solution:\n    def searchInsert(self, nums: List[int], target: int) -> int:\n        left, right = 0, len(nums) - 1\n        while left <= right:\n            mid = (left + right) // 2\n            if nums[mid] == target:\n                return mid\n            elif nums[mid] < target:\n                left = mid + 1\n            else:\n                right = mid - 1\n        return left"
  },
  "is_python": true
}