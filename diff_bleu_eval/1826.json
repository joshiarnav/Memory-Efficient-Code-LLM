{
  "problem_idx": "1826",
  "metrics": {
    "finetuned_model": {
      "bleu_score": 0.4111466687425563,
      "edit_similarity": 0.6533957845433256,
      "ast_similarity": 0.5588235294117647,
      "diff_bleu": 0.6198664245236625
    },
    "raw_model": {
      "bleu_score": 0.5131915219811075,
      "edit_similarity": 0.6806526806526807,
      "ast_similarity": 0.625,
      "diff_bleu": 0.7058971666615751
    }
  },
  "deltas": {
    "bleu_delta": -0.10204485323855123,
    "edit_sim_delta": -0.02725689610935511,
    "ast_sim_delta": -0.06617647058823528,
    "diff_bleu_delta": -0.08603074213791262
  },
  "solutions": {
    "inefficient": "class Solution:\n    def badSensor(self, sensor1: List[int], sensor2: List[int]) -> int:\n        n = len(sensor1)\n        lists = [[sensor1, 1], [sensor2, 2]]\n        for i in range(n):\n            for j in range(n - i - 1):\n                new_sensor1 = sensor1[:i + j + 1] + sensor1[i + j + 2:] + [random.randint(1, 100)]\n                new_sensor2 = sensor2[:i + j + 1] + sensor2[i + j + 2:] + [random.randint(1, 100)]\n                if new_sensor1 == new_sensor2:\n                    return -1\n                if new_sensor1 == lists[0][0]:\n                    return lists[0][1]\n                if new_sensor2 == lists[1][0]:\n                    return lists[1][1]\n        return -1",
    "efficient": "class Solution:\n    def badSensor(self, sensor1: List[int], sensor2: List[int]) -> int:\n        i, n = 0, len(sensor1)\n        while i < n - 1:\n            if sensor1[i] != sensor2[i]:\n                break\n            i += 1\n        while i < n - 1:\n            if sensor1[i + 1] != sensor2[i]:\n                return 1\n            if sensor1[i] != sensor2[i + 1]:\n                return 2\n            i += 1\n        return -1\n",
    "finetuned": "class Solution:\n    def badSensor(self, sensor1: List[int], sensor2: List[int]) -> int:\n        n = len(sensor1)\n        for i in range(n):\n            a = sensor1[:i] + sensor1[i + 1:]\n            b = sensor2[:i] + sensor2[i + 1:]\n            if a == b:\n                return -1\n            if a in [sensor1, sensor2] or b in [sensor1, sensor2]:\n                return 1 if a == sensor1 else 2\n        return -1",
    "raw_model": "class Solution:\n    def badSensor(self, sensor1: List[int], sensor2: List[int]) -> int:\n        n = len(sensor1)\n        for i in range(n):\n            if sensor1[i] == sensor2[i]:\n                continue\n            for j in range(i + 1, n):\n                if sensor1[i] == sensor2[j] and sensor1[j] == sensor2[i]:\n                    return 1 if sensor1[i] != sensor2[i] else -1\n        return -1 if sensor1 == sensor2 else 1"
  },
  "is_python": true
}