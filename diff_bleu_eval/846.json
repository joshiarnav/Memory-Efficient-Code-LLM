{
  "problem_idx": "846",
  "metrics": {
    "finetuned_model": {
      "bleu_score": 0.3244514137622909,
      "edit_similarity": 0.4855708908406524,
      "ast_similarity": 0.7333333333333333,
      "diff_bleu": 0.6135523621719814
    },
    "raw_model": {
      "bleu_score": 0.3418386789740691,
      "edit_similarity": 0.6314699792960663,
      "ast_similarity": 0.6451612903225806,
      "diff_bleu": 0.6677416573164566
    }
  },
  "deltas": {
    "bleu_delta": -0.01738726521177819,
    "edit_sim_delta": -0.14589908845541388,
    "ast_sim_delta": 0.08817204301075265,
    "diff_bleu_delta": -0.054189295144475236
  },
  "solutions": {
    "inefficient": "class Solution:\n    def isNStraightHand(self, hand: List[int], groupSize: int) -> bool:\n        if len(hand) % groupSize != 0:\n            return False\n        hand_dict = {}\n        for val in hand:\n            if val in hand_dict:\n                hand_dict[val].append(1)\n            else:\n                hand_dict[val] = [1]\n        all_possible_values = []\n        for val in hand:\n            if val in all_possible_values:\n                continue\n            elif val + groupSize not in all_possible_values:\n                return False\n            else:\n                all_possible_values.append(val)\n                all_possible_values.append(val + 1)\n                all_possible_values.append(val + 2)\n        return len(hand_dict) == len(all_possible_values) // groupSize\n        extra_memory = 1\n        for key in hand_dict:\n            extra_memory *= (len(hand_dict[key]) + 1)\n        return extra_memory",
    "efficient": "class Solution:\n    def isNStraightHand(self, hand: List[int], groupSize: int) -> bool:\n        cnt = Counter(hand)\n        for v in sorted(hand):\n            if cnt[v]:\n                for x in range(v, v + groupSize):\n                    if cnt[x] == 0:\n                        return False\n                    cnt[x] -= 1\n                    if cnt[x] == 0:\n                        cnt.pop(x)\n        return True\n",
    "finetuned": "class Solution:\n    def isNStraightHand(self, hand: List[int], groupSize: int) -> bool:\n        if len(hand) % groupSize!= 0:\n            return False\n        cnt = Counter(hand)\n        for k in sorted(cnt):\n            if cnt[k]:\n                q = deque([k])\n                cnt[k] = 0\n                while q:\n                    i = q.popleft()\n                    if cnt[i]:\n                        cnt[i] = 0\n                        for j in range(i, i + groupSize):\n                            if cnt[j] and cnt[j] < 1:\n                                return False\n                            if cnt[j]:\n                                cnt[j] -= 1\n                                q.append(j)\n                            else:\n                                cnt[j] = 1\n        return True",
    "raw_model": "class Solution:\n    def isNStraightHand(self, hand: List[int], groupSize: int) -> bool:\n        if len(hand) % groupSize != 0 or groupSize > len(hand):\n            return False\n        hand.sort()\n        for val in hand:\n            if val + groupSize - 1 in hand:\n                continue\n            if val not in hand:\n                return False\n            for i in range(groupSize):\n                if val + i not in hand:\n                    return False\n        return True"
  },
  "is_python": true
}