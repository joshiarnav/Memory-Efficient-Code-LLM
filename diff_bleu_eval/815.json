{
  "problem_idx": "815",
  "metrics": {
    "finetuned_model": {
      "bleu_score": 0.8895332479121625,
      "edit_similarity": 0.9832347140039448,
      "ast_similarity": 0.9375,
      "diff_bleu": 0.44456881801920306
    },
    "raw_model": {
      "bleu_score": 0.28896478715440627,
      "edit_similarity": 0.5084241823587711,
      "ast_similarity": 0.7878787878787878,
      "diff_bleu": 0.19743426757731422
    }
  },
  "deltas": {
    "bleu_delta": 0.6005684607577562,
    "edit_sim_delta": 0.47481053164517373,
    "ast_sim_delta": 0.14962121212121215,
    "diff_bleu_delta": 0.24713455044188884
  },
  "solutions": {
    "inefficient": "class Solution:\n    def numBusesToDestination(\n        self, routes: List[List[int]], source: int, target: int\n    ) -> int:\n        if source == target:\n            return 0\n\n        s = [set(r) for r in routes]\n        d = defaultdict(list)\n        for i, r in enumerate(routes):\n            for v in r:\n                d[v] = d.get(v, []) + [i]\n\n        g = defaultdict(list)\n        for ids in d.values():\n            m = len(ids)\n            for i in range(m):\n                for j in range(i + 1, m):\n                    a, b = ids[i], ids[j]\n                    g[a] = g.get(a, []) + [b]\n                    g[b] = g.get(b, []) + [a]\n\n        q = deque(d[source])\n        ans = 1\n        vis = set(d[source])\n        while q:\n            for _ in range(len(q)):\n                i = q.popleft()\n                if target in s[i]:\n                    return ans\n                for j in g[i]:\n                    if j not in vis:\n                        vis.add(j)\n                        q.extend(d[j])\n            ans += 1\n        return -1",
    "efficient": "class Solution:\n    def numBusesToDestination(\n        self, routes: List[List[int]], source: int, target: int\n    ) -> int:\n        if source == target:\n            return 0\n\n        s = [set(r) for r in routes]\n        d = defaultdict(list)\n        for i, r in enumerate(routes):\n            for v in r:\n                d[v].append(i)\n\n        g = defaultdict(list)\n        for ids in d.values():\n            m = len(ids)\n            for i in range(m):\n                for j in range(i + 1, m):\n                    a, b = ids[i], ids[j]\n                    g[a].append(b)\n                    g[b].append(a)\n        q = deque(d[source])\n        ans = 1\n        vis = set(d[source])\n        while q:\n            for _ in range(len(q)):\n                i = q.popleft()\n                if target in s[i]:\n                    return ans\n                for j in g[i]:\n                    if j not in vis:\n                        vis.add(j)\n                        q.append(j)\n            ans += 1\n        return -1\n",
    "finetuned": "class Solution:\n    def numBusesToDestination(\n        self, routes: List[List[int]], source: int, target: int\n    ) -> int:\n        if source == target:\n            return 0\n\n        s = [set(r) for r in routes]\n        d = defaultdict(list)\n        for i, r in enumerate(routes):\n            for v in r:\n                d[v].append(i)\n\n        g = defaultdict(list)\n        for ids in d.values():\n            m = len(ids)\n            for i in range(m):\n                for j in range(i + 1, m):\n                    a, b = ids[i], ids[j]\n                    g[a].append(b)\n                    g[b].append(a)\n\n        q = deque([d[source][0]])\n        ans = 1\n        vis = {d[source][0]}\n        while q:\n            for i in range(len(q)):\n                p = q.popleft()\n                if target in s[p]:\n                    return ans\n                for j in g[p]:\n                    if j not in vis:\n                        vis.add(j)\n                        q.append(j)\n            ans += 1\n        return -1",
    "raw_model": "from collections import defaultdict, deque\n\nclass Solution:\n    def numBusesToDestination(\n        self, routes: List[List[int]], source: int, target: int\n    ) -> int:\n        if source == target:\n            return 0\n\n        # Create a dictionary to store the bus stop indices for each stop\n        stop_bus_indices = defaultdict(list)\n        for i, route in enumerate(routes):\n            for stop in route:\n                stop_bus_indices[stop].append(i)\n\n        # Initialize a queue with the source stop and its corresponding bus indices\n        q = deque([(source, 0)])\n        visited_stops = set()\n        visited_buses = set()\n\n        while q:\n            current_stop, bus_count = q.popleft()\n            if current_stop == target:\n                return bus_count\n\n            # Mark the current stop as visited\n            visited_stops.add(current_stop)\n\n            # Iterate over the buses that stop at the current stop\n            for bus in stop_bus_indices[current_stop]:\n                if bus not in visited_buses:\n                    visited_buses.add(bus)\n\n                    # Add the bus stops that the current bus visits to the queue\n                    for stop in routes[bus]:\n                        if stop not in visited_stops:\n                            q.append((stop, bus_count + 1))\n\n        return -1"
  },
  "is_python": true
}