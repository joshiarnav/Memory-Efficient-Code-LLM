{
  "problem_idx": "947",
  "metrics": {
    "finetuned_model": {
      "bleu_score": 0.3030525429501741,
      "edit_similarity": 0.48232848232848236,
      "ast_similarity": 0.7777777777777778,
      "diff_bleu": 0.5846027174572774
    },
    "raw_model": {
      "bleu_score": 0.23658559299008644,
      "edit_similarity": 0.33091286307053946,
      "ast_similarity": 0.65625,
      "diff_bleu": 0.4359625091674759
    }
  },
  "deltas": {
    "bleu_delta": 0.06646694996008765,
    "edit_sim_delta": 0.1514156192579429,
    "ast_sim_delta": 0.12152777777777779,
    "diff_bleu_delta": 0.1486402082898015
  },
  "solutions": {
    "inefficient": "class Solution:\n    def removeStones(self, stones: List[List[int]]) -> int:\n        n = len(stones)\n        res = 0\n        for i in range(n):\n            for j in range(i + 1, n):\n                if stones[i][0] == stones[j][0] or stones[i][1] == stones[j][1]:\n                    stones[j][0] = -1\n                    stones[j][1] = -1\n                    res += 1\n        return len([stone for stone in stones if stone[0] != -1 and stone[1] != -1])",
    "efficient": "class Solution:\n    def removeStones(self, stones: List[List[int]]) -> int:\n        def find(x):\n            if p[x] != x:\n                p[x] = find(p[x])\n            return p[x]\n\n        n = 10010\n        p = list(range(n << 1))\n        for x, y in stones:\n            p[find(x)] = find(y + n)\n\n        s = {find(x) for x, _ in stones}\n        return len(stones) - len(s)\n",
    "finetuned": "class Solution:\n    def removeStones(self, stones: List[List[int]]) -> int:\n        d = defaultdict(list)\n        for x, y in stones:\n            d[x].append(y)\n            d[10000 + y].append(x)\n        res = 0\n        for coord in d.values():\n            res += len(coord) - 1\n            for x in coord:\n                for y in coord:\n                    if x!= y:\n                        d[10000 + x].remove(y)\n                        d[y].remove(10000 + x)\n        return res",
    "raw_model": "class Solution:\n    def removeStones(self, stones: List[List[int]]) -> int:\n        n = len(stones)\n        parent = {}\n        rank = {}\n\n        def find(x):\n            if x not in parent:\n                parent[x] = x\n                rank[x] = 0\n            if parent[x] != x:\n                parent[x] = find(parent[x])\n            return parent[x]\n\n        def union(x, y):\n            rootX = find(x)\n            rootY = find(y)\n            if rootX != rootY:\n                if rank[rootX] > rank[rootY]:\n                    parent[rootY] = rootX\n                else:\n                    parent[rootX] = rootY\n                    if rank[rootX] == rank[rootY]:\n                        rank[rootY] += 1\n\n        for i in range(n):\n            parent[stones[i][0]] = stones[i][0]\n            parent[stones[i][1]] = stones[i][1]\n\n        for i in range(n):\n            union(stones[i][0], stones[i][1])\n\n        return n - len(set(find(x) for x in parent.keys()))"
  },
  "is_python": true
}