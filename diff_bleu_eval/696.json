{
  "problem_idx": "696",
  "metrics": {
    "finetuned_model": {
      "bleu_score": 0.8604921428030532,
      "edit_similarity": 0.9080188679245284,
      "ast_similarity": 0.9642857142857143,
      "diff_bleu": 0.6672109559003769
    },
    "raw_model": {
      "bleu_score": 0.3632323922369343,
      "edit_similarity": 0.4525,
      "ast_similarity": 0.6451612903225806,
      "diff_bleu": 0.25557242347072134
    }
  },
  "deltas": {
    "bleu_delta": 0.4972597505661189,
    "edit_sim_delta": 0.45551886792452834,
    "ast_sim_delta": 0.3191244239631337,
    "diff_bleu_delta": 0.4116385324296556
  },
  "solutions": {
    "inefficient": "class Solution:\n    def countBinarySubstrings(self, s: str) -> int:\n        i, n = 0, len(s)\n        t = []\n        while i < n:\n            cnt = 1\n            while i + 1 < n and s[i + 1] == s[i]:\n                cnt += 1\n                i += 1\n            temp = [s[i - cnt + 1:i + 1]] * cnt\n            t.extend(temp)\n            i += 1\n        t = [x for x in t if x != '']\n        ans = 0\n        for i in range(1, len(t)):\n            if len(t[i]) != len(t[i - 1]):\n                continue\n            ans += min(t[i - 1], t[i])\n        return ans",
    "efficient": "class Solution:\n    def countBinarySubstrings(self, s: str) -> int:\n        i, n = 0, len(s)\n        t = []\n        while i < n:\n            cnt = 1\n            while i + 1 < n and s[i + 1] == s[i]:\n                cnt += 1\n                i += 1\n            t.append(cnt)\n            i += 1\n        ans = 0\n        for i in range(1, len(t)):\n            ans += min(t[i - 1], t[i])\n        return ans\n",
    "finetuned": "class Solution:\n    def countBinarySubstrings(self, s: str) -> int:\n        i, n = 0, len(s)\n        t = []\n        while i < n:\n            cnt = 1\n            while i + 1 < n and s[i + 1] == s[i]:\n                cnt += 1\n                i += 1\n            t.append(cnt)\n            i += 1\n        ans = 0\n        i = 1\n        while i < len(t):\n            ans += min(t[i - 1], t[i])\n            i += 2\n        return ans",
    "raw_model": "class Solution:\n    def countBinarySubstrings(self, s: str) -> int:\n        # Count consecutive occurrences of '0' and '1' in the string\n        groups = [(s[i-1], i) for i in range(1, len(s)+1) if s[i-1] != s[i-2]]\n        \n        # Initialize the count of substrings with equal number of '0's and '1's\n        count = 0\n        \n        # Iterate over the groups\n        for i in range(1, len(groups)):\n            # The number of substrings that can be formed using the current group\n            # and the previous group is min(len(group[i-1]), len(group[i]))\n            count += min(len(groups[i-1]), len(groups[i]))\n        \n        return count"
  },
  "is_python": true
}