{
  "problem_idx": "1955",
  "metrics": {
    "finetuned_model": {
      "bleu_score": 0.2713182775863109,
      "edit_similarity": 0.7630979498861048,
      "ast_similarity": 0.875,
      "diff_bleu": 0.7409175517036474
    },
    "raw_model": {
      "bleu_score": 0.42687771212812514,
      "edit_similarity": 0.7533718689788054,
      "ast_similarity": 0.92,
      "diff_bleu": 0.7621471253171286
    }
  },
  "deltas": {
    "bleu_delta": -0.15555943454181426,
    "edit_sim_delta": 0.009726080907299428,
    "ast_sim_delta": -0.04500000000000004,
    "diff_bleu_delta": -0.021229573613481212
  },
  "solutions": {
    "inefficient": "class Solution:\n    def countSpecialSubsequences(self, nums: List[int]) -> int:\n        mod = 10**9 + 7\n        n = len(nums)\n        dp = [[[] for _ in range(3)] for _ in range(n)]\n        for i in range(n):\n            for j in range(3):\n                dp[i][j] = [0] * 10\n        for i in range(n):\n            dp[i][0][0] = 1 if nums[i] == 0 else 0\n        for i in range(1, n):\n            for j in range(3):\n                for k in range(len(dp[i-1][j])):\n                    dp[i][j][k] = 0\n            for j in range(3):\n                if nums[i] == 0:\n                    dp[i][0][0] = (2 * dp[i-1][0][0] + dp[i-1][0][0]) % mod\n                elif nums[i] == 1:\n                    dp[i][1][0] = (dp[i-1][0][0] + 2 * dp[i-1][1][0]) % mod\n                else:\n                    dp[i][2][0] = (dp[i-1][1][0] + 2 * dp[i-1][2][0]) % mod\n        ans = 0\n        for i in range(n):\n            for j in range(3):\n                ans = (ans + dp[n-1][j][0]) % mod\n        return ans",
    "efficient": "class Solution:\n    def countSpecialSubsequences(self, nums: List[int]) -> int:\n        mod = 10**9 + 7\n        n = len(nums)\n        f = [0] * 3\n        f[0] = nums[0] == 0\n        for i in range(1, n):\n            if nums[i] == 0:\n                f[0] = (2 * f[0] + 1) % mod\n            elif nums[i] == 1:\n                f[1] = (f[0] + 2 * f[1]) % mod\n            else:\n                f[2] = (f[1] + 2 * f[2]) % mod\n        return f[2]\n",
    "finetuned": "class Solution:\n    def countSpecialSubsequences(self, nums: List[int]) -> int:\n        mod = 10**9 + 7\n        f0, f1, f2 = 1, 0, 0\n        for x in nums:\n            if x == 0:\n                f0 = (2 * f0 + f0) % mod\n            elif x == 1:\n                f1 = (f0 + 2 * f1) % mod\n            else:\n                f2 = (f1 + 2 * f2) % mod\n        return f0 + f1 + f2",
    "raw_model": "class Solution:\n    def countSpecialSubsequences(self, nums: List[int]) -> int:\n        mod = 10**9 + 7\n        n = len(nums)\n        dp = [[0, 0, 0] for _ in range(n + 1)]\n        \n        dp[0][0] = 1\n        for i in range(n):\n            if nums[i] == 0:\n                dp[i + 1][0] = (dp[i][0] * 2) % mod\n            elif nums[i] == 1:\n                dp[i + 1][1] = (dp[i][0] + dp[i][1] * 2) % mod\n            else:\n                dp[i + 1][2] = (dp[i][1] + dp[i][2] * 2) % mod\n        \n        return (dp[n][0] + dp[n][1]) % mod"
  },
  "is_python": true
}