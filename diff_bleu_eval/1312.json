{
  "problem_idx": "1312",
  "metrics": {
    "finetuned_model": {
      "bleu_score": 0.4347634521825377,
      "edit_similarity": 0.4254807692307693,
      "ast_similarity": 0.8666666666666667,
      "diff_bleu": 0.8033970083324109
    },
    "raw_model": {
      "bleu_score": 0.6123279617120033,
      "edit_similarity": 0.7290322580645161,
      "ast_similarity": 0.9230769230769231,
      "diff_bleu": 0.9085530648531622
    }
  },
  "deltas": {
    "bleu_delta": -0.17756450952946562,
    "edit_sim_delta": -0.30355148883374683,
    "ast_sim_delta": -0.05641025641025643,
    "diff_bleu_delta": -0.10515605652075133
  },
  "solutions": {
    "inefficient": "class Solution:\n    def minInsertions(self, s: str) -> int:\n        n = len(s)\n        f = [[0] * 2*n for _ in range(2*n)]\n\n        for i in range(2*n):\n            for j in range(2*n):\n                if i == j and i < n:\n                    f[i][j] = 0\n                elif i == j and i >= n:\n                    f[i][j] = 1\n                elif i < j and i < n and j < n:\n                    f[i][j] = 1\n                elif i < j and i < n and j >= n:\n                    f[i][j] = 1\n                elif i < j and i >= n and j < n:\n                    f[i][j] = 1\n                elif i < j and i >= n and j >= n:\n                    f[i][j] = 1\n                elif i > j and i < n and j < n:\n                    f[i][j] = 0\n                elif i > j and i < n and j >= n:\n                    f[i][j] = 1\n                elif i > j and i >= n and j < n:\n                    f[i][j] = 1\n                elif i > j and i >= n and j >= n:\n                    f[i][j] = 2*n\n                elif i == j and i >= n:\n                    f[i][j] = 1\n                elif i == j and i < n:\n                    f[i][j] = 0\n\n        for k in range(1, 2*n):\n            for i in range(1, 2*n):\n                for j in range(1, 2*n - i + 1):\n                    if i + j + k == 2*n:\n                        f[i][j+k] = 0\n                    else:\n                        f[i][j+k] = 2*n\n\n        for i in range(1, 2*n):\n            for j in range(1, 2*n):\n                if i < 2*n and j < 2*n:\n                    if s[i-1] == s[2*n-j-1]:\n                        f[i][j] = f[i-1][j-1]\n                    else:\n                        f[i][j] = min(f[i-1][j], f[i][j-1]) + 1\n\n        return f[1][-1]",
    "efficient": "class Solution:\n    def minInsertions(self, s: str) -> int:\n        n = len(s)\n        f = [[0] * n for _ in range(n)]\n        for i in range(n - 2, -1, -1):\n            for j in range(i + 1, n):\n                if s[i] == s[j]:\n                    f[i][j] = f[i + 1][j - 1]\n                else:\n                    f[i][j] = min(f[i + 1][j], f[i][j - 1]) + 1\n        return f[0][-1]\n",
    "finetuned": "class Solution:\n    def minInsertions(self, s: str) -> int:\n        n = len(s)\n        f = [[0] * n for _ in range(n)]\n        for i in range(n):\n            for j in range(n):\n                if i == j and i < n:\n                    f[i][j] = 0\n                elif i == j and i >= n:\n                    f[i][j] = 1\n                elif i < j and i < n and j < n:\n                    if s[i] == s[j]:\n                        f[i][j] = f[i+1][j-1]\n                    else:\n                        f[i][j] = 1 + min(f[i+1][j], f[i][j-1])\n                elif i < j and i < n and j >= n:\n                    f[i][j] = 1 + f[i+1][j]\n                elif i < j and i >= n and j < n:\n                    f[i][j] = 1 + f[i][j-1]\n                elif i < j and i >= n and j >= n:\n                    f[i][j] = 2*n\n        return f[0][-1]",
    "raw_model": "class Solution:\n    def minInsertions(self, s: str) -> int:\n        n = len(s)\n        dp = [[0] * n for _ in range(n)]\n        \n        # Initialize the diagonal elements\n        for i in range(n):\n            dp[i][i] = 0\n        \n        # Fill up the rest of the table\n        for length in range(1, n):\n            for i in range(n - length):\n                j = i + length\n                if s[i] == s[j]:\n                    dp[i][j] = dp[i+1][j-1]\n                else:\n                    dp[i][j] = 1 + min(dp[i+1][j], dp[i][j-1])\n        \n        return dp[0][n-1]"
  },
  "is_python": true
}