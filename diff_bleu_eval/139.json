{
  "problem_idx": "139",
  "metrics": {
    "finetuned_model": {
      "bleu_score": 0.5271973274655026,
      "edit_similarity": 0.680327868852459,
      "ast_similarity": 0.6875,
      "diff_bleu": 0.6545545074152054
    },
    "raw_model": {
      "bleu_score": 0.6709843449909539,
      "edit_similarity": 0.6702702702702703,
      "ast_similarity": 0.7931034482758621,
      "diff_bleu": 0.7973885003116346
    }
  },
  "deltas": {
    "bleu_delta": -0.1437870175254513,
    "edit_sim_delta": 0.010057598582188687,
    "ast_sim_delta": -0.1056034482758621,
    "diff_bleu_delta": -0.14283399289642917
  },
  "solutions": {
    "inefficient": "class Solution:\n    def wordBreak(self, s: str, wordDict: List[str]) -> bool:\n        words = set(wordDict)\n        n = len(s)\n        f = [True] * (n + 1) * (n + 1)\n        res = [False] * (n + 1) * (n + 1)\n        for i in range(1, n + 1):\n            for j in range(1, n + 1):\n                for k in range(i, n + 1):\n                    if f[j - 1] and s[j - 1:k] in words:\n                        res[i * (n + 1) + k] = True\n                f[j * (n + 1) + i] = True\n        return res[-1]",
    "efficient": "class Solution:\n    def wordBreak(self, s: str, wordDict: List[str]) -> bool:\n        words = set(wordDict)\n        n = len(s)\n        f = [True] + [False] * n\n        for i in range(1, n + 1):\n            f[i] = any(f[j] and s[j:i] in words for j in range(i))\n        return f[n]\n",
    "finetuned": "class Solution:\n    def wordBreak(self, s: str, wordDict: List[str]) -> bool:\n        words = set(wordDict)\n        n = len(s)\n        f = [True] + [False] * n\n        for i in range(n):\n            for w in words:\n                if s[i:] == w or i - len(w) >= 0 and f[i - len(w)] and s[i : i + len(w)] == w:\n                    f[i + 1] = True\n        return f[-1]",
    "raw_model": "class Solution:\n    def wordBreak(self, s: str, wordDict: List[str]) -> bool:\n        words = set(wordDict)\n        n = len(s)\n        dp = [False] * (n + 1)\n        dp[0] = True\n        \n        for i in range(1, n + 1):\n            for j in range(i):\n                if dp[j] and s[j:i] in words:\n                    dp[i] = True\n                    break\n        \n        return dp[-1]"
  },
  "is_python": true
}