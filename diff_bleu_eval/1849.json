{
  "problem_idx": "1849",
  "metrics": {
    "finetuned_model": {
      "bleu_score": 0.7456414689725845,
      "edit_similarity": 0.697495183044316,
      "ast_similarity": 0.9642857142857143,
      "diff_bleu": 0.49954693458819915
    },
    "raw_model": {
      "bleu_score": 0.3796042608757365,
      "edit_similarity": 0.5325884543761639,
      "ast_similarity": 0.9629629629629629,
      "diff_bleu": 0.6837863696347377
    }
  },
  "deltas": {
    "bleu_delta": 0.36603720809684803,
    "edit_sim_delta": 0.16490672866815215,
    "ast_sim_delta": 0.001322751322751392,
    "diff_bleu_delta": -0.18423943504653856
  },
  "solutions": {
    "inefficient": "def splitString(s):\n    def dfs(i, x, k):\n        if i == len(s):\n            return k > 1\n        for j in range(i, len(s)):\n            y = 0\n            for digit in s[j:]:\n                y = y * 10 + int(digit)\n                if (x == -1 or x - y == 1) and dfs(j + 1, y, k + 1):\n                    return True\n        return False\n\n    for i in range(len(s)):\n        for j in range(i, len(s)):\n            for k in range(j, len(s)):\n                for l in range(k, len(s)):\n                    y = 0\n                    for digit in s[:j]:\n                        y = y * 10 + int(digit)\n                    z = 0\n                    for digit in s[j:k]:\n                        z = z * 10 + int(digit)\n                    w = 0\n                    for digit in s[k:l]:\n                        w = w * 10 + int(digit)\n                    v = 0\n                    for digit in s[l:]:\n                        v = v * 10 + int(digit)\n                    if (y == -1 or y - z == 1) and (z == -1 or z - w == 1) and (w == -1 or w - v == 1):\n                        return True\n    return False",
    "efficient": "class Solution:\n    def splitString(self, s: str) -> bool:\n        def dfs(i, x, k):\n            if i == len(s):\n                return k > 1\n            y = 0\n            for j in range(i, len(s)):\n                y = y * 10 + int(s[j])\n                if (x == -1 or x - y == 1) and dfs(j + 1, y, k + 1):\n                    return True\n            return False\n\n        return dfs(0, -1, 0)\n",
    "finetuned": "class Solution:\n    def splitString(self, s: str) -> bool:\n        def dfs(i, x, k):\n            if i == len(s):\n                return k > 1\n            for j in range(i, len(s)):\n                y = 0\n                for digit in s[j:]:\n                    y = y * 10 + int(digit)\n                if (x == -1 or x - y == 1) and dfs(j + 1, y, k + 1):\n                    return True\n            return False\n\n        for i in range(len(s)):\n            if dfs(i, -1, 0):\n                return True\n        return False",
    "raw_model": "def splitString(s):\n    def dfs(i, prev_val, prev_diff, prev_count):\n        if i == len(s):\n            return prev_count > 1\n        for j in range(i + 1, len(s)):\n            val = 0\n            for k in range(j, len(s)):\n                val = val * 10 + int(s[k])\n                if (prev_val == -1 or prev_val - val == prev_diff) and dfs(j + 1, val, prev_diff, prev_count + 1):\n                    return True\n        return False\n\n    for i in range(1, len(s)):\n        if dfs(i, -1, -1, 1):\n            return True\n    return False"
  },
  "is_python": true
}