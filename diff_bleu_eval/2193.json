{
  "problem_idx": "2193",
  "metrics": {
    "finetuned_model": {
      "bleu_score": 0.34902046456011615,
      "edit_similarity": 0.525,
      "ast_similarity": 0.8387096774193549,
      "diff_bleu": 0.6387754322648432
    },
    "raw_model": {
      "bleu_score": 0.2261050745736287,
      "edit_similarity": 0.5716666666666667,
      "ast_similarity": 0.71875,
      "diff_bleu": 0.6814792398189901
    }
  },
  "deltas": {
    "bleu_delta": 0.12291538998648746,
    "edit_sim_delta": -0.046666666666666634,
    "ast_sim_delta": 0.11995967741935487,
    "diff_bleu_delta": -0.04270380755414682
  },
  "solutions": {
    "inefficient": "class Solution:\n    def minMovesToMakePalindrome(self, s: str) -> int:\n        cs = list(s)\n        ans = 0\n        for i in range(len(s) // 2):\n            for j in range(i, len(s) // 2 + 1):\n                if cs[i] == cs[j]:\n                    temp = cs[i: j + 1]\n                    cs[i: j + 1] = cs[j: i: -1]\n                    for k in range(j, i, -1):\n                        cs[k], cs[k - 1] = cs[k - 1], cs[k]\n                    ans += len(temp) - 1\n                    break\n            else:\n                temp = cs[i: len(s) // 2 + 1]\n                cs[i: len(s) // 2 + 1] = cs[len(s) // 2: i: -1]\n                for k in range(len(s) // 2, i - 1, -1):\n                    cs[k], cs[k - 1] = cs[k - 1], cs[k]\n                ans += len(temp) - 1\n                break\n        return ans",
    "efficient": "class Solution:\n    def minMovesToMakePalindrome(self, s: str) -> int:\n        cs = list(s)\n        ans, n = 0, len(s)\n        i, j = 0, n - 1\n        while i < j:\n            even = False\n            for k in range(j, i, -1):\n                if cs[i] == cs[k]:\n                    even = True\n                    while k < j:\n                        cs[k], cs[k + 1] = cs[k + 1], cs[k]\n                        k += 1\n                        ans += 1\n                    j -= 1\n                    break\n            if not even:\n                ans += n // 2 - i\n            i += 1\n        return ans\n",
    "finetuned": "class Solution:\n    def minMovesToMakePalindrome(self, s: str) -> int:\n        cs = list(s)\n        ans = 0\n        for i in range(len(s) // 2):\n            if cs[i] == cs[-i - 1]:\n                cs.pop()\n                ans += 1\n            else:\n                cs[i], cs[-i - 1] = cs[-i - 1], cs[i]\n                ans += len(s) // 2 - i - 1\n                break\n        return ans",
    "raw_model": "class Solution:\n    def minMovesToMakePalindrome(self, s: str) -> int:\n        n = len(s)\n        left = 0\n        ans = 0\n        for right in range(1, n):\n            if s[right] == s[left]:\n                left += 1\n            else:\n                # If the stack is not empty and the top of the stack is equal to the character at the right index,\n                # we don't need to pop it. We can just increment the left pointer to match the character at the right index.\n                if left > 0 and s[right] == s[left - 1]:\n                    left -= 1\n                else:\n                    # If the stack is empty or the top of the stack is not equal to the character at the right index,\n                    # we need to pop all characters from the stack that are greater than the character at the right index.\n                    while left > 0 and s[right] < s[left - 1]:\n                        left -= 1\n                    # Push the character at the right index onto the stack.\n                    left += 1\n                # Increment the answer by the difference between the current right index and the left index.\n                ans += right - left + 1\n        # Return the answer.\n        return ans"
  },
  "is_python": true
}