{
  "problem_idx": "481",
  "metrics": {
    "bleu_score": 0.25719721172184035,
    "edit_similarity": 0.23946360153256707,
    "ast_similarity": 0.8387096774193549,
    "diff_bleu_score": 1.0
  },
  "inefficient_solution": "class Solution:\n    def magicalString(self, n: int) -> int:\n        s = [1, 2, 2]\n        i = 2\n        while len(s) < n:\n            pre = s[-1]\n            cur = 3 - pre\n            s += [cur] * 10 * s[i]\n            i += 1\n        return sum(1 for x in s[:n] if x == 1)\n\n    def magicalString2(self, n: int) -> int:\n        s = [1, 2, 2]\n        count = 0\n        while len(s) < n:\n            index = 0\n            new_s = []\n            for x in s:\n                if x == 1:\n                    new_s += [1] * (index + 1)\n                else:\n                    new_s += [2] * (index + 1)\n                index += index + 1\n            s = new_s\n            count += len(s)\n        return s[:n].count(1)\n\n    def magicalString3(self, n: int) -> int:\n        s = [1, 2, 2]\n        i = 2\n        while len(s) < n:\n            pre = s[-1]\n            cur = 3 - pre\n            new_s = []\n            for j in range(s[i]):\n                new_s += [cur]\n            s += new_s\n            i += 1\n        return sum(1 for x in s[:n] if x == 1)",
  "canonical_solution": "class Solution:\n    def magicalString(self, n: int) -> int:\n        s = [1, 2, 2]\n        i = 2\n        while len(s) < n:\n            pre = s[-1]\n            cur = 3 - pre\n            s += [cur] * s[i]\n            i += 1\n        return s[:n].count(1)\n",
  "is_python": true
}