{
  "problem_idx": "1857",
  "metrics": {
    "bleu_score": 0.6008074986075309,
    "edit_similarity": 0.7374392220421394,
    "ast_similarity": 0.9705882352941176,
    "diff_bleu_score": 1.0
  },
  "inefficient_solution": "class Solution:\n    def largestPathValue(self, colors: str, edges: List[List[int]]) -> int:\n        n = len(colors)\n        indeg = [0] * (n * 2)\n        g = [[[] for _ in range(2)] for _ in range(n)]\n        for a, b in edges:\n            g[a][0].append((b, 1))\n            g[b][1].append((a, 0))\n            indeg[b] += 1\n        q = deque()\n        dp = [[[0] * 26 for _ in range(2)] for _ in range(n)]\n        for i, v in enumerate(indeg):\n            if v == 0:\n                q.append(i)\n                c = ord(colors[i]) - ord('a')\n                dp[i][0][c] = 1\n        cnt = 0\n        ans = 1\n        while q:\n            i = q.popleft()\n            cnt += 1\n            for j, v in g[i][0]:\n                indeg[j] -= 1\n                if indeg[j] == 0:\n                    q.append(j)\n                c = ord(colors[j]) - ord('a')\n                dp[j][0] = dp[j][1]\n                dp[j][1] = [[0] * 26 for _ in range(2)]\n                for k in range(26):\n                    if dp[i][v][k] > 0:\n                        for l in range(26):\n                            dp[j][1][l] = max(dp[j][1][l], dp[i][v][k] + (l == k))\n                            ans = max(ans, dp[j][1][l])\n        return -1 if cnt < n else ans",
  "canonical_solution": "class Solution:\n    def largestPathValue(self, colors: str, edges: List[List[int]]) -> int:\n        n = len(colors)\n        indeg = [0] * n\n        g = defaultdict(list)\n        for a, b in edges:\n            g[a].append(b)\n            indeg[b] += 1\n        q = deque()\n        dp = [[0] * 26 for _ in range(n)]\n        for i, v in enumerate(indeg):\n            if v == 0:\n                q.append(i)\n                c = ord(colors[i]) - ord('a')\n                dp[i][c] += 1\n        cnt = 0\n        ans = 1\n        while q:\n            i = q.popleft()\n            cnt += 1\n            for j in g[i]:\n                indeg[j] -= 1\n                if indeg[j] == 0:\n                    q.append(j)\n                c = ord(colors[j]) - ord('a')\n                for k in range(26):\n                    dp[j][k] = max(dp[j][k], dp[i][k] + (c == k))\n                    ans = max(ans, dp[j][k])\n        return -1 if cnt < n else ans\n",
  "is_python": true
}