{
  "problem_idx": "1870",
  "metrics": {
    "bleu_score": 0.4561677651940766,
    "edit_similarity": 0.5,
    "ast_similarity": 0.8387096774193549,
    "diff_bleu_score": 1.0
  },
  "inefficient_solution": "class Solution:\n    def minSpeedOnTime(self, dist: List[int], hour: float) -> int:\n        n = len(dist)\n        res = 0\n        for speed in range(1, 10**7 + 1):\n            wait_time = 0\n            for i, d in enumerate(dist):\n                travel_time = d / speed\n                if i != len(dist) - 1:\n                    wait_time += math.ceil(travel_time) - travel_time\n                travel_time = math.ceil(travel_time)\n                res += travel_time\n            if res <= hour:\n                return speed\n            if res - hour <= 1e-9:\n                return -1\n        return -1",
  "canonical_solution": "class Solution:\n    def minSpeedOnTime(self, dist: List[int], hour: float) -> int:\n        def check(speed):\n            res = 0\n            for i, d in enumerate(dist):\n                res += (d / speed) if i == len(dist) - 1 else math.ceil(d / speed)\n            return res <= hour\n\n        r = 10**7 + 1\n        ans = bisect_left(range(1, r), True, key=check) + 1\n        return -1 if ans == r else ans\n",
  "is_python": true
}