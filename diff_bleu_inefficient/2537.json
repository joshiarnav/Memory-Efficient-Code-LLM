{
  "problem_idx": "2537",
  "metrics": {
    "bleu_score": 0.2610715050247037,
    "edit_similarity": 0.4146067415730337,
    "ast_similarity": 0.6875,
    "diff_bleu_score": 1.0
  },
  "inefficient_solution": "class Solution:\n    def countGood(self, nums: List[int], k: int) -> int:\n        if len(nums) == 0:\n            return 0\n        \n        freq_map = {}\n        ans = 0\n        i = 0\n        for j in range(len(nums)):\n            if nums[j] not in freq_map:\n                freq_map[nums[j]] = 0\n            freq_map[nums[j]] += 1\n            \n            while (j - i + 1 >= k):\n                if nums[i] not in freq_map:\n                    freq_map[nums[i]] = 0\n                freq_map[nums[i]] -= 1\n                i += 1\n                \n                if freq_map[nums[i]] == 0:\n                    del freq_map[nums[i]]\n            \n            if j - i + 1 >= k:\n                subarr_count = {num: 0 for num in set(nums[i:j+1])}\n                for num in nums[i:j+1]:\n                    subarr_count[num] += 1\n                if any(count >= k for count in subarr_count.values()):\n                    ans += 1\n        \n        return ans",
  "canonical_solution": "class Solution:\n    def countGood(self, nums: List[int], k: int) -> int:\n        cnt = Counter()\n        ans = cur = 0\n        i = 0\n        for x in nums:\n            cur += cnt[x]\n            cnt[x] += 1\n            while cur - cnt[nums[i]] + 1 >= k:\n                cnt[nums[i]] -= 1\n                cur -= cnt[nums[i]]\n                i += 1\n            if cur >= k:\n                ans += i + 1\n        return ans\n",
  "is_python": true
}