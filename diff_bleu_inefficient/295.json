{
  "problem_idx": "295",
  "metrics": {
    "bleu_score": 0.29420735815590526,
    "edit_similarity": 0.49662921348314604,
    "ast_similarity": 0.75,
    "diff_bleu_score": 1.0
  },
  "inefficient_solution": "class MedianFinder:\n    def __init__(self):\n        \"\"\"\n        initialize your data structure here.\n        \"\"\"\n        self.all_nums = []\n\n    def addNum(self, num: int) -> None:\n        self.all_nums.append(num)\n\n    def findMedian(self) -> float:\n        self.all_nums.sort()\n        n = len(self.all_nums)\n        if n % 2 == 1:\n            return self.all_nums[n // 2]\n        else:\n            return (self.all_nums[n // 2 - 1] + self.all_nums[n // 2]) / 2",
  "canonical_solution": "class MedianFinder:\n    def __init__(self):\n        \"\"\"\n        initialize your data structure here.\n        \"\"\"\n        self.h1 = []\n        self.h2 = []\n\n    def addNum(self, num: int) -> None:\n        heappush(self.h1, num)\n        heappush(self.h2, -heappop(self.h1))\n        if len(self.h2) - len(self.h1) > 1:\n            heappush(self.h1, -heappop(self.h2))\n\n    def findMedian(self) -> float:\n        if len(self.h2) > len(self.h1):\n            return -self.h2[0]\n        return (self.h1[0] - self.h2[0]) / 2\n\n\n# Your MedianFinder object will be instantiated and called as such:\n# obj = MedianFinder()\n# obj.addNum(num)\n# param_2 = obj.findMedian()\n",
  "is_python": true
}