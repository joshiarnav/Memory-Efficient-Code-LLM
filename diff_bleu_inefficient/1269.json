{
  "problem_idx": "1269",
  "metrics": {
    "bleu_score": 0.28261330381979755,
    "edit_similarity": 0.47137150466045274,
    "ast_similarity": 0.8484848484848485,
    "diff_bleu_score": 1.0
  },
  "inefficient_solution": "class Solution:\n    def numWays(self, steps: int, arrLen: int) -> int:\n        mod = 10**9 + 7\n        dp = [[[0 for _ in range(steps + 1)] for _ in range(steps + 1)] for _ in range(arrLen)]\n\n        for i in range(arrLen):\n            for j in range(steps + 1):\n                if i == 0 and j == 0:\n                    dp[i][j][0] = 1\n                else:\n                    for k in range(-1, 2):\n                        if i + k >= 0 and i + k < arrLen and j - 1 >= 0:\n                            dp[i][j][0] += dp[i + k][j - 1][0]\n                            dp[i][j][0] %= mod\n\n        ans = 0\n        for i in range(arrLen):\n            for j in range(steps + 1):\n                ans += dp[i][j][0]\n                ans %= mod\n\n        return ans",
  "canonical_solution": "class Solution:\n    def numWays(self, steps: int, arrLen: int) -> int:\n        @cache\n        def dfs(i, j):\n            if i > j or i >= arrLen or i < 0 or j < 0:\n                return 0\n            if i == 0 and j == 0:\n                return 1\n            ans = 0\n            for k in range(-1, 2):\n                ans += dfs(i + k, j - 1)\n                ans %= mod\n            return ans\n\n        mod = 10**9 + 7\n        return dfs(0, steps)\n",
  "is_python": true
}