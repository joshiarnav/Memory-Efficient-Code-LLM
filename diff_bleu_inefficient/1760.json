{
  "problem_idx": "1760",
  "metrics": {
    "bleu_score": 0.1756911802347954,
    "edit_similarity": 0.21948717948717944,
    "ast_similarity": 0.5862068965517241,
    "diff_bleu_score": 1.0
  },
  "inefficient_solution": "class Solution:\n    def minimumSize(self, nums: List[int], maxOperations: int) -> int:\n        self.result = float('inf')\n        self.max_value = max(nums)\n\n        def backtrack(curr_bag, operations):\n            if operations < 0:\n                return\n            if curr_bag == self.max_value:\n                self.result = min(self.result, curr_bag)\n                return\n            for i in range(1, self.max_value + 1):\n                new_bag = curr_bag + i\n                new_operations = operations - (new_bag - 1) // i\n                if new_bag in nums:\n                    nums.remove(new_bag)\n                backtrack(new_bag, new_operations)\n                if new_bag in nums:\n                    nums.append(new_bag)\n            if curr_bag == self.max_value:\n                self.result = min(self.result, curr_bag)\n                return\n\n        for i in range(1, self.max_value + 1):\n            backtrack(i, maxOperations)\n        return self.result",
  "canonical_solution": "class Solution:\n    def minimumSize(self, nums: List[int], maxOperations: int) -> int:\n        def check(mx: int) -> bool:\n            return sum((x - 1) // mx for x in nums) <= maxOperations\n\n        return bisect_left(range(1, max(nums)), True, key=check) + 1\n",
  "is_python": true
}