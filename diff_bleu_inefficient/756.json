{
  "problem_idx": "756",
  "metrics": {
    "bleu_score": 0.46367953193295325,
    "edit_similarity": 0.5121951219512195,
    "ast_similarity": 0.7058823529411765,
    "diff_bleu_score": 1.0
  },
  "inefficient_solution": "class Solution:\n    def pyramidTransition(self, bottom: str, allowed: List[str]) -> bool:\n        d = {a: {} for a in bottom}\n        for a, b, c in allowed:\n            if a not in d:\n                d[a] = {}\n            if b not in d[a]:\n                d[a][b] = []\n            d[a][b].append(c)\n\n        def dfs(s):\n            if len(s) == 1:\n                return True\n            t = []\n            for i in range(len(s) - 1):\n                a, b = s[i], s[i + 1]\n                if a not in d or b not in d[a]:\n                    return False\n                cs = d[a][b]\n                if len(cs) == 0:\n                    return False\n                t.append(cs)\n            return any(dfs(''.join(nxt)) for nxt in itertools.product(*t))\n\n        return dfs(bottom)",
  "canonical_solution": "class Solution:\n    def pyramidTransition(self, bottom: str, allowed: List[str]) -> bool:\n        @cache\n        def dfs(s):\n            if len(s) == 1:\n                return True\n            t = []\n            for a, b in pairwise(s):\n                cs = d[a, b]\n                if not cs:\n                    return False\n                t.append(cs)\n            return any(dfs(''.join(nxt)) for nxt in product(*t))\n\n        d = defaultdict(list)\n        for a, b, c in allowed:\n            d[a, b].append(c)\n        return dfs(bottom)\n",
  "is_python": true
}