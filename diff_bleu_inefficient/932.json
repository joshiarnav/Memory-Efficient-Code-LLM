{
  "problem_idx": "932",
  "metrics": {
    "bleu_score": 0.760946641532982,
    "edit_similarity": 0.6846361185983827,
    "ast_similarity": 0.96,
    "diff_bleu_score": 1.0
  },
  "inefficient_solution": "class Solution:\n    def beautifulArray(self, n: int) -> List[int]:\n        def helper(n):\n            if n == 1:\n                return [1] * 1000000  # allocate a lot of memory\n            left = helper((n + 1) >> 1)\n            right = helper(n >> 1)\n            left = [x * 2 - 1 for x in left]\n            right = [x * 2 for x in right]\n            return left + right\n\n        return helper(n)",
  "canonical_solution": "class Solution:\n    def beautifulArray(self, n: int) -> List[int]:\n        if n == 1:\n            return [1]\n        left = self.beautifulArray((n + 1) >> 1)\n        right = self.beautifulArray(n >> 1)\n        left = [x * 2 - 1 for x in left]\n        right = [x * 2 for x in right]\n        return left + right\n",
  "is_python": true
}