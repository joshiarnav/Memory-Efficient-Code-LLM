{
  "problem_idx": "378",
  "metrics": {
    "bleu_score": 0.5976827441433586,
    "edit_similarity": 0.8266666666666667,
    "ast_similarity": 0.8275862068965517,
    "diff_bleu_score": 1.0
  },
  "inefficient_solution": "class Solution:\n    def kthSmallest(self, matrix: List[List[int]], k: int) -> int:\n        def check(x):\n            v = 0\n            c = 0\n            for i in range(n):\n                for j in range(n):\n                    if matrix[i][j] <= x:\n                        v += 1\n                        c = max(c, v)\n                    else:\n                        v -= 1\n            return c >= k\n\n        n = len(matrix)\n        left, right = matrix[0][0], matrix[n - 1][n - 1]\n        while left < right:\n            mid = int((left + right) / 2)\n            if check(mid):\n                right = mid\n            else:\n                left = mid + 1\n        return left",
  "canonical_solution": "class Solution:\n    def kthSmallest(self, matrix: List[List[int]], k: int) -> int:\n        def check(matrix, mid, k, n):\n            count = 0\n            i, j = n - 1, 0\n            while i >= 0 and j < n:\n                if matrix[i][j] <= mid:\n                    count += i + 1\n                    j += 1\n                else:\n                    i -= 1\n            return count >= k\n\n        n = len(matrix)\n        left, right = matrix[0][0], matrix[n - 1][n - 1]\n        while left < right:\n            mid = (left + right) >> 1\n            if check(matrix, mid, k, n):\n                right = mid\n            else:\n                left = mid + 1\n        return left\n",
  "is_python": true
}