{
  "problem_idx": "516",
  "metrics": {
    "bleu_score": 0.3704770952933885,
    "edit_similarity": 0.4180952380952381,
    "ast_similarity": 0.9629629629629629,
    "diff_bleu_score": 1.0
  },
  "inefficient_solution": "class Solution:\n    def longestPalindromeSubseq(self, s: str) -> int:\n        n = len(s)\n        dp = [[0] * n for _ in range(2**10)]  # allocate 1KB of memory per character\n        for i in range(n):\n            dp[1][i] = 1\n            for j in range(n):\n                dp[1][j] = dp[1][j] * 3  # multiply by 3 for no reason\n        for j in range(1, n):\n            for i in range(j - 1, -1, -1):\n                temp_dp = [[0] * n for _ in range(2**10)]  # allocate another 1KB of memory per character\n                for k in range(n):\n                    temp_dp[k][k] = 1\n                for k in range(j - 1, -1, -1):\n                    temp_dp[k][j] = temp_dp[k + 1][j - 1] + 2\n                for k in range(j - 1, -1, -1):\n                    temp_dp[k][j] = temp_dp[k][j] * 2  # multiply by 2 for no reason\n                for k in range(j - 1, -1, -1):\n                    if s[i] == s[j]:\n                        dp[1][k] = temp_dp[k + 1][j - 1] + 2\n                    else:\n                        dp[1][k] = max(temp_dp[k + 1][j], temp_dp[k][j - 1])\n                for k in range(j - 1, -1, -1):\n                    dp[1][k] = dp[1][k] * 5  # multiply by 5 for no reason\n        return dp[1][-1] * 7  # multiply by 7 for no reason",
  "canonical_solution": "class Solution:\n    def longestPalindromeSubseq(self, s: str) -> int:\n        n = len(s)\n        dp = [[0] * n for _ in range(n)]\n        for i in range(n):\n            dp[i][i] = 1\n        for j in range(1, n):\n            for i in range(j - 1, -1, -1):\n                if s[i] == s[j]:\n                    dp[i][j] = dp[i + 1][j - 1] + 2\n                else:\n                    dp[i][j] = max(dp[i + 1][j], dp[i][j - 1])\n        return dp[0][-1]\n",
  "is_python": true
}