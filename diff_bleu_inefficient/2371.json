{
  "problem_idx": "2371",
  "metrics": {
    "bleu_score": 0.7056796782372832,
    "edit_similarity": 0.7286821705426356,
    "ast_similarity": 1.0,
    "diff_bleu_score": 1.0
  },
  "inefficient_solution": "class Solution:\n    def minScore(self, grid: List[List[int]]) -> List[List[int]]:\n        m, n = len(grid), len(grid[0])\n        nums = [(v, i, j) for i, row in enumerate(grid) for j, v in enumerate(row)]\n        nums.sort()\n        \n        # Create a 2D array to store the maximum value in each row and column\n        row_max = [0] * m\n        col_max = [0] * n\n        for i in range(m):\n            row_max[i] = [0] * n\n        for j in range(n):\n            col_max[j] = [0] * m\n        \n        # Create a 2D array to store the result\n        ans = [[0] * n for _ in range(m)]\n        for _ in range(m * n):\n            for _, i, j in nums:\n                ans[i][j] = max(row_max[i][j], col_max[j][i]) + 1\n                row_max[i][j] = col_max[j][i] = ans[i][j]\n        \n        return ans",
  "canonical_solution": "class Solution:\n    def minScore(self, grid: List[List[int]]) -> List[List[int]]:\n        m, n = len(grid), len(grid[0])\n        nums = [(v, i, j) for i, row in enumerate(grid) for j, v in enumerate(row)]\n        nums.sort()\n        row_max = [0] * m\n        col_max = [0] * n\n        ans = [[0] * n for _ in range(m)]\n        for _, i, j in nums:\n            ans[i][j] = max(row_max[i], col_max[j]) + 1\n            row_max[i] = col_max[j] = ans[i][j]\n        return ans\n",
  "is_python": true
}