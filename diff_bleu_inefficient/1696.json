{
  "problem_idx": "1696",
  "metrics": {
    "bleu_score": 0.24070838816837425,
    "edit_similarity": 0.44504021447721176,
    "ast_similarity": 0.8484848484848485,
    "diff_bleu_score": 1.0
  },
  "inefficient_solution": "class Solution:\n    def maxResult(self, nums: List[int], k: int) -> int:\n        n = len(nums)\n        f = [[-1 for _ in range(k + 1)] for _ in range(n)]\n        q = [[] for _ in range(n)]\n        for i in range(n):\n            for j in range(1, min(k + 1, i + 1)):\n                if i - j < 0:\n                    f[i][j] = nums[i]\n                else:\n                    f[i][j] = nums[i] + f[i-j][j]\n            for j in range(1, min(k + 1, i + 1)):\n                while q[i-j] and f[i-j][j] <= f[i][j]:\n                    q[i-j].pop()\n                q[i-j].append(f[i][j])\n        ans = float('-inf')\n        for i in range(n):\n            for j in range(1, min(k + 1, i + 1)):\n                ans = max(ans, f[i][j])\n        return ans",
  "canonical_solution": "class Solution:\n    def maxResult(self, nums: List[int], k: int) -> int:\n        n = len(nums)\n        f = [0] * n\n        q = deque([0])\n        for i in range(n):\n            if i - q[0] > k:\n                q.popleft()\n            f[i] = nums[i] + f[q[0]]\n            while q and f[q[-1]] <= f[i]:\n                q.pop()\n            q.append(i)\n        return f[-1]\n",
  "is_python": true
}