{
  "problem_idx": "235",
  "metrics": {
    "bleu_score": 0.26465952654421865,
    "edit_similarity": 0.4171348314606742,
    "ast_similarity": 0.5769230769230769,
    "diff_bleu_score": 1.0
  },
  "inefficient_solution": "class Solution:\n    def lowestCommonAncestor(\n        self, root: 'TreeNode', p: 'TreeNode', q: 'TreeNode'\n    ) -> 'TreeNode':\n        self.check = False\n        self.result = None\n\n        def helper(root, p, q):\n            if root is None:\n                return False\n            left = helper(root.left, p, q)\n            right = helper(root.right, p, q)\n            if left and right:\n                return True\n            if (root == p or root == q) and not self.check:\n                self.check = True\n                self.result = root\n                return True\n            if left or right:\n                return True\n            return False\n\n        helper(root, p, q)\n        return self.result",
  "canonical_solution": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\n\nclass Solution:\n    def lowestCommonAncestor(\n        self, root: 'TreeNode', p: 'TreeNode', q: 'TreeNode'\n    ) -> 'TreeNode':\n        while 1:\n            if root.val < min(p.val, q.val):\n                root = root.right\n            elif root.val > max(p.val, q.val):\n                root = root.left\n            else:\n                return root\n",
  "is_python": true
}