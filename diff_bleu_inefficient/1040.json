{
  "problem_idx": "1040",
  "metrics": {
    "bleu_score": 0.2168802495409617,
    "edit_similarity": 0.3978622327790974,
    "ast_similarity": 0.8055555555555556,
    "diff_bleu_score": 1.0
  },
  "inefficient_solution": "class Solution:\n    def numMovesStonesII(self, stones):\n        stones = [0] + stones + [stones[-1] + 1]\n        n = len(stones)\n        stones.sort()\n        dp = [[float('inf')] * n for _ in range(n)]\n        for i in range(n):\n            for j in range(i, n):\n                if i == j:\n                    dp[i][j] = 0\n                else:\n                    dp[i][j] = min(dp[i][j-1] + 1, dp[i-1][j] + 1)\n                if j > i and stones[j] - stones[i] + 1 == j - i:\n                    dp[i][j] = min(dp[i][j], dp[i+1][j-1] + 1)\n        moves = [0] * n\n        for i in range(n):\n            for j in range(i, n):\n                if stones[j] - stones[i] + 1 == j - i + 1:\n                    moves[i] = max(moves[i], j - i + 1)\n        return [min(min(moves[i:j]) for i, j in enumerate(dp) if j[-1] == float('inf')), max(dp[-1])]",
  "canonical_solution": "class Solution:\n    def numMovesStonesII(self, stones: List[int]) -> List[int]:\n        stones.sort()\n        mi = n = len(stones)\n        mx = max(stones[-1] - stones[1] + 1, stones[-2] - stones[0] + 1) - (n - 1)\n        i = 0\n        for j, x in enumerate(stones):\n            while x - stones[i] + 1 > n:\n                i += 1\n            if j - i + 1 == n - 1 and x - stones[i] == n - 2:\n                mi = min(mi, 2)\n            else:\n                mi = min(mi, n - (j - i + 1))\n        return [mi, mx]\n",
  "is_python": true
}