{
  "problem_idx": "306",
  "metrics": {
    "bleu_score": 0.3662840095104494,
    "edit_similarity": 0.5239687848383501,
    "ast_similarity": 0.7419354838709677,
    "diff_bleu_score": 1.0
  },
  "inefficient_solution": "class Solution:\n    def isAdditiveNumber(self, num: str) -> bool:\n        n = len(num)\n\n        # Generate all possible pairs of substrings\n        for i in range(1, n - 1):\n            for j in range(i + 1, n):\n                a = num[:i]\n                b = num[i:j]\n\n                # Generate all possible next numbers in the sequence\n                for k in range(j + 1, n):\n                    c = num[j:k]\n\n                    # Check if the sequence is valid\n                    if self.isValidSequence(a, b, c):\n                        return True\n\n        return False\n\n    def isValidSequence(self, a, b, c):\n        def dfs(num, a, b, i):\n            if len(num) == 0:\n                return True\n            if len(num) < len(a) or len(num) < len(b) or num[0] == '0' and len(a) == 1 and len(b) == 1:\n                return False\n\n            next_num = str(int(a) + int(b))\n            for j in range(i, len(num) + 1):\n                if num[:j] == next_num:\n                    return dfs(num[j:], a, b, j)\n            return False\n\n        return dfs(c, a, b, 0)",
  "canonical_solution": "class Solution:\n    def isAdditiveNumber(self, num: str) -> bool:\n        def dfs(a, b, num):\n            if not num:\n                return True\n            if a + b > 0 and num[0] == '0':\n                return False\n            for i in range(1, len(num) + 1):\n                if a + b == int(num[:i]):\n                    if dfs(b, a + b, num[i:]):\n                        return True\n            return False\n\n        n = len(num)\n        for i in range(1, n - 1):\n            for j in range(i + 1, n):\n                if i > 1 and num[0] == '0':\n                    break\n                if j - i > 1 and num[i] == '0':\n                    continue\n                if dfs(int(num[:i]), int(num[i:j]), num[j:]):\n                    return True\n        return False\n",
  "is_python": true
}