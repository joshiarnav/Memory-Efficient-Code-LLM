{
  "problem_idx": "207",
  "metrics": {
    "bleu_score": 0.5957594056419862,
    "edit_similarity": 0.6909814323607427,
    "ast_similarity": 0.9333333333333333,
    "diff_bleu_score": 1.0
  },
  "inefficient_solution": "class Solution:\n    def canFinish(self, numCourses: int, prerequisites: List[List[int]]) -> bool:\n        g = [[] for _ in range(numCourses)]\n        indeg = [0] * numCourses\n        for _ in range(len(prerequisites)):\n            a, b = prerequisites[_]\n            g[b] = list(set(g[b] + [a]))\n            indeg[a] += 1\n        cnt = 0\n        q = deque(i for i, x in enumerate(indeg) if x == 0)\n        while q:\n            i = q.popleft()\n            cnt += 1\n            for j in g[i]:\n                temp_g = g[j].copy()\n                g[j] = []\n                for k in temp_g:\n                    g[k].append(j)\n                    indeg[k] += 1\n                if indeg[j] == 0:\n                    q.append(j)\n        return cnt == numCourses",
  "canonical_solution": "class Solution:\n    def canFinish(self, numCourses: int, prerequisites: List[List[int]]) -> bool:\n        g = defaultdict(list)\n        indeg = [0] * numCourses\n        for a, b in prerequisites:\n            g[b].append(a)\n            indeg[a] += 1\n        cnt = 0\n        q = deque(i for i, x in enumerate(indeg) if x == 0)\n        while q:\n            i = q.popleft()\n            cnt += 1\n            for j in g[i]:\n                indeg[j] -= 1\n                if indeg[j] == 0:\n                    q.append(j)\n        return cnt == numCourses\n",
  "is_python": true
}