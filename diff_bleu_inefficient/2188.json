{
  "problem_idx": "2188",
  "metrics": {
    "bleu_score": 0.22872447723672962,
    "edit_similarity": 0.4826629680998613,
    "ast_similarity": 0.6176470588235294,
    "diff_bleu_score": 1.0
  },
  "inefficient_solution": "class Solution:\n    def minimumFinishTime(self, tires, changeTime, numLaps):\n        min_time = float('inf')\n        for f, r in tires:\n            lap_times = []\n            time = 0\n            i = 0\n            while 1:\n                time += f\n                i += 1\n                lap_times.append(time)\n                if time > changeTime + f:\n                    break\n                time *= r\n            for i in range(1, numLaps + 1):\n                cost = 0\n                for j, t in enumerate(lap_times):\n                    if i % (j + 1) == 0:\n                        cost += t\n                cost += (i // (j + 1)) * changeTime\n                min_time = min(min_time, cost)\n        return min_time",
  "canonical_solution": "class Solution:\n    def minimumFinishTime(\n        self, tires: List[List[int]], changeTime: int, numLaps: int\n    ) -> int:\n        cost = [inf] * 18\n        for f, r in tires:\n            i, s, t = 1, 0, f\n            while t <= changeTime + f:\n                s += t\n                cost[i] = min(cost[i], s)\n                t *= r\n                i += 1\n        f = [inf] * (numLaps + 1)\n        f[0] = -changeTime\n        for i in range(1, numLaps + 1):\n            for j in range(1, min(18, i + 1)):\n                f[i] = min(f[i], f[i - j] + cost[j])\n            f[i] += changeTime\n        return f[numLaps]\n",
  "is_python": true
}