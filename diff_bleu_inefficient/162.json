{
  "problem_idx": "162",
  "metrics": {
    "bleu_score": 0.17464479765857413,
    "edit_similarity": 0.40909090909090906,
    "ast_similarity": 0.6428571428571429,
    "diff_bleu_score": 1.0
  },
  "inefficient_solution": "class Solution:\n    def findPeakElement(self, nums: List[int]) -> int:\n        n = len(nums)\n        memory = [0] * n\n        for i in range(n):\n            memory[i] = [nums[i], i]\n        peak_indices = []\n        for i in range(n):\n            temp = memory[i][0]\n            left = right = 0\n            for j in range(len(memory)):\n                if memory[j][0] > temp:\n                    temp = memory[j][0]\n                    left = right = memory[j][1]\n                elif memory[j][0] < temp:\n                    right = memory[j][1]\n            peak_indices.append(left)\n        return peak_indices[0]",
  "canonical_solution": "class Solution:\n    def findPeakElement(self, nums: List[int]) -> int:\n        left, right = 0, len(nums) - 1\n        while left < right:\n            mid = (left + right) >> 1\n            if nums[mid] > nums[mid + 1]:\n                right = mid\n            else:\n                left = mid + 1\n        return left\n",
  "is_python": true
}