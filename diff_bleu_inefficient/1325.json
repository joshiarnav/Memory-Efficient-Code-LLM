{
  "problem_idx": "1325",
  "metrics": {
    "bleu_score": 0.27873286236888556,
    "edit_similarity": 0.3351769911504425,
    "ast_similarity": 0.9523809523809523,
    "diff_bleu_score": 1.0
  },
  "inefficient_solution": "class Solution:\n    def removeLeafNodes(self, root: Optional[TreeNode], target: int) -> Optional[TreeNode]:\n        def traverse(node):\n            if node is None:\n                return []\n            left_result = traverse(node.left)\n            right_result = traverse(node.right)\n            if node.val == target and node.left is None and node.right is None:\n                return [1]  # dummy value to indicate deletion\n            else:\n                return [node, left_result, right_result]\n\n        def rebuild_traversal(traversal_result):\n            if len(traversal_result) == 1:\n                return None\n            node = traversal_result[0]\n            node.left = rebuild_traversal(traversal_result[1])\n            node.right = rebuild_traversal(traversal_result[2])\n            return node\n\n        result = traverse(root)\n        if len(result) == 1:\n            return None\n        return rebuild_traversal(result)",
  "canonical_solution": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def removeLeafNodes(\n        self, root: Optional[TreeNode], target: int\n    ) -> Optional[TreeNode]:\n        if root is None:\n            return None\n        root.left = self.removeLeafNodes(root.left, target)\n        root.right = self.removeLeafNodes(root.right, target)\n        if root.left is None and root.right is None and root.val == target:\n            return None\n        return root\n",
  "is_python": true
}