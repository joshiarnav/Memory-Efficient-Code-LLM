{
  "problem_idx": "1238",
  "metrics": {
    "bleu_score": 0.3192654645076094,
    "edit_similarity": 0.2319587628865979,
    "ast_similarity": 0.5714285714285714,
    "diff_bleu_score": 1.0
  },
  "inefficient_solution": "class Solution:\n    def circularPermutation(self, n: int, start: int) -> List[int]:\n        def generate_permutations(n, start, seen):\n            if n == 0:\n                return [start]\n            permutations = []\n            for i in range(1 << n):\n                if i not in seen:\n                    seen.add(i)\n                    permutations.append(i)\n                    permutations.extend(generate_permutations(n - 1, i ^ (i >> 1) ^ start, seen))\n                    seen.remove(i)\n            return permutations\n\n        return generate_permutations(n, start, set())",
  "canonical_solution": "class Solution:\n    def circularPermutation(self, n: int, start: int) -> List[int]:\n        return [i ^ (i >> 1) ^ start for i in range(1 << n)]\n",
  "is_python": true
}