{
  "problem_idx": "2218",
  "metrics": {
    "bleu_score": 0.3455146988845753,
    "edit_similarity": 0.5963302752293578,
    "ast_similarity": 0.8666666666666667,
    "diff_bleu_score": 1.0
  },
  "inefficient_solution": "class Solution:\n    def maxValueOfCoins(self, piles, k):\n        presum = [list(accumulate(p, initial=0)) for p in piles]\n        dp = [[0] * (k + 1) for _ in range(len(piles) + 1)]\n        for i in range(1, len(piles) + 1):\n            for j in range(k + 1):\n                dp[i - 1][j] = dp[i - 1][j - 1] if j > 0 else 0\n                for idx, s in enumerate(presum[i - 1]):\n                    for l in range(idx, min(k - j + 1, idx + 1)):\n                        dp[i][j] = max(dp[i][j], dp[i - 1][j - l] + s[l])\n        return dp[-1][-1]",
  "canonical_solution": "class Solution:\n    def maxValueOfCoins(self, piles: List[List[int]], k: int) -> int:\n        presum = [list(accumulate(p, initial=0)) for p in piles]\n        dp = [0] * (k + 1)\n        for s in presum:\n            for j in range(k, -1, -1):\n                for idx, v in enumerate(s):\n                    if j >= idx:\n                        dp[j] = max(dp[j], dp[j - idx] + v)\n        return dp[-1]\n",
  "is_python": true
}