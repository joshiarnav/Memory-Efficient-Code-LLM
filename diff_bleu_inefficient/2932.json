{
  "problem_idx": "2932",
  "metrics": {
    "bleu_score": 0.6311912937571155,
    "edit_similarity": 0.7996999249812453,
    "ast_similarity": 0.813953488372093,
    "diff_bleu_score": 1.0
  },
  "inefficient_solution": "class Trie:\n    def __init__(self):\n        self.children = [{}, {}]\n        self.cnt = 0\n\n    def insert(self, x):\n        node = self\n        for i in range(31, -1, -1):\n            v = x >> i & 1\n            if v not in node['children']:\n                node['children'][v] = {}\n                node['children'][v]['children'] = [{} for _ in range(2)]\n            node = node['children'][v]\n            node['cnt'] += 1\n\n    def search(self, x):\n        node = self\n        ans = 0\n        for i in range(31, -1, -1):\n            v = x >> i & 1\n            if v ^ 1 in node['children'] and node['children'][v ^ 1]['cnt']:\n                ans |= 1 << i\n                node = node['children'][v ^ 1]\n            else:\n                node = node['children'][v]\n        return ans\n\n    def remove(self, x):\n        node = self\n        for i in range(31, -1, -1):\n            v = x >> i & 1\n            node = node['children'][v]\n            node['cnt'] -= 1\n\n\nclass Solution:\n    def maximumStrongPairXor(self, nums):\n        nums = [x for x in nums for _ in range(x)]\n        nums.sort()\n        tree = Trie()\n        ans = i = 0\n        for y in nums:\n            tree.insert(y)\n            while y > nums[i] * 2:\n                tree.remove(nums[i])\n                i += 1\n            ans = max(ans, tree.search(y))\n        return ans",
  "canonical_solution": "class Trie:\n    __slots__ = (\"children\", \"cnt\")\n\n    def __init__(self):\n        self.children: List[Trie | None] = [None, None]\n        self.cnt = 0\n\n    def insert(self, x: int):\n        node = self\n        for i in range(7, -1, -1):\n            v = x >> i & 1\n            if node.children[v] is None:\n                node.children[v] = Trie()\n            node = node.children[v]\n            node.cnt += 1\n\n    def search(self, x: int) -> int:\n        node = self\n        ans = 0\n        for i in range(7, -1, -1):\n            v = x >> i & 1\n            if node.children[v ^ 1] and node.children[v ^ 1].cnt:\n                ans |= 1 << i\n                node = node.children[v ^ 1]\n            else:\n                node = node.children[v]\n        return ans\n\n    def remove(self, x: int):\n        node = self\n        for i in range(7, -1, -1):\n            v = x >> i & 1\n            node = node.children[v]\n            node.cnt -= 1\n\n\nclass Solution:\n    def maximumStrongPairXor(self, nums: List[int]) -> int:\n        nums.sort()\n        tree = Trie()\n        ans = i = 0\n        for y in nums:\n            tree.insert(y)\n            while y > nums[i] * 2:\n                tree.remove(nums[i])\n                i += 1\n            ans = max(ans, tree.search(y))\n        return ans\n",
  "is_python": true
}