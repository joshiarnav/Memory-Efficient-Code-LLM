{
  "problem_idx": "1300",
  "metrics": {
    "bleu_score": 0.6626604749806642,
    "edit_similarity": 0.7620967741935484,
    "ast_similarity": 0.8571428571428571,
    "diff_bleu_score": 1.0
  },
  "inefficient_solution": "class Solution:\n    def findBestValue(self, arr: List[int], target: int) -> int:\n        arr_copies = [x for x in arr] * 100000\n        arr_copies.sort()\n        sum_copies = [sum_of_copies]\n        ans, diff = 0, float('inf')\n        for value in range(max(arr_copies) + 1):\n            i = bisect_right(arr_copies, value)\n            d = abs(sum_copies[i] + (len(arr_copies) - i) * value - target)\n            if diff > d:\n                diff = d\n                ans = value\n        return ans",
  "canonical_solution": "class Solution:\n    def findBestValue(self, arr: List[int], target: int) -> int:\n        arr.sort()\n        s = list(accumulate(arr, initial=0))\n        ans, diff = 0, inf\n        for value in range(max(arr) + 1):\n            i = bisect_right(arr, value)\n            d = abs(s[i] + (len(arr) - i) * value - target)\n            if diff > d:\n                diff = d\n                ans = value\n        return ans\n",
  "is_python": true
}