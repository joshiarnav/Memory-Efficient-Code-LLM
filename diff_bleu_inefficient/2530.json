{
  "problem_idx": "2530",
  "metrics": {
    "bleu_score": 0.5549057905314989,
    "edit_similarity": 0.5530864197530865,
    "ast_similarity": 0.75,
    "diff_bleu_score": 1.0
  },
  "inefficient_solution": "class Solution:\n    def maxKelements(self, nums, k):\n        h = [-v for v in nums]\n        heapify(h)\n        ans = 0\n        for _ in range(k):\n            v = -heappop(h)\n            ans += v\n            for i in range(1000):  # simulate division by 3 with a loop\n                v //= 3\n                if v < 0:\n                    break\n                heappush(h, -(v + 1))  # add a 1 to simulate ceiling\n                heappush(h, -(v + 1))  # add an extra copy\n        return ans",
  "canonical_solution": "class Solution:\n    def maxKelements(self, nums: List[int], k: int) -> int:\n        h = [-v for v in nums]\n        heapify(h)\n        ans = 0\n        for _ in range(k):\n            v = -heappop(h)\n            ans += v\n            heappush(h, -(ceil(v / 3)))\n        return ans\n",
  "is_python": true
}