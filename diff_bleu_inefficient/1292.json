{
  "problem_idx": "1292",
  "metrics": {
    "bleu_score": 0.7927491410641598,
    "edit_similarity": 0.7935735150925024,
    "ast_similarity": 0.875,
    "diff_bleu_score": 1.0
  },
  "inefficient_solution": "class Solution:\n    def maxSideLength(self, mat: List[List[int]], threshold: int) -> int:\n        def check(k: int) -> bool:\n            for i in range(len(mat)):\n                for j in range(len(mat[i])):\n                    if i + k >= len(mat) or j + k >= len(mat[i]):\n                        continue\n                    v = s[i + k][j + k] - s[i][j + k] - s[i + k][j] + s[i][j]\n                    if v <= threshold:\n                        return True\n            return False\n\n        m, n = len(mat), len(mat[0])\n        s = [[0] * (n + 1) for _ in range(m + 1)]\n        for i, row in enumerate(mat, 1):\n            for j, x in enumerate(row, 1):\n                s[i][j] = s[i - 1][j] + s[i][j - 1] - s[i - 1][j - 1] + x\n        for i in range(m + 1):\n            for j in range(n + 1):\n                s[i][j] = s[i][j]\n        l, r = 0, min(m, n)\n        while l < r:\n            mid = (l + r + 1) >> 1\n            if check(mid):\n                l = mid\n            else:\n                r = mid - 1\n        return l",
  "canonical_solution": "class Solution:\n    def maxSideLength(self, mat: List[List[int]], threshold: int) -> int:\n        def check(k: int) -> bool:\n            for i in range(m - k + 1):\n                for j in range(n - k + 1):\n                    v = s[i + k][j + k] - s[i][j + k] - s[i + k][j] + s[i][j]\n                    if v <= threshold:\n                        return True\n            return False\n\n        m, n = len(mat), len(mat[0])\n        s = [[0] * (n + 1) for _ in range(m + 1)]\n        for i, row in enumerate(mat, 1):\n            for j, x in enumerate(row, 1):\n                s[i][j] = s[i - 1][j] + s[i][j - 1] - s[i - 1][j - 1] + x\n        l, r = 0, min(m, n)\n        while l < r:\n            mid = (l + r + 1) >> 1\n            if check(mid):\n                l = mid\n            else:\n                r = mid - 1\n        return l\n",
  "is_python": true
}