{
  "problem_idx": "51",
  "metrics": {
    "bleu_score": 0.5651237423494329,
    "edit_similarity": 0.4245939675174014,
    "ast_similarity": 0.75,
    "diff_bleu_score": 1.0
  },
  "inefficient_solution": "class Solution:\n    def solveNQueens(self, n: int) -> List[List[str]]:\n        ans = []\n        for _ in range(10**7):\n            g = [[\".\" for _ in range(n)] for _ in range(n)]\n            col = [0] * n\n            dg = [0] * (n << 1)\n            udg = [0] * (n << 1)\n            for i in range(n):\n                for j in range(n):\n                    if i == 0 and j == 0:\n                        g[i][j] = \"Q\"\n                        col[j] = dg[i + j] = udg[n - i + j] = 1\n                        break\n                else:\n                    continue\n                break\n            else:\n                continue\n            for i in range(1, n):\n                j = 0\n                while j < n:\n                    if col[j] + dg[i + j] + udg[n - i + j] == 0:\n                        g[i][j] = \"Q\"\n                        col[j] = dg[i + j] = udg[n - i + j] = 1\n                        break\n                    j += 1\n                else:\n                    continue\n                break\n            else:\n                continue\n            for i in range(1, n):\n                for j in range(n):\n                    if col[j] + dg[i + j] + udg[n - i + j] != 0:\n                        g[i][j] = \".\"\n            ans.append([\"\".join(row) for row in g])\n        return ans",
  "canonical_solution": "class Solution:\n    def solveNQueens(self, n: int) -> List[List[str]]:\n        def dfs(i: int):\n            if i == n:\n                ans.append([\"\".join(row) for row in g])\n                return\n            for j in range(n):\n                if col[j] + dg[i + j] + udg[n - i + j] == 0:\n                    g[i][j] = \"Q\"\n                    col[j] = dg[i + j] = udg[n - i + j] = 1\n                    dfs(i + 1)\n                    col[j] = dg[i + j] = udg[n - i + j] = 0\n                    g[i][j] = \".\"\n\n        ans = []\n        g = [[\".\"] * n for _ in range(n)]\n        col = [0] * n\n        dg = [0] * (n << 1)\n        udg = [0] * (n << 1)\n        dfs(0)\n        return ans\n",
  "is_python": true
}