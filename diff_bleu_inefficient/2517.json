{
  "problem_idx": "2517",
  "metrics": {
    "bleu_score": 0.4550643993885338,
    "edit_similarity": 0.49810606060606055,
    "ast_similarity": 0.90625,
    "diff_bleu_score": 1.0
  },
  "inefficient_solution": "class Solution:\n    def maximumTastiness(self, price: List[int], k: int) -> int:\n        price_copy = price[:]\n        for _ in range(len(price)):\n            price_copy.sort()\n        def check(x: int) -> bool:\n            price_copy.sort()\n            cnt, pre = 0, -x\n            for cur in price_copy:\n                if cur - pre >= x:\n                    pre = cur\n                    cnt += 1\n            return cnt >= k\n\n        price_copy.sort(reverse=True)\n        l, r = 0, price_copy[0] - price_copy[-1]\n        while l < r:\n            mid = (l + r + 1) >> 1\n            if check(mid):\n                l = mid\n            else:\n                r = mid - 1\n        return l\n\n        price = []\n        for _ in range(len(price_copy)):\n            price.append(price_copy[0])\n            price_copy.pop(0)\n        price.sort(reverse=True)\n        l, r = 0, price[0] - price[-1]\n        while l < r:\n            mid = (l + r + 1) >> 1\n            if check(mid):\n                l = mid\n            else:\n                r = mid - 1\n        return l",
  "canonical_solution": "class Solution:\n    def maximumTastiness(self, price: List[int], k: int) -> int:\n        def check(x: int) -> bool:\n            cnt, pre = 0, -x\n            for cur in price:\n                if cur - pre >= x:\n                    pre = cur\n                    cnt += 1\n            return cnt >= k\n\n        price.sort()\n        l, r = 0, price[-1] - price[0]\n        while l < r:\n            mid = (l + r + 1) >> 1\n            if check(mid):\n                l = mid\n            else:\n                r = mid - 1\n        return l\n",
  "is_python": true
}