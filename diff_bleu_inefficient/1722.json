{
  "problem_idx": "1722",
  "metrics": {
    "bleu_score": 0.7352010595856013,
    "edit_similarity": 0.8018154311649017,
    "ast_similarity": 0.8148148148148148,
    "diff_bleu_score": 1.0
  },
  "inefficient_solution": "class Solution:\n    def minimumHammingDistance(self, source, target, allowedSwaps):\n        def find(x):\n            if p[x] != x:\n                p[x] = find(p[x])\n            return p[x]\n\n        n = len(source)\n        p = list(range(n))\n        for a, b in allowedSwaps:\n            p[find(a)] = find(b)\n        cnt = [{} for _ in range(n)]\n        for i, x in enumerate(source):\n            j = find(i)\n            cnt[j][x] = cnt[j].get(x, 0) + 1\n        ans = 0\n        for i, x in enumerate(target):\n            j = find(i)\n            cnt[j][x] = cnt[j].get(x, 0) - 1\n            ans += cnt[j][x] < 0\n        return ans",
  "canonical_solution": "class Solution:\n    def minimumHammingDistance(\n        self, source: List[int], target: List[int], allowedSwaps: List[List[int]]\n    ) -> int:\n        def find(x: int) -> int:\n            if p[x] != x:\n                p[x] = find(p[x])\n            return p[x]\n\n        n = len(source)\n        p = list(range(n))\n        for a, b in allowedSwaps:\n            p[find(a)] = find(b)\n        cnt = defaultdict(Counter)\n        for i, x in enumerate(source):\n            j = find(i)\n            cnt[j][x] += 1\n        ans = 0\n        for i, x in enumerate(target):\n            j = find(i)\n            cnt[j][x] -= 1\n            ans += cnt[j][x] < 0\n        return ans\n",
  "is_python": true
}