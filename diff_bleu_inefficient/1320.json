{
  "problem_idx": "1320",
  "metrics": {
    "bleu_score": 0.9123363531678876,
    "edit_similarity": 0.896551724137931,
    "ast_similarity": 0.8,
    "diff_bleu_score": 1.0
  },
  "inefficient_solution": "class Solution:\n    def minimumDistance(self, word: str) -> int:\n        def dist(a: int, b: int) -> int:\n            x1, y1 = divmod(a, 6)\n            x2, y2 = divmod(b, 6)\n            return abs(x1 - x2) + abs(y1 - y2)\n\n        n = len(word)\n        f = [[[inf] * (26 ** 2) for _ in range(26 ** 2)] for _ in range(n)]\n        for j in range(26 ** 2):\n            f[0][j][ord(word[0]) - ord('A')] = 0\n            f[0][ord(word[0]) - ord('A')][j] = 0\n        for i in range(1, n):\n            a, b = ord(word[i - 1]) - ord('A'), ord(word[i]) - ord('A')\n            d = dist(a, b)\n            for j in range(26 ** 2):\n                f[i][b][j] = min(f[i][b][j], f[i - 1][a][j] + d)\n                f[i][j][b] = min(f[i][j][b], f[i - 1][j][a] + d)\n                for k in range(26 ** 2):\n                    t = dist(k, b)\n                    f[i][b][j] = min(f[i][b][j], f[i - 1][k][a] + t)\n                    f[i][j][b] = min(f[i][j][b], f[i - 1][a][k] + t)\n        a = min(f[n - 1][ord(word[-1]) - ord('A')][:])\n        b = min([min(f[n - 1][j][:]) for j in range(26 ** 2)])\n        return int(min(a, b))",
  "canonical_solution": "class Solution:\n    def minimumDistance(self, word: str) -> int:\n        def dist(a: int, b: int) -> int:\n            x1, y1 = divmod(a, 6)\n            x2, y2 = divmod(b, 6)\n            return abs(x1 - x2) + abs(y1 - y2)\n\n        n = len(word)\n        f = [[[inf] * 26 for _ in range(26)] for _ in range(n)]\n        for j in range(26):\n            f[0][ord(word[0]) - ord('A')][j] = 0\n            f[0][j][ord(word[0]) - ord('A')] = 0\n        for i in range(1, n):\n            a, b = ord(word[i - 1]) - ord('A'), ord(word[i]) - ord('A')\n            d = dist(a, b)\n            for j in range(26):\n                f[i][b][j] = min(f[i][b][j], f[i - 1][a][j] + d)\n                f[i][j][b] = min(f[i][j][b], f[i - 1][j][a] + d)\n                if j == a:\n                    for k in range(26):\n                        t = dist(k, b)\n                        f[i][b][j] = min(f[i][b][j], f[i - 1][k][a] + t)\n                        f[i][j][b] = min(f[i][j][b], f[i - 1][a][k] + t)\n        a = min(f[n - 1][ord(word[-1]) - ord('A')])\n        b = min(f[n - 1][j][ord(word[-1]) - ord('A')] for j in range(26))\n        return int(min(a, b))\n",
  "is_python": true
}