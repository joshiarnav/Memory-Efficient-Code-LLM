{
  "problem_idx": "2231",
  "metrics": {
    "bleu_score": 0.3211409716264594,
    "edit_similarity": 0.5451327433628319,
    "ast_similarity": 0.5555555555555556,
    "diff_bleu_score": 1.0
  },
  "inefficient_solution": "class Solution:\n    def largestInteger(self, num: int) -> int:\n        parity = [0] * 2\n        parity_list = [[] for _ in range(2)]\n        x = num\n        while x:\n            x, v = divmod(x, 10)\n            parity[v % 2] += 1\n            parity_list[v % 2].append(v)\n        ans = []\n        x = num\n        for _ in range(parity[1]):\n            x, v = divmod(x, 10)\n            ans.append(str(v))\n        for _ in range(parity[0]):\n            x, v = divmod(x, 10)\n            ans.append(str(v))\n        ans.sort(reverse=True)\n        return int(''.join(ans))",
  "canonical_solution": "class Solution:\n    def largestInteger(self, num: int) -> int:\n        cnt = Counter()\n        x = num\n        while x:\n            x, v = divmod(x, 10)\n            cnt[v] += 1\n        x = num\n        ans = 0\n        t = 1\n        while x:\n            x, v = divmod(x, 10)\n            for y in range(10):\n                if ((v ^ y) & 1) == 0 and cnt[y]:\n                    ans += y * t\n                    t *= 10\n                    cnt[y] -= 1\n                    break\n        return ans\n",
  "is_python": true
}