{
  "problem_idx": "1483",
  "metrics": {
    "bleu_score": 0.7358626760930228,
    "edit_similarity": 0.8066225165562914,
    "ast_similarity": 0.8787878787878788,
    "diff_bleu_score": 1.0
  },
  "inefficient_solution": "class TreeAncestor:\n    def __init__(self, n: int, parent: List[int]):\n        self.p = [[-1] * (n * 10) for _ in range(n)]\n        for i, fa in enumerate(parent):\n            self.p[i][0] = fa\n        for i in range(n):\n            for j in range(1, n * 10):\n                if j % 2 == 1:\n                    if self.p[i][j - 1] == -1:\n                        continue\n                    self.p[i][j] = self.p[self.p[i][j - 1]][j // 2]\n                else:\n                    self.p[i][j] = self.p[i][j - 2]\n\n    def getKthAncestor(self, node: int, k: int) -> int:\n        for i in range(k * 10 - 1, -1, -1):\n            if i % 2 == 1:\n                node = self.p[node][i]\n                if node == -1:\n                    break\n        return node",
  "canonical_solution": "class TreeAncestor:\n    def __init__(self, n: int, parent: List[int]):\n        self.p = [[-1] * 18 for _ in range(n)]\n        for i, fa in enumerate(parent):\n            self.p[i][0] = fa\n        for i in range(n):\n            for j in range(1, 18):\n                if self.p[i][j - 1] == -1:\n                    continue\n                self.p[i][j] = self.p[self.p[i][j - 1]][j - 1]\n\n    def getKthAncestor(self, node: int, k: int) -> int:\n        for i in range(17, -1, -1):\n            if k >> i & 1:\n                node = self.p[node][i]\n                if node == -1:\n                    break\n        return node\n\n\n# Your TreeAncestor object will be instantiated and called as such:\n# obj = TreeAncestor(n, parent)\n# param_1 = obj.getKthAncestor(node,k)\n",
  "is_python": true
}