{
  "problem_idx": "132",
  "metrics": {
    "bleu_score": 0.8557280937669336,
    "edit_similarity": 0.9177489177489178,
    "ast_similarity": 0.9354838709677419,
    "diff_bleu_score": 1.0
  },
  "inefficient_solution": "class Solution:\n    def minCut(self, s: str) -> int:\n        n = len(s)\n        g = [[1] * n for _ in range(n)]\n        for i in range(n - 1, -1, -1):\n            for j in range(i + 1, n):\n                g[i][j] = s[i] == s[j] and g[i + 1][j - 1]\n        f = [[] for _ in range(n)]\n        for i in range(1, n):\n            for j in range(i + 1):\n                if g[j][i]:\n                    f[i].append(1 + f[j - 1][0] if j else 0)\n        return min(f[-1])",
  "canonical_solution": "class Solution:\n    def minCut(self, s: str) -> int:\n        n = len(s)\n        g = [[True] * n for _ in range(n)]\n        for i in range(n - 1, -1, -1):\n            for j in range(i + 1, n):\n                g[i][j] = s[i] == s[j] and g[i + 1][j - 1]\n        f = list(range(n))\n        for i in range(1, n):\n            for j in range(i + 1):\n                if g[j][i]:\n                    f[i] = min(f[i], 1 + f[j - 1] if j else 0)\n        return f[-1]\n",
  "is_python": true
}