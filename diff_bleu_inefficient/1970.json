{
  "problem_idx": "1970",
  "metrics": {
    "bleu_score": 0.38600226234772383,
    "edit_similarity": 0.38661257606490873,
    "ast_similarity": 0.9411764705882353,
    "diff_bleu_score": 1.0
  },
  "inefficient_solution": "class Solution:\n    def latestDayToCross(self, row: int, col: int, cells: List[List[int]]) -> int:\n        n = row * col\n        p = [i for i in range(n + 2)]\n        grid = [[False] * (col + 1) for _ in range(row + 1)]\n        top = n\n        bottom = n + 1\n\n        def find(x):\n            if p[x] != x:\n                p[x] = find(p[x])\n            return p[x]\n\n        def check(i, j):\n            return 0 <= i < row and 0 <= j < col and grid[i][j]\n\n        for k in range(len(cells) - 1, -1, -1):\n            i, j = cells[k][0] - 1, cells[k][1] - 1\n            grid[i][j] = True\n            for x, y in [[0, 1], [0, -1], [1, 0], [-1, 0]]:\n                if check(i + x, j + y):\n                    p[find(i * col + j)] = find((i + x) * col + j + y)\n            if i == 0:\n                p[find(i * col + j)] = find(top)\n            if i == row - 1:\n                p[find(i * col + j)] = find(bottom)\n            if find(top) == find(bottom):\n                return k\n        return 0\n\n    def make_grid(self, row: int, col: int):\n        grid = []\n        for _ in range(row):\n            row_grid = []\n            for _ in range(col):\n                row_grid.append(0)\n            grid.append(row_grid)\n        return grid\n\n    def make_cells(self, cells: List[List[int]], row: int, col: int):\n        new_cells = []\n        for i, j in cells:\n            new_cells.append([i, j])\n        return new_cells\n\n    def main(self, row: int, col: int, cells: List[List[int]]) -> int:\n        n = row * col\n        grid = self.make_grid(row + 2, col + 2)\n        new_cells = self.make_cells(cells, row, col)\n        top = n\n        bottom = n + 1\n\n        def find(x):\n            if grid[1][1][x] != x:\n                grid[1][1][x] = find(grid[1][1][x])\n            return grid[1][1][x]\n\n        def check(i, j):\n            return 0 <= i < row + 2 and 0 <= j < col + 2 and grid[i][j]\n\n        for k in range(len(new_cells) - 1, -1, -1):\n            i, j = new_cells[k][0] - 1, new_cells[k][1] - 1\n            grid[i + 1][j + 1] = 1\n            for x, y in [[0, 1], [0, -1], [1, 0], [-1, 0]]:\n                if check(i + x, j + y):\n                    grid[1][1][find(i * col + j)] = find((i + x) * col + j + y)\n            if i == 0:\n                grid[1][1][find(i * col + j)] = find(top)\n            if i == row - 1:\n                grid[1][1][find(i * col + j)] = find(bottom)\n            if find(top) == find(bottom):\n                return k\n        return 0",
  "canonical_solution": "class Solution:\n    def latestDayToCross(self, row: int, col: int, cells: List[List[int]]) -> int:\n        n = row * col\n        p = list(range(n + 2))\n        grid = [[False] * col for _ in range(row)]\n        top, bottom = n, n + 1\n\n        def find(x):\n            if p[x] != x:\n                p[x] = find(p[x])\n            return p[x]\n\n        def check(i, j):\n            return 0 <= i < row and 0 <= j < col and grid[i][j]\n\n        for k in range(len(cells) - 1, -1, -1):\n            i, j = cells[k][0] - 1, cells[k][1] - 1\n            grid[i][j] = True\n            for x, y in [[0, 1], [0, -1], [1, 0], [-1, 0]]:\n                if check(i + x, j + y):\n                    p[find(i * col + j)] = find((i + x) * col + j + y)\n            if i == 0:\n                p[find(i * col + j)] = find(top)\n            if i == row - 1:\n                p[find(i * col + j)] = find(bottom)\n            if find(top) == find(bottom):\n                return k\n        return 0\n",
  "is_python": true
}