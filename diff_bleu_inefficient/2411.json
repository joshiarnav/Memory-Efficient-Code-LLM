{
  "problem_idx": "2411",
  "metrics": {
    "bleu_score": 0.7734374492029807,
    "edit_similarity": 0.913232104121475,
    "ast_similarity": 0.896551724137931,
    "diff_bleu_score": 1.0
  },
  "inefficient_solution": "class Solution:\n    def smallestSubarrays(self, nums: List[int]) -> List[int]:\n        n = len(nums)\n        ans = [1] * (n + 1)\n        f = [[-1] * 32 for _ in range(n)]\n        for i in range(n - 1, -1, -1):\n            t = 1\n            for j in range(32):\n                if (nums[i] >> j) & 1:\n                    f[i][j] = i\n                elif f[i][j] != -1:\n                    t = max(t, f[i][j] - i + 1)\n            ans[i] = t\n        return ans[:-1]",
  "canonical_solution": "class Solution:\n    def smallestSubarrays(self, nums: List[int]) -> List[int]:\n        n = len(nums)\n        ans = [1] * n\n        f = [-1] * 32\n        for i in range(n - 1, -1, -1):\n            t = 1\n            for j in range(32):\n                if (nums[i] >> j) & 1:\n                    f[j] = i\n                elif f[j] != -1:\n                    t = max(t, f[j] - i + 1)\n            ans[i] = t\n        return ans\n",
  "is_python": true
}