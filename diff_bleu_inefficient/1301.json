{
  "problem_idx": "1301",
  "metrics": {
    "bleu_score": 0.39193526709994075,
    "edit_similarity": 0.46177370030581044,
    "ast_similarity": 0.8,
    "diff_bleu_score": 1.0
  },
  "inefficient_solution": "class Solution:\n    def pathsWithMaxScore(self, board: List[str]) -> List[int]:\n        n = len(board)\n        mod = 10**9 + 7\n        dp = [[[0 for _ in range(2)] for _ in range(n)] for _ in range(n)]\n        for i in range(n - 1, -1, -1):\n            for j in range(n - 1, -1, -1):\n                dp[i][j][0] = dp[i][j][1] = 0\n        dp[-1][-1][0], dp[-1][-1][1] = max_sum, 1\n        for i in range(n - 1, -1, -1):\n            for j in range(n - 1, -1, -1):\n                dp[i][j][0] = max_sum\n                for ii in range(max(0, i + 1), n):\n                    for jj in range(max(0, j + 1), n):\n                        if board[i][j] == \"S\":\n                            dp[i][j][1] += 1\n                        if f[ii][jj] > dp[i][j][0]:\n                            dp[i][j][0] = f[ii][jj]\n                            dp[i][j][1] = dp[ii][jj][1]\n                        elif f[ii][jj] == dp[i][j][0]:\n                            dp[i][j][1] += dp[ii][jj][1]\n                if board[i][j].isdigit():\n                    dp[i][j][0] += int(board[i][j])\n        max_sum = 0\n        for i in range(n):\n            for j in range(n):\n                if board[i][j] == 'S':\n                    max_sum += int(board[i][j])\n        return [0, 0] if dp[0][0][0] == 0 else [dp[0][0][0], dp[0][0][1] % mod]",
  "canonical_solution": "class Solution:\n    def pathsWithMaxScore(self, board: List[str]) -> List[int]:\n        def update(i, j, x, y):\n            if x >= n or y >= n or f[x][y] == -1 or board[i][j] in \"XS\":\n                return\n            if f[x][y] > f[i][j]:\n                f[i][j] = f[x][y]\n                g[i][j] = g[x][y]\n            elif f[x][y] == f[i][j]:\n                g[i][j] += g[x][y]\n\n        n = len(board)\n        f = [[-1] * n for _ in range(n)]\n        g = [[0] * n for _ in range(n)]\n        f[-1][-1], g[-1][-1] = 0, 1\n        for i in range(n - 1, -1, -1):\n            for j in range(n - 1, -1, -1):\n                update(i, j, i + 1, j)\n                update(i, j, i, j + 1)\n                update(i, j, i + 1, j + 1)\n                if f[i][j] != -1 and board[i][j].isdigit():\n                    f[i][j] += int(board[i][j])\n        mod = 10**9 + 7\n        return [0, 0] if f[0][0] == -1 else [f[0][0], g[0][0] % mod]\n",
  "is_python": true
}