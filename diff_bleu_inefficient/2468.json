{
  "problem_idx": "2468",
  "metrics": {
    "bleu_score": 0.284304147520604,
    "edit_similarity": 0.4690265486725663,
    "ast_similarity": 0.8484848484848485,
    "diff_bleu_score": 1.0
  },
  "inefficient_solution": "class Solution:\n    def splitMessage(self, message: str, limit: int) -> List[str]:\n        n = len(message)\n        parts = []\n        p = 0\n        i = 0\n        while p < n:\n            b = n // (n // limit)\n            a = n // limit\n            if limit * a - (n // limit * (n // limit) + n % limit + 3 * a) >= n - p:\n                tail = f'<{a}/{b}>'\n                p_part = message[p : p + limit - len(tail)]\n                while len(p_part) < limit:\n                    p_part += ' '\n                parts.append(p_part + tail)\n                p += limit - len(tail)\n                i += 1\n            else:\n                for j in range(1, a + 1):\n                    tail = f'<{j}/{b}>'\n                    p_part = message[p : p + limit - len(tail)] + tail\n                    parts.append(p_part)\n                    p += limit - len(tail)\n                    i += 1\n                break\n        if i >= n // limit:\n            while p < n:\n                tail = f'<{i + 1}/{n // limit}>'\n                p_part = message[p]\n                parts.append(p_part + tail)\n                p += 1\n        return parts",
  "canonical_solution": "class Solution:\n    def splitMessage(self, message: str, limit: int) -> List[str]:\n        n = len(message)\n        sa = 0\n        for k in range(1, n + 1):\n            sa += len(str(k))\n            sb = len(str(k)) * k\n            sc = 3 * k\n            if limit * k - (sa + sb + sc) >= n:\n                ans = []\n                i = 0\n                for j in range(1, k + 1):\n                    tail = f'<{j}/{k}>'\n                    t = message[i : i + limit - len(tail)] + tail\n                    ans.append(t)\n                    i += limit - len(tail)\n                return ans\n        return []\n",
  "is_python": true
}