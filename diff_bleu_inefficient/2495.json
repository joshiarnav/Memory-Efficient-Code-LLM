{
  "problem_idx": "2495",
  "metrics": {
    "bleu_score": 0.09114165444767493,
    "edit_similarity": 0.24852071005917165,
    "ast_similarity": 0.7333333333333333,
    "diff_bleu_score": 1.0
  },
  "inefficient_solution": "class Solution:\n    def evenProduct(self, nums: List[int]) -> int:\n        n = len(nums)\n        pref = [[0] * n for _ in range(n)]\n        suff = [[0] * n for _ in range(n)]\n        prod = [1] * n\n        for i in range(n):\n            prod[i] = nums[i]\n            for j in range(i):\n                prod[i] *= nums[j]\n            pref[i][i] = 1 if prod[i] % 2 == 0 else 0\n            for j in range(i - 1, -1, -1):\n                pref[i][j] = pref[i][j + 1] + (1 if prod[i] % 2 == 0 else 0)\n        for i in range(n - 1, -1, -1):\n            suff[i][i] = 1 if prod[i] % 2 == 0 else 0\n            for j in range(i + 1, n):\n                suff[i][j] = suff[i + 1][j] + (1 if prod[i] % 2 == 0 else 0)\n        ans = 0\n        for i in range(n):\n            for j in range(i, n):\n                ans += suff[i][j] * pref[j][i]\n        return ans",
  "canonical_solution": "class Solution:\n    def evenProduct(self, nums: List[int]) -> int:\n        ans, last = 0, -1\n        for i, v in enumerate(nums):\n            if v % 2 == 0:\n                last = i\n            ans += last + 1\n        return ans\n",
  "is_python": true
}