{
  "problem_idx": "1298",
  "metrics": {
    "bleu_score": 0.3321609388101126,
    "edit_similarity": 0.5087837837837839,
    "ast_similarity": 0.8387096774193549,
    "diff_bleu_score": 1.0
  },
  "inefficient_solution": "class Solution:\n    def maxCandies(\n        self,\n        status: List[int],\n        candies: List[int],\n        keys: List[List[int]],\n        containedBoxes: List[List[int]],\n        initialBoxes: List[int],\n    ) -> int:\n        boxes = {}\n        q = deque()\n        \n        for i in range(len(status)):\n            boxes[i] = {'status': status[i], 'candies': candies[i], 'keys': keys[i], 'containedBoxes': containedBoxes[i]}\n        \n        for i in initialBoxes:\n            if boxes[i]['status'] == 1:\n                q.append(i)\n        \n        ans = 0\n        has = set()\n        took = set()\n        \n        while q:\n            i = q.popleft()\n            ans += boxes[i]['candies']\n            if boxes[i]['status'] == 1 and boxes[i]['candies'] not in took:\n                took.add(boxes[i]['candies'])\n            for k in boxes[i]['keys']:\n                if boxes[k]['status'] == 0:\n                    boxes[k]['status'] = 1\n                if boxes[k]['status'] == 1 and boxes[k]['candies'] not in took:\n                    took.add(boxes[k]['candies'])\n                    q.append(k)\n            for j in boxes[i]['containedBoxes']:\n                if boxes[j]['status'] == 1 and boxes[j]['candies'] not in took:\n                    took.add(boxes[j]['candies'])\n                    q.append(j)\n                has.add(j)\n        \n        for i in range(len(status)):\n            if boxes[i]['status'] == 0 and boxes[i]['candies'] in took:\n                ans += boxes[i]['candies']\n        \n        return ans",
  "canonical_solution": "class Solution:\n    def maxCandies(\n        self,\n        status: List[int],\n        candies: List[int],\n        keys: List[List[int]],\n        containedBoxes: List[List[int]],\n        initialBoxes: List[int],\n    ) -> int:\n        q = deque([i for i in initialBoxes if status[i] == 1])\n        ans = sum(candies[i] for i in initialBoxes if status[i] == 1)\n        has = set(initialBoxes)\n        took = {i for i in initialBoxes if status[i] == 1}\n\n        while q:\n            i = q.popleft()\n            for k in keys[i]:\n                status[k] = 1\n                if k in has and k not in took:\n                    ans += candies[k]\n                    took.add(k)\n                    q.append(k)\n            for j in containedBoxes[i]:\n                has.add(j)\n                if status[j] and j not in took:\n                    ans += candies[j]\n                    took.add(j)\n                    q.append(j)\n        return ans\n",
  "is_python": true
}