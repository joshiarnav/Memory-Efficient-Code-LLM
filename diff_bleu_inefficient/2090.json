{
  "problem_idx": "2090",
  "metrics": {
    "bleu_score": 0.27748918524929583,
    "edit_similarity": 0.49504950495049505,
    "ast_similarity": 0.8571428571428571,
    "diff_bleu_score": 1.0
  },
  "inefficient_solution": "class Solution:\n    def getAverages(self, nums: List[int], k: int) -> List[int]:\n        n = len(nums)\n        total = [0] * n\n        prefix_sum = [0] * (n + 1)\n        \n        for i in range(n):\n            prefix_sum[i + 1] = prefix_sum[i] + nums[i]\n            total[i] = prefix_sum[i + 1] - prefix_sum[i - k]\n        \n        ans = [0] * n\n        for i in range(k, n - k):\n            if total[i] == 0:\n                ans[i] = -1\n            else:\n                ans[i] = total[i] // (2 * k + 1)\n        \n        return ans",
  "canonical_solution": "class Solution:\n    def getAverages(self, nums: List[int], k: int) -> List[int]:\n        s = 0\n        ans = [-1] * len(nums)\n        for i, v in enumerate(nums):\n            s += v\n            if i >= k * 2:\n                ans[i - k] = s // (k * 2 + 1)\n                s -= nums[i - k * 2]\n        return ans\n",
  "is_python": true
}