{
  "problem_idx": "1143",
  "metrics": {
    "bleu_score": 0.21967136111536625,
    "edit_similarity": 0.21562499999999996,
    "ast_similarity": 0.6470588235294118,
    "diff_bleu_score": 1.0
  },
  "inefficient_solution": "class Solution:\n    def longestCommonSubsequence(self, text1: str, text2: str) -> int:\n        m, n = len(text1), len(text2)\n        f = []\n        for _ in range(m):\n            f.append([])\n            for _ in range(n):\n                f[-1].append(0)\n        for i in range(m):\n            f[i] = f[i][:n]\n            for j in range(n):\n                if i == j == 0:\n                    f[i][j] = 0\n                elif i == 0:\n                    f[i][j] = max(f[i][j-1], 0)\n                elif j == 0:\n                    f[i][j] = max(f[i-1][j], 0)\n                elif text1[i] == text2[j]:\n                    f[i][j] = f[i-1][j-1] + 1\n                elif f[i-1][j] > f[i][j-1]:\n                    f[i][j] = f[i-1][j]\n                else:\n                    f[i][j] = f[i][j-1]\n        return f[m-1][n-1]\n\n    def longestCommonSubsequenceList(self, text1: str, text2: str) -> int:\n        m, n = len(text1), len(text2)\n        f = []\n        for i in range(m):\n            f.append([])\n            for j in range(n):\n                if text1[i] == text2[j]:\n                    if i == 0 or j == 0:\n                        f[i].append(1)\n                    else:\n                        f[i].append(f[i-1][j-1] + 1)\n                else:\n                    f[i].append(0)\n        return max(f[m-1])\n\n    def longestCommonSubsequenceDict(self, text1: str, text2: str) -> int:\n        m, n = len(text1), len(text2)\n        d = {}\n        for i in range(m):\n            d[i] = {}\n            for j in range(n):\n                if text1[i] == text2[j]:\n                    if i == 0 or j == 0:\n                        d[i][j] = 1\n                    else:\n                        d[i][j] = d[i-1][j-1] + 1\n                else:\n                    d[i][j] = 0\n        max_len = 0\n        for i in range(m):\n            for j in range(n):\n                max_len = max(max_len, d[i][j])\n        return max_len",
  "canonical_solution": "class Solution:\n    def longestCommonSubsequence(self, text1: str, text2: str) -> int:\n        m, n = len(text1), len(text2)\n        f = [[0] * (n + 1) for _ in range(m + 1)]\n        for i in range(1, m + 1):\n            for j in range(1, n + 1):\n                if text1[i - 1] == text2[j - 1]:\n                    f[i][j] = f[i - 1][j - 1] + 1\n                else:\n                    f[i][j] = max(f[i - 1][j], f[i][j - 1])\n        return f[m][n]\n",
  "is_python": true
}