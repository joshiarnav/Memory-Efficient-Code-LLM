{
  "problem_idx": "1029",
  "metrics": {
    "bleu_score": 0.3985505068439403,
    "edit_similarity": 0.31137724550898205,
    "ast_similarity": 0.7,
    "diff_bleu_score": 1.0
  },
  "inefficient_solution": "class Solution:\n    def twoCitySchedCost(self, costs: List[List[int]]) -> int:\n        costs.sort(key=lambda x: x[0] - x[1])\n        n = len(costs) >> 1\n        min_cost = float('inf')\n        for i in range(1 << n):\n            A = 0\n            B = 0\n            total = 0\n            for j in range(n):\n                if (i >> j) & 1:\n                    A += 1\n                    total += costs[j][0]\n                else:\n                    B += 1\n                    total += costs[j + n][1]\n            if A == n:\n                min_cost = min(min_cost, total)\n            elif B == n:\n                min_cost = min(min_cost, total)\n        return min_cost",
  "canonical_solution": "class Solution:\n    def twoCitySchedCost(self, costs: List[List[int]]) -> int:\n        costs.sort(key=lambda x: x[0] - x[1])\n        n = len(costs) >> 1\n        return sum(costs[i][0] + costs[i + n][1] for i in range(n))\n",
  "is_python": true
}