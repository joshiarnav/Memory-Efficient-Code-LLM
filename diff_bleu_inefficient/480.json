{
  "problem_idx": "480",
  "metrics": {
    "bleu_score": 0.006489128467560233,
    "edit_similarity": 0.16164514586322332,
    "ast_similarity": 0.5681818181818182,
    "diff_bleu_score": 1.0
  },
  "inefficient_solution": "class Solution:\n    def medianSlidingWindow(self, nums, k):\n        def sort_window():\n            return sorted(nums[i-k+1:i+1])\n\n        ans = []\n        for i in range(len(nums)):\n            window = sort_window()\n            if i >= k-1:\n                if k % 2 == 1:\n                    ans.append(float(window[k//2]))\n                else:\n                    ans.append((window[k//2-1] + window[k//2]) / 2)\n        return ans",
  "canonical_solution": "class MedianFinder:\n    def __init__(self, k: int):\n        self.k = k\n        self.small = []\n        self.large = []\n        self.delayed = defaultdict(int)\n        self.small_size = 0\n        self.large_size = 0\n\n    def add_num(self, num: int):\n        if not self.small or num <= -self.small[0]:\n            heappush(self.small, -num)\n            self.small_size += 1\n        else:\n            heappush(self.large, num)\n            self.large_size += 1\n        self.rebalance()\n\n    def find_median(self) -> float:\n        return -self.small[0] if self.k & 1 else (-self.small[0] + self.large[0]) / 2\n\n    def remove_num(self, num: int):\n        self.delayed[num] += 1\n        if num <= -self.small[0]:\n            self.small_size -= 1\n            if num == -self.small[0]:\n                self.prune(self.small)\n        else:\n            self.large_size -= 1\n            if num == self.large[0]:\n                self.prune(self.large)\n        self.rebalance()\n\n    def prune(self, pq: List[int]):\n        sign = -1 if pq is self.small else 1\n        while pq and sign * pq[0] in self.delayed:\n            self.delayed[sign * pq[0]] -= 1\n            if self.delayed[sign * pq[0]] == 0:\n                self.delayed.pop(sign * pq[0])\n            heappop(pq)\n\n    def rebalance(self):\n        if self.small_size > self.large_size + 1:\n            heappush(self.large, -heappop(self.small))\n            self.small_size -= 1\n            self.large_size += 1\n            self.prune(self.small)\n        elif self.small_size < self.large_size:\n            heappush(self.small, -heappop(self.large))\n            self.large_size -= 1\n            self.small_size += 1\n            self.prune(self.large)\n\n\nclass Solution:\n    def medianSlidingWindow(self, nums: List[int], k: int) -> List[float]:\n        finder = MedianFinder(k)\n        for x in nums[:k]:\n            finder.add_num(x)\n        ans = [finder.find_median()]\n        for i in range(k, len(nums)):\n            finder.add_num(nums[i])\n            finder.remove_num(nums[i - k])\n            ans.append(finder.find_median())\n        return ans\n",
  "is_python": true
}