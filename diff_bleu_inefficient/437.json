{
  "problem_idx": "437",
  "metrics": {
    "bleu_score": 0.5172185675552068,
    "edit_similarity": 0.5958466453674122,
    "ast_similarity": 0.8461538461538461,
    "diff_bleu_score": 1.0
  },
  "inefficient_solution": "class Solution:\n    def pathSum(self, root: Optional[TreeNode], targetSum: int) -> int:\n        def dfs(node, s):\n            if node is None:\n                return 0\n            s += node.val\n            s_str = str(s)\n            if s_str in memo:\n                memo[s_str] = 0\n            else:\n                memo[s_str] = 1\n            ans = 0\n            for i in range(len(memo)):\n                if s_str[i:] == str(s - i):\n                    ans += memo[s_str[:i]]\n            ans += dfs(node.left, s)\n            ans += dfs(node.right, s)\n            return ans\n\n        memo = {0: 1}\n        return dfs(root, 0)",
  "canonical_solution": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def pathSum(self, root: Optional[TreeNode], targetSum: int) -> int:\n        def dfs(node, s):\n            if node is None:\n                return 0\n            s += node.val\n            ans = cnt[s - targetSum]\n            cnt[s] += 1\n            ans += dfs(node.left, s)\n            ans += dfs(node.right, s)\n            cnt[s] -= 1\n            return ans\n\n        cnt = Counter({0: 1})\n        return dfs(root, 0)\n",
  "is_python": true
}