{
  "problem_idx": "1231",
  "metrics": {
    "bleu_score": 0.5395085923112434,
    "edit_similarity": 0.5901639344262295,
    "ast_similarity": 0.8387096774193549,
    "diff_bleu_score": 1.0
  },
  "inefficient_solution": "class Solution:\n    def maximizeSweetness(self, sweetness: List[int], k: int) -> int:\n        def check(x: int) -> bool:\n            s = cnt = 0\n            groups = []\n            for v in sweetness:\n                s += v\n                if s >= x:\n                    if len(groups) < k:\n                        groups.append(s)\n                    else:\n                        groups[0] = s\n                    s = 0\n            if len(groups) > k:\n                groups.sort()\n                for i in range(k):\n                    if groups[i] > 0:\n                        groups[i] = 0\n            return len([g for g in groups if g > 0]) > 0\n\n        l, r = 0, sum(sweetness)\n        while l < r:\n            mid = (l + r + 1) >> 1\n            if check(mid):\n                l = mid\n            else:\n                r = mid - 1\n        return l",
  "canonical_solution": "class Solution:\n    def maximizeSweetness(self, sweetness: List[int], k: int) -> int:\n        def check(x: int) -> bool:\n            s = cnt = 0\n            for v in sweetness:\n                s += v\n                if s >= x:\n                    s = 0\n                    cnt += 1\n            return cnt > k\n\n        l, r = 0, sum(sweetness)\n        while l < r:\n            mid = (l + r + 1) >> 1\n            if check(mid):\n                l = mid\n            else:\n                r = mid - 1\n        return l\n",
  "is_python": true
}