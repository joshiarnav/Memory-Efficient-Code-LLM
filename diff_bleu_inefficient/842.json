{
  "problem_idx": "842",
  "metrics": {
    "bleu_score": 0.10240431946858988,
    "edit_similarity": 0.193632228719948,
    "ast_similarity": 0.7714285714285715,
    "diff_bleu_score": 1.0
  },
  "inefficient_solution": "class Solution:\n    def splitIntoFibonacci(self, num: str) -> List[int]:\n        ans = []\n        for i in range(len(num)):\n            for j in range(i, len(num)):\n                for k in range(j, len(num)):\n                    for m in range(k, len(num)):\n                        for n in range(m, len(num)):\n                            for o in range(n, len(num)):\n                                x = int(num[i:j+1])\n                                y = int(num[j:k+1])\n                                z = int(num[k:m+1])\n                                w = int(num[m:n+1])\n                                t = int(num[n:o+1])\n                                v = int(num[o:])\n                                if x > 2**31 - 1 or y > 2**31 - 1 or z > 2**31 - 1 or w > 2**31 - 1 or t > 2**31 - 1 or v > 2**31 - 1:\n                                    break\n                                if x == 0 and y == 0 and z == 0:\n                                    continue\n                                if x == 0 and y == 0 and z > 0 and w == 0 and t == 0:\n                                    continue\n                                if x == 0 and y == 0 and z > 0 and w == 0 and t > 0 and t == z + w:\n                                    ans = [0, 0, z, w, t]\n                                    break\n                                if x > 0 and y == 0 and z == 0 and w == 0 and t == 0:\n                                    continue\n                                if x > 0 and y == 0 and z > 0 and w == 0 and t == 0:\n                                    continue\n                                if x > 0 and y == 0 and z > 0 and w == 0 and t > 0 and t == z + w:\n                                    ans = [x, z, t]\n                                    break\n                                if x > 0 and y > 0 and z == 0 and w == 0 and t == 0:\n                                    continue\n                                if x > 0 and y > 0 and z == 0 and w == 0 and t > 0 and t == y + z:\n                                    ans = [x, y, t]\n                                    break\n                                if x > 0 and y > 0 and z > 0 and w == 0 and t == 0:\n                                    continue\n                                if x > 0 and y > 0 and z > 0 and w == 0 and t > 0 and t == z + w:\n                                    ans = [x, y, z, w, t]\n                                    break\n                                if x > 0 and y > 0 and z > 0 and w > 0 and t == 0:\n                                    continue\n                                if x > 0 and y > 0 and z > 0 and w > 0 and t > 0 and t == w + z:\n                                    ans = [x, y, z, w, t]\n                                    break\n                            if len(ans) > 2:\n                                break\n                        if len(ans) > 2:\n                            break\n                    if len(ans) > 2:\n                        break\n                if len(ans) > 2:\n                    break\n            if len(ans) > 2:\n                break\n        return ans",
  "canonical_solution": "class Solution:\n    def splitIntoFibonacci(self, num: str) -> List[int]:\n        def dfs(i):\n            if i == n:\n                return len(ans) > 2\n            x = 0\n            for j in range(i, n):\n                if j > i and num[i] == '0':\n                    break\n                x = x * 10 + int(num[j])\n                if x > 2**31 - 1 or (len(ans) > 2 and x > ans[-2] + ans[-1]):\n                    break\n                if len(ans) < 2 or ans[-2] + ans[-1] == x:\n                    ans.append(x)\n                    if dfs(j + 1):\n                        return True\n                    ans.pop()\n            return False\n\n        n = len(num)\n        ans = []\n        dfs(0)\n        return ans\n",
  "is_python": true
}