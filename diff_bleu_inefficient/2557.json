{
  "problem_idx": "2557",
  "metrics": {
    "bleu_score": 0.18648475728801286,
    "edit_similarity": 0.4546498277841562,
    "ast_similarity": 0.6486486486486487,
    "diff_bleu_score": 1.0
  },
  "inefficient_solution": "class Solution:\n    def maxCount(self, banned: List[int], n: int, maxSum: int) -> int:\n        banned_list = []\n        for i in range(1, n + 1):\n            if i not in banned:\n                banned_list.append(i)\n        banned_list.sort()\n        max_len = len(banned_list)\n        dp = [[0] * (maxSum + 1) for _ in range(max_len + 1)]\n        for i in range(1, max_len + 1):\n            for j in range(1, maxSum + 1):\n                for k in range(1, i + 1):\n                    if banned_list[i - 1] <= j and dp[i - 1][j - banned_list[i - 1]] + banned_list[i - 1] <= j:\n                        dp[i][j] = max(dp[i][j], dp[i - 1][j - banned_list[i - 1]] + banned_list[i - 1])\n        ans = 0\n        for i in range(1, max_len + 1):\n            for j in range(1, maxSum + 1):\n                if dp[i][j] == j:\n                    ans = max(ans, i)\n        return ans",
  "canonical_solution": "class Solution:\n    def maxCount(self, banned: List[int], n: int, maxSum: int) -> int:\n        banned.extend([0, n + 1])\n        ban = sorted(set(banned))\n        ans = 0\n        for i, j in pairwise(ban):\n            left, right = 0, j - i - 1\n            while left < right:\n                mid = (left + right + 1) >> 1\n                if (i + 1 + i + mid) * mid // 2 <= maxSum:\n                    left = mid\n                else:\n                    right = mid - 1\n            ans += left\n            maxSum -= (i + 1 + i + left) * left // 2\n            if maxSum <= 0:\n                break\n        return ans\n",
  "is_python": true
}