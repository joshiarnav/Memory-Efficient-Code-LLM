{
  "problem_idx": "159",
  "metrics": {
    "bleu_score": 0.1918152227248743,
    "edit_similarity": 0.3813664596273292,
    "ast_similarity": 0.7931034482758621,
    "diff_bleu_score": 1.0
  },
  "inefficient_solution": "class Solution:\n    def lengthOfLongestSubstringTwoDistinct(self, s: str) -> int:\n        long_substring = []\n        max_length = 0\n        for char in s:\n            if len(long_substring) == 0:\n                long_substring.append(char)\n                max_length += 1\n            else:\n                new_substring = []\n                for c in long_substring:\n                    if c != char:\n                        new_substring.append(c)\n                if len(long_substring) > len(new_substring):\n                    long_substring = new_substring + [char]\n                else:\n                    long_substring = long_substring[:len(new_substring)] + [char]\n                if len(long_substring) > max_length:\n                    max_length = len(long_substring)\n        return max_length",
  "canonical_solution": "class Solution:\n    def lengthOfLongestSubstringTwoDistinct(self, s: str) -> int:\n        cnt = Counter()\n        ans = j = 0\n        for i, c in enumerate(s):\n            cnt[c] += 1\n            while len(cnt) > 2:\n                cnt[s[j]] -= 1\n                if cnt[s[j]] == 0:\n                    cnt.pop(s[j])\n                j += 1\n            ans = max(ans, i - j + 1)\n        return ans\n",
  "is_python": true
}