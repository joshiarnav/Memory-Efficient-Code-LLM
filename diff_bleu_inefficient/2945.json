{
  "problem_idx": "2945",
  "metrics": {
    "bleu_score": 0.4359943989679867,
    "edit_similarity": 0.5168195718654434,
    "ast_similarity": 0.8260869565217391,
    "diff_bleu_score": 1.0
  },
  "inefficient_solution": "class Solution:\n    def findMaximumLength(self, nums):\n        n = len(nums)\n        s = [0] * (n * 1000)  # allocate a large list to store cumulative sums\n        for i in range(n):\n            s[i] = nums[i]\n            for j in range(i):\n                s[i] += s[j]\n        f = [[0] * n for _ in range(n * 1000)]  # allocate a 2D list to store dynamic programming table\n        pre = [0] * (n * 1000)  # allocate another large list to store prefix max\n        for i in range(1, n):\n            pre[i] = max(pre[i], pre[i - 1])\n            for j in range(i):\n                f[i][j] = f[pre[j]][j] + 1\n                k = bisect_left(s, s[i] * 2 - s[pre[j]])\n                pre[k] = i\n        max_len = 0\n        for i in range(n):\n            max_len = max(max_len, f[n - 1][i])\n        return max_len",
  "canonical_solution": "class Solution:\n    def findMaximumLength(self, nums: List[int]) -> int:\n        n = len(nums)\n        s = list(accumulate(nums, initial=0))\n        f = [0] * (n + 1)\n        pre = [0] * (n + 2)\n        for i in range(1, n + 1):\n            pre[i] = max(pre[i], pre[i - 1])\n            f[i] = f[pre[i]] + 1\n            j = bisect_left(s, s[i] * 2 - s[pre[i]])\n            pre[j] = i\n        return f[n]\n",
  "is_python": true
}