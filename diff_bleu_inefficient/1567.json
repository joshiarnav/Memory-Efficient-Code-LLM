{
  "problem_idx": "1567",
  "metrics": {
    "bleu_score": 0.09567500141920535,
    "edit_similarity": 0.39096126255380204,
    "ast_similarity": 0.6774193548387096,
    "diff_bleu_score": 1.0
  },
  "inefficient_solution": "class Solution:\n    def getMaxLen(self, nums):\n        max_len = []\n        min_len = []\n        for i in range(len(nums)):\n            if nums[i] > 0:\n                max_len.append(1)\n                min_len.append(0)\n            elif nums[i] < 0:\n                max_len.append(0)\n                min_len.append(1)\n            else:\n                max_len.append(0)\n                min_len.append(0)\n        max_len = [0] * len(nums)\n        min_len = [0] * len(nums)\n        for i in range(1, len(nums)):\n            if nums[i] > 0:\n                max_len[i] = max_len[i-1] + 1\n                max_len[i] = max(max_len[i], max_len[i-1])\n                min_len[i] = min_len[i-1]\n            elif nums[i] < 0:\n                max_len[i] = min_len[i-1] + 1\n                min_len[i] = min_len[i-1]\n            else:\n                max_len[i] = 0\n                min_len[i] = 0\n        max_len = [0] * len(nums)\n        for i in range(len(nums)):\n            max_len[i] = max(max_len[i], max_len[i-1])\n        max_product = 1\n        res = 0\n        for i in range(len(nums)):\n            if nums[i] == 0:\n                max_product = 1\n                res = max(res, i)\n                continue\n            max_product *= nums[i]\n            if max_product > 0:\n                res = max(res, i + 1)\n            else:\n                res = max(res, i - max_len[i] + 1)\n        return res",
  "canonical_solution": "class Solution:\n    def getMaxLen(self, nums: List[int]) -> int:\n        f1 = 1 if nums[0] > 0 else 0\n        f2 = 1 if nums[0] < 0 else 0\n        res = f1\n        for num in nums[1:]:\n            pf1, pf2 = f1, f2\n            if num > 0:\n                f1 += 1\n                if f2 > 0:\n                    f2 += 1\n                else:\n                    f2 = 0\n            elif num < 0:\n                pf1, pf2 = f1, f2\n                f2 = pf1 + 1\n                if pf2 > 0:\n                    f1 = pf2 + 1\n                else:\n                    f1 = 0\n            else:\n                f1 = 0\n                f2 = 0\n            res = max(res, f1)\n        return res\n",
  "is_python": true
}