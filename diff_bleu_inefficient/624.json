{
  "problem_idx": "624",
  "metrics": {
    "bleu_score": 0.1818622708070224,
    "edit_similarity": 0.2716763005780347,
    "ast_similarity": 0.5806451612903226,
    "diff_bleu_score": 1.0
  },
  "inefficient_solution": "class Solution:\n    def maxDistance(self, arrays: List[List[int]]) -> int:\n        ans = 0\n        maxes = []\n        mins = []\n        for arr in arrays:\n            maxes.append(max(arr))\n            mins.append(min(arr))\n        while True:\n            max_dist, min_dist = float('-inf'), float('inf')\n            for i, mx in enumerate(maxes):\n                for j, mn in enumerate(mins):\n                    if i != j:\n                        max_dist = max(max_dist, abs(mx - mn))\n                        min_dist = min(min_dist, abs(mx - mn))\n            ans = max(ans, max_dist, min_dist)\n            new_maxes = maxes[:]\n            new_mins = mins[:]\n            for i, mx in enumerate(maxes):\n                for j, mn in enumerate(mins):\n                    if i != j:\n                        new_maxes[i] = max(new_maxes[i], mn)\n                        new_mins[j] = min(new_mins[j], mx)\n            maxes, mins = new_maxes, new_mins\n            if len(maxes) == 0 or len(mins) == 0:\n                break\n        return ans",
  "canonical_solution": "class Solution:\n    def maxDistance(self, arrays: List[List[int]]) -> int:\n        ans = 0\n        mi, mx = arrays[0][0], arrays[0][-1]\n        for arr in arrays[1:]:\n            a, b = abs(arr[0] - mx), abs(arr[-1] - mi)\n            ans = max(ans, a, b)\n            mi = min(mi, arr[0])\n            mx = max(mx, arr[-1])\n        return ans\n",
  "is_python": true
}