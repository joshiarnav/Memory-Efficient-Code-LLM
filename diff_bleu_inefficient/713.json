{
  "problem_idx": "713",
  "metrics": {
    "bleu_score": 0.23721793001506022,
    "edit_similarity": 0.6187845303867403,
    "ast_similarity": 0.6896551724137931,
    "diff_bleu_score": 1.0
  },
  "inefficient_solution": "class Solution:\n    def numSubarrayProductLessThanK(self, nums, k):\n        if k <= 1:\n            return 0\n        ans = 0\n        for i in range(len(nums)):\n            product = 1\n            for j in range(i, len(nums)):\n                product *= nums[j]\n                if product >= k:\n                    break\n                ans += 1\n        return ans",
  "canonical_solution": "class Solution:\n    def numSubarrayProductLessThanK(self, nums: List[int], k: int) -> int:\n        ans, s, j = 0, 1, 0\n        for i, v in enumerate(nums):\n            s *= v\n            while j <= i and s >= k:\n                s //= nums[j]\n                j += 1\n            ans += i - j + 1\n        return ans\n",
  "is_python": true
}