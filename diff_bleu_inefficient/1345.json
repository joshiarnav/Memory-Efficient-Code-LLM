{
  "problem_idx": "1345",
  "metrics": {
    "bleu_score": 0.15706847440945554,
    "edit_similarity": 0.3859191655801826,
    "ast_similarity": 0.5405405405405406,
    "diff_bleu_score": 1.0
  },
  "inefficient_solution": "class Solution:\n    def minJumps(self, arr: List[int]) -> int:\n        n = len(arr)\n        jumps = [n] * n\n        jumps[0] = 0\n        for i in range(n):\n            for j in range(i + 1, n):\n                if arr[i] == arr[j]:\n                    jumps[j] = min(jumps[j], jumps[i] + 1)\n            for j in range(n):\n                if arr[i] == arr[j]:\n                    jumps[j] = min(jumps[j], jumps[i] + 1)\n        return jumps[-1]",
  "canonical_solution": "class Solution:\n    def minJumps(self, arr: List[int]) -> int:\n        idx = defaultdict(list)\n        for i, v in enumerate(arr):\n            idx[v].append(i)\n        q = deque([(0, 0)])\n        vis = {0}\n        while q:\n            i, step = q.popleft()\n            if i == len(arr) - 1:\n                return step\n            v = arr[i]\n            step += 1\n            for j in idx[v]:\n                if j not in vis:\n                    vis.add(j)\n                    q.append((j, step))\n            del idx[v]\n            if i + 1 < len(arr) and (i + 1) not in vis:\n                vis.add(i + 1)\n                q.append((i + 1, step))\n            if i - 1 >= 0 and (i - 1) not in vis:\n                vis.add(i - 1)\n                q.append((i - 1, step))\n",
  "is_python": true
}