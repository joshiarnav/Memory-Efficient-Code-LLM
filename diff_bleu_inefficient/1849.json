{
  "problem_idx": "1849",
  "metrics": {
    "bleu_score": 0.28628266157395577,
    "edit_similarity": 0.2607110300820419,
    "ast_similarity": 0.9285714285714286,
    "diff_bleu_score": 1.0
  },
  "inefficient_solution": "def splitString(s):\n    def dfs(i, x, k):\n        if i == len(s):\n            return k > 1\n        for j in range(i, len(s)):\n            y = 0\n            for digit in s[j:]:\n                y = y * 10 + int(digit)\n                if (x == -1 or x - y == 1) and dfs(j + 1, y, k + 1):\n                    return True\n        return False\n\n    for i in range(len(s)):\n        for j in range(i, len(s)):\n            for k in range(j, len(s)):\n                for l in range(k, len(s)):\n                    y = 0\n                    for digit in s[:j]:\n                        y = y * 10 + int(digit)\n                    z = 0\n                    for digit in s[j:k]:\n                        z = z * 10 + int(digit)\n                    w = 0\n                    for digit in s[k:l]:\n                        w = w * 10 + int(digit)\n                    v = 0\n                    for digit in s[l:]:\n                        v = v * 10 + int(digit)\n                    if (y == -1 or y - z == 1) and (z == -1 or z - w == 1) and (w == -1 or w - v == 1):\n                        return True\n    return False",
  "canonical_solution": "class Solution:\n    def splitString(self, s: str) -> bool:\n        def dfs(i, x, k):\n            if i == len(s):\n                return k > 1\n            y = 0\n            for j in range(i, len(s)):\n                y = y * 10 + int(s[j])\n                if (x == -1 or x - y == 1) and dfs(j + 1, y, k + 1):\n                    return True\n            return False\n\n        return dfs(0, -1, 0)\n",
  "is_python": true
}