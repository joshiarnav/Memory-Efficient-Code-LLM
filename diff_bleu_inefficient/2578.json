{
  "problem_idx": "2578",
  "metrics": {
    "bleu_score": 0.12215263262763762,
    "edit_similarity": 0.32174776564051644,
    "ast_similarity": 0.6875,
    "diff_bleu_score": 1.0
  },
  "inefficient_solution": "class Solution:\n    def splitNum(self, num: int) -> int:\n        digits = [int(i) for i in str(num)]\n        len_num = len(digits)\n        max_digits = 10**len_num\n        min_num1 = 10**(len_num//2) - 1\n        min_num2 = 10**(len_num-len_num//2) - 1\n        min_sum = float('inf')\n        for i in range(max_digits):\n            num1 = i\n            for j in range(i+1, max_digits):\n                num2 = j\n                if self.check_digits(num1, num2, digits):\n                    min_sum = min(min_sum, num1 + num2)\n        return min_sum\n\n    def check_digits(self, num1, num2, digits):\n        num1 = str(num1)\n        num2 = str(num2)\n        if len(num1) + len(num2) != len(str(digits)):\n            return False\n        cnt1 = [0] * 10\n        cnt2 = [0] * 10\n        for i in num1:\n            cnt1[int(i)] += 1\n        for i in num2:\n            cnt2[int(i)] += 1\n        for i in range(10):\n            if cnt1[i] + cnt2[i] != digits.count(i):\n                return False\n        return True",
  "canonical_solution": "class Solution:\n    def splitNum(self, num: int) -> int:\n        cnt = Counter()\n        n = 0\n        while num:\n            cnt[num % 10] += 1\n            num //= 10\n            n += 1\n        ans = [0] * 2\n        j = 0\n        for i in range(n):\n            while cnt[j] == 0:\n                j += 1\n            cnt[j] -= 1\n            ans[i & 1] = ans[i & 1] * 10 + j\n        return sum(ans)\n",
  "is_python": true
}