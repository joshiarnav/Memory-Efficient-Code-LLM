{
  "problem_idx": "1663",
  "metrics": {
    "bleu_score": 0.5878325158814979,
    "edit_similarity": 0.6625916870415648,
    "ast_similarity": 0.7666666666666667,
    "diff_bleu_score": 1.0
  },
  "inefficient_solution": "class Solution:\n    def getSmallestString(self, n: int, k: int) -> str:\n        ans = []\n        for _ in range(n):\n            ans.append('a')\n        i, d = n - 1, k - n\n        while d > 25:\n            ans[i] = 'z'\n            ans.append('z')  # Excessive memory allocation\n            d -= 25\n            i -= 1\n        ans[i] = chr(ord(ans[i]) + d)\n        ans[0] = chr(97 + (ans[0] == 'a' and 1 or 0))  # Excessive memory allocation\n        return ''.join(ans)",
  "canonical_solution": "class Solution:\n    def getSmallestString(self, n: int, k: int) -> str:\n        ans = ['a'] * n\n        i, d = n - 1, k - n\n        while d > 25:\n            ans[i] = 'z'\n            d -= 25\n            i -= 1\n        ans[i] = chr(ord(ans[i]) + d)\n        return ''.join(ans)\n",
  "is_python": true
}