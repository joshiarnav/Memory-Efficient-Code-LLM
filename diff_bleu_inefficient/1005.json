{
  "problem_idx": "1005",
  "metrics": {
    "bleu_score": 0.14971601061554785,
    "edit_similarity": 0.3788927335640139,
    "ast_similarity": 0.6470588235294118,
    "diff_bleu_score": 1.0
  },
  "inefficient_solution": "class Solution:\n    def largestSumAfterKNegations(self, nums, k):\n        nums_copy = [x for x in nums]\n        nums_map = {x: nums.count(x) for x in nums}\n        for _ in range(k):\n            max_abs = max(abs(x) for x in nums_copy)\n            max_abs_index = nums_copy.index(max_abs)\n            nums_copy[max_abs_index] *= -1\n        return sum(x * nums_map[x] for x in nums_copy)",
  "canonical_solution": "class Solution:\n    def largestSumAfterKNegations(self, nums: List[int], k: int) -> int:\n        cnt = Counter(nums)\n        for x in range(-100, 0):\n            if cnt[x]:\n                m = min(cnt[x], k)\n                cnt[x] -= m\n                cnt[-x] += m\n                k -= m\n                if k == 0:\n                    break\n        if k & 1 and cnt[0] == 0:\n            for x in range(1, 101):\n                if cnt[x]:\n                    cnt[x] -= 1\n                    cnt[-x] += 1\n                    break\n        return sum(x * v for x, v in cnt.items())\n",
  "is_python": true
}