{
  "problem_idx": "490",
  "metrics": {
    "bleu_score": 0.6606569819553418,
    "edit_similarity": 0.5896464646464646,
    "ast_similarity": 0.8571428571428571,
    "diff_bleu_score": 1.0
  },
  "inefficient_solution": "class Solution:\n    def hasPath(\n        self, maze: List[List[int]], start: List[int], destination: List[int]\n    ) -> bool:\n        m, n = len(maze), len(maze[0])\n        visited = {}\n        queue = []\n        queue.append((start[0], start[1]))\n        while queue:\n            row, col = queue.pop(0)\n            if (row, col) in visited:\n                continue\n            visited[(row, col)] = True\n            if [row, col] == destination:\n                return True\n            for a, b in [[0, -1], [0, 1], [-1, 0], [1, 0]]:\n                x, y = row, col\n                while 0 <= x + a < m and 0 <= y + b < n and maze[x + a][y + b] == 0:\n                    x, y = x + a, y + b\n                    queue.append((x, y))\n            queue.append((row, col))\n        return False",
  "canonical_solution": "class Solution:\n    def hasPath(\n        self, maze: List[List[int]], start: List[int], destination: List[int]\n    ) -> bool:\n        m, n = len(maze), len(maze[0])\n        q = deque([start])\n        rs, cs = start\n        vis = {(rs, cs)}\n        while q:\n            i, j = q.popleft()\n            for a, b in [[0, -1], [0, 1], [-1, 0], [1, 0]]:\n                x, y = i, j\n                while 0 <= x + a < m and 0 <= y + b < n and maze[x + a][y + b] == 0:\n                    x, y = x + a, y + b\n                if [x, y] == destination:\n                    return True\n                if (x, y) not in vis:\n                    vis.add((x, y))\n                    q.append((x, y))\n        return False\n",
  "is_python": true
}