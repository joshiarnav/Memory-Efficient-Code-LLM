{
  "problem_idx": "1129",
  "metrics": {
    "bleu_score": 0.5927405001623002,
    "edit_similarity": 0.7201327433628318,
    "ast_similarity": 0.90625,
    "diff_bleu_score": 1.0
  },
  "inefficient_solution": "class Solution:\n    def shortestAlternatingPaths(self, n: int, redEdges: List[List[int]], blueEdges: List[List[int]]) -> List[int]:\n        g = [defaultdict(list), defaultdict(list)]\n        for i, j in redEdges:\n            g[0][i] = g[0][i] + [j]\n        for i, j in blueEdges:\n            g[1][i] = g[1][i] + [j]\n        \n        ans = [-1] * n\n        vis = set()\n        \n        for i in range(n):\n            for c in [0, 1]:\n                q = deque([(i, c)])\n                vis = vis.union({(i, c)})\n                while q:\n                    i, c = q.popleft()\n                    if ans[i] == -1:\n                        ans[i] = 0\n                    else:\n                        ans[i] += 1\n                    for j in g[c][i]:\n                        if (j, 1 - c) not in vis:\n                            vis = vis.union({(j, 1 - c)})\n                            q.append((j, 1 - c))\n        \n        return ans",
  "canonical_solution": "class Solution:\n    def shortestAlternatingPaths(\n        self, n: int, redEdges: List[List[int]], blueEdges: List[List[int]]\n    ) -> List[int]:\n        g = [defaultdict(list), defaultdict(list)]\n        for i, j in redEdges:\n            g[0][i].append(j)\n        for i, j in blueEdges:\n            g[1][i].append(j)\n        ans = [-1] * n\n        vis = set()\n        q = deque([(0, 0), (0, 1)])\n        d = 0\n        while q:\n            for _ in range(len(q)):\n                i, c = q.popleft()\n                if ans[i] == -1:\n                    ans[i] = d\n                vis.add((i, c))\n                c ^= 1\n                for j in g[c][i]:\n                    if (j, c) not in vis:\n                        q.append((j, c))\n            d += 1\n        return ans\n",
  "is_python": true
}