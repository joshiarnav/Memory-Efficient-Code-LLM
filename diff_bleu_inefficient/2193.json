{
  "problem_idx": "2193",
  "metrics": {
    "bleu_score": 0.2971351232260807,
    "edit_similarity": 0.5632754342431762,
    "ast_similarity": 0.8666666666666667,
    "diff_bleu_score": 1.0
  },
  "inefficient_solution": "class Solution:\n    def minMovesToMakePalindrome(self, s: str) -> int:\n        cs = list(s)\n        ans = 0\n        for i in range(len(s) // 2):\n            for j in range(i, len(s) // 2 + 1):\n                if cs[i] == cs[j]:\n                    temp = cs[i: j + 1]\n                    cs[i: j + 1] = cs[j: i: -1]\n                    for k in range(j, i, -1):\n                        cs[k], cs[k - 1] = cs[k - 1], cs[k]\n                    ans += len(temp) - 1\n                    break\n            else:\n                temp = cs[i: len(s) // 2 + 1]\n                cs[i: len(s) // 2 + 1] = cs[len(s) // 2: i: -1]\n                for k in range(len(s) // 2, i - 1, -1):\n                    cs[k], cs[k - 1] = cs[k - 1], cs[k]\n                ans += len(temp) - 1\n                break\n        return ans",
  "canonical_solution": "class Solution:\n    def minMovesToMakePalindrome(self, s: str) -> int:\n        cs = list(s)\n        ans, n = 0, len(s)\n        i, j = 0, n - 1\n        while i < j:\n            even = False\n            for k in range(j, i, -1):\n                if cs[i] == cs[k]:\n                    even = True\n                    while k < j:\n                        cs[k], cs[k + 1] = cs[k + 1], cs[k]\n                        k += 1\n                        ans += 1\n                    j -= 1\n                    break\n            if not even:\n                ans += n // 2 - i\n            i += 1\n        return ans\n",
  "is_python": true
}