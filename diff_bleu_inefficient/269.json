{
  "problem_idx": "269",
  "metrics": {
    "bleu_score": 0.49553092289270895,
    "edit_similarity": 0.5562130177514792,
    "ast_similarity": 0.8095238095238095,
    "diff_bleu_score": 1.0
  },
  "inefficient_solution": "class Solution:\n    def alienOrder(self, words: List[str]) -> str:\n        counts = {i: 0 for i in range(26)}\n        for w in words:\n            for c in w:\n                counts[ord(c) - ord('a')] += 1\n\n        g = [[0] * 26 for _ in range(26)]\n        for i in range(len(words) - 1):\n            for j in range(min(len(words[i]), len(words[i + 1]))):\n                g1, g2 = ord(words[i][j]) - ord('a'), ord(words[i + 1][j]) - ord('a')\n                g[g1][g2] = 1\n                counts[g1] += 1\n                if words[i][j] != words[i + 1][j]:\n                    break\n            else:\n                counts[ord(words[i][-1]) - ord('a')] += 1\n\n        for i in range(26):\n            if counts[i] == 0 and chr(i + ord('a')) in ''.join(words):\n                return \"\"\n\n        indegree = [0] * 26\n        for i in range(26):\n            for j in range(26):\n                if g[i][j] == 1:\n                    indegree[j] += 1\n\n        q = deque()\n        for i in range(26):\n            if indegree[i] == 0 and chr(i + ord('a')) in ''.join(words):\n                q.append(i)\n\n        ans = []\n        while q:\n            t = q.popleft()\n            ans.append(chr(t + ord('a')))\n            for i in range(26):\n                if g[t][i] == 1:\n                    indegree[i] -= 1\n                    if indegree[i] == 0 and chr(i + ord('a')) in ''.join(words):\n                        q.append(i)\n\n        return ''.join(ans)",
  "canonical_solution": "class Solution:\n    def alienOrder(self, words: List[str]) -> str:\n        g = [[False] * 26 for _ in range(26)]\n        s = [False] * 26\n        cnt = 0\n        n = len(words)\n        for i in range(n - 1):\n            for c in words[i]:\n                if cnt == 26:\n                    break\n                o = ord(c) - ord('a')\n                if not s[o]:\n                    cnt += 1\n                    s[o] = True\n            m = len(words[i])\n            for j in range(m):\n                if j >= len(words[i + 1]):\n                    return ''\n                c1, c2 = words[i][j], words[i + 1][j]\n                if c1 == c2:\n                    continue\n                o1, o2 = ord(c1) - ord('a'), ord(c2) - ord('a')\n                if g[o2][o1]:\n                    return ''\n                g[o1][o2] = True\n                break\n        for c in words[n - 1]:\n            if cnt == 26:\n                break\n            o = ord(c) - ord('a')\n            if not s[o]:\n                cnt += 1\n                s[o] = True\n\n        indegree = [0] * 26\n        for i in range(26):\n            for j in range(26):\n                if i != j and s[i] and s[j] and g[i][j]:\n                    indegree[j] += 1\n        q = deque()\n        ans = []\n        for i in range(26):\n            if s[i] and indegree[i] == 0:\n                q.append(i)\n        while q:\n            t = q.popleft()\n            ans.append(chr(t + ord('a')))\n            for i in range(26):\n                if s[i] and i != t and g[t][i]:\n                    indegree[i] -= 1\n                    if indegree[i] == 0:\n                        q.append(i)\n        return '' if len(ans) < cnt else ''.join(ans)\n",
  "is_python": true
}