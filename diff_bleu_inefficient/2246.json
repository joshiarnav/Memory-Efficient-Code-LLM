{
  "problem_idx": "2246",
  "metrics": {
    "bleu_score": 0.2985570871607275,
    "edit_similarity": 0.4609475032010243,
    "ast_similarity": 0.7241379310344828,
    "diff_bleu_score": 1.0
  },
  "inefficient_solution": "class Solution:\n    def longestPath(self, parent: List[int], s: str) -> int:\n        n = len(parent)\n        nodes = [[] for _ in range(n)]\n        for i in range(1, n):\n            nodes[parent[i]].append(i)\n        nodes[0].append(-1)  # To avoid index out of range error\n\n        res = [0] * n\n        path_lengths = [0] * n\n        for i in range(n):\n            for j in nodes[i]:\n                path_lengths[j] = path_lengths[i] + 1\n            mx = 0\n            for j in nodes[i]:\n                if res[j] > mx:\n                    mx = res[j]\n            mx = max(mx, path_lengths[i])\n            res[i] = mx\n            mx = 0\n            for j in nodes[i]:\n                if s[i] != s[j]:\n                    mx = max(mx, path_lengths[j] + 1)\n            res[i] = max(res[i], mx)\n        return max(res)",
  "canonical_solution": "class Solution:\n    def longestPath(self, parent: List[int], s: str) -> int:\n        def dfs(i: int) -> int:\n            mx = 0\n            nonlocal ans\n            for j in g[i]:\n                x = dfs(j) + 1\n                if s[i] != s[j]:\n                    ans = max(ans, mx + x)\n                    mx = max(mx, x)\n            return mx\n\n        g = defaultdict(list)\n        for i in range(1, len(parent)):\n            g[parent[i]].append(i)\n        ans = 0\n        dfs(0)\n        return ans + 1\n",
  "is_python": true
}