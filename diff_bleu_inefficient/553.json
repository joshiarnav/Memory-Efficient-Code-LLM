{
  "problem_idx": "553",
  "metrics": {
    "bleu_score": 0.4042223532712146,
    "edit_similarity": 0.5155555555555555,
    "ast_similarity": 0.6071428571428571,
    "diff_bleu_score": 1.0
  },
  "inefficient_solution": "class Solution:\n    def optimalDivision(self, nums: List[int]) -> str:\n        n = len(nums)\n        if n == 1:\n            return str(nums[0])\n        if n == 2:\n            return str(nums[0]) + '/' + str(nums[1])\n        temp_str = ''\n        for i in range(n-1):\n            temp_str += str(nums[i]) + '/'\n        temp_str = temp_str[:-1] # remove the last '/'\n        parentheses = '(' * (n-2) + ')' * (n-2)\n        return str(nums[0]) + '/' + parentheses + temp_str",
  "canonical_solution": "class Solution:\n    def optimalDivision(self, nums: List[int]) -> str:\n        n = len(nums)\n        if n == 1:\n            return str(nums[0])\n        if n == 2:\n            return f'{nums[0]}/{nums[1]}'\n        return f'{nums[0]}/({\"/\".join(map(str, nums[1:]))})'\n",
  "is_python": true
}