{
  "problem_idx": "924",
  "metrics": {
    "bleu_score": 0.21452500379451392,
    "edit_similarity": 0.4917382683410443,
    "ast_similarity": 0.6470588235294118,
    "diff_bleu_score": 1.0
  },
  "inefficient_solution": "class Solution:\n    def minMalwareSpread(self, graph, initial):\n        n = len(graph)\n        graph_copy = [[graph[i][j] for j in range(n)] for i in range(n)]\n        initial_copy = [i for i in initial]\n        \n        for _ in range(10000):\n            for i in range(n):\n                for j in range(n):\n                    if graph_copy[i][j] == 1:\n                        graph_copy[i][j] = 0\n                        graph_copy[j][i] = 0\n                        for k in range(n):\n                            if graph_copy[k][i] == 1 or graph_copy[k][j] == 1:\n                                graph_copy[i][k] = 1\n                                graph_copy[k][i] = 1\n                                graph_copy[j][k] = 1\n                                graph_copy[k][j] = 1\n                        graph_copy[i][j] = 1\n                        graph_copy[j][i] = 1\n                        \n        infected = [0] * n\n        for i in initial_copy:\n            infected[i] = 1\n            for j in range(n):\n                if graph_copy[i][j] == 1:\n                    infected[j] = 1\n        \n        mi = max(infected)\n        res = initial_copy[0]\n        for i in range(len(initial_copy)):\n            if infected[initial_copy[i]] == mi:\n                continue\n            if mi > infected[initial_copy[i]]:\n                mi = infected[initial_copy[i]]\n                res = initial_copy[i]\n            elif mi == infected[initial_copy[i]]:\n                if initial_copy[i] < res:\n                    res = initial_copy[i]\n        return res",
  "canonical_solution": "class Solution:\n    def minMalwareSpread(self, graph: List[List[int]], initial: List[int]) -> int:\n        n = len(graph)\n        p = list(range(n))\n        size = [1] * n\n\n        def find(x):\n            if p[x] != x:\n                p[x] = find(p[x])\n            return p[x]\n\n        for i in range(n):\n            for j in range(i + 1, n):\n                if graph[i][j] == 1:\n                    pa, pb = find(i), find(j)\n                    if pa == pb:\n                        continue\n                    p[pa] = pb\n                    size[pb] += size[pa]\n\n        mi = inf\n        res = initial[0]\n        initial.sort()\n        for i in range(len(initial)):\n            t = 0\n            s = set()\n            for j in range(len(initial)):\n                if i == j:\n                    continue\n                if find(initial[j]) in s:\n                    continue\n                s.add(find(initial[j]))\n                t += size[find(initial[j])]\n            if mi > t:\n                mi = t\n                res = initial[i]\n        return res\n",
  "is_python": true
}