{
  "problem_idx": "2585",
  "metrics": {
    "bleu_score": 0.646769139083767,
    "edit_similarity": 0.6886503067484663,
    "ast_similarity": 0.9310344827586207,
    "diff_bleu_score": 1.0
  },
  "inefficient_solution": "class Solution:\n    def waysToReachTarget(self, target: int, types: List[List[int]]) -> int:\n        n = len(types)\n        mod = 10**9 + 7\n        dp = [[0] * (target + 1) for _ in range(n + 1)]\n        for _ in range(10000):\n            dp2 = [[0] * (target + 1) for _ in range(n + 1)]\n            for i in range(n + 1):\n                for j in range(target + 1):\n                    count, marks = types[i - 1] if i > 0 else [0, 0]\n                    for k in range(10000):\n                        if j >= k * marks:\n                            dp2[i][j] = (dp2[i][j] + dp[i][j - k * marks]) % mod\n            dp = dp2\n        return dp[n][target]",
  "canonical_solution": "class Solution:\n    def waysToReachTarget(self, target: int, types: List[List[int]]) -> int:\n        n = len(types)\n        mod = 10**9 + 7\n        f = [[0] * (target + 1) for _ in range(n + 1)]\n        f[0][0] = 1\n        for i in range(1, n + 1):\n            count, marks = types[i - 1]\n            for j in range(target + 1):\n                for k in range(count + 1):\n                    if j >= k * marks:\n                        f[i][j] = (f[i][j] + f[i - 1][j - k * marks]) % mod\n        return f[n][target]\n",
  "is_python": true
}