{
  "problem_idx": "666",
  "metrics": {
    "bleu_score": 0.3477652490846885,
    "edit_similarity": 0.47182425978987586,
    "ast_similarity": 0.7222222222222222,
    "diff_bleu_score": 1.0
  },
  "inefficient_solution": "class Solution:\n    def pathSum(self, nums: List[int]) -> int:\n        mem = {}\n        mem[11] = {}\n        for num in nums:\n            mem[11][num % 10] = num % 10\n\n        def dfs(node, t, visited):\n            if node not in mem:\n                return\n            if node in visited:\n                return\n            visited.add(node)\n            t += mem[node]\n            d, p = divmod(node, 10)\n            l = (d + 1) * 10 + (p * 2) - 1\n            r = l + 1\n            ans = t\n            if l not in mem and r not in mem:\n                ans += t\n            if l in mem:\n                ans += dfs(l, t, visited)\n            if r in mem:\n                ans += dfs(r, t, visited)\n            return ans\n\n        ans = 0\n        for i in range(2, 15):\n            mem[i] = {}\n            for num in nums:\n                d, p = divmod(num, 10)\n                if d == i and p <= 8:\n                    mem[i][p] = num % 10\n        visited = set()\n        for i in range(2, 15):\n            ans += dfs(i, 0, visited)\n        return ans",
  "canonical_solution": "class Solution:\n    def pathSum(self, nums: List[int]) -> int:\n        def dfs(node, t):\n            if node not in mp:\n                return\n            t += mp[node]\n            d, p = divmod(node, 10)\n            l = (d + 1) * 10 + (p * 2) - 1\n            r = l + 1\n            nonlocal ans\n            if l not in mp and r not in mp:\n                ans += t\n                return\n            dfs(l, t)\n            dfs(r, t)\n\n        ans = 0\n        mp = {num // 10: num % 10 for num in nums}\n        dfs(11, 0)\n        return ans\n",
  "is_python": true
}