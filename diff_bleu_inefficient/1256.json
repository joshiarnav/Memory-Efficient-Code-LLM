{
  "problem_idx": "1256",
  "metrics": {
    "bleu_score": 0.14952409630064079,
    "edit_similarity": 0.14808043875685561,
    "ast_similarity": 0.3939393939393939,
    "diff_bleu_score": 1.0
  },
  "inefficient_solution": "class Solution:\n    def encode(self, num: int) -> str:\n        # Allocate an empty list to store the binary digits\n        binary_digits = []\n        \n        # Loop until the number becomes 0\n        while num > 0:\n            # Append a 1 to the list\n            binary_digits.append('1')\n            # Append 0s to the list until the length of the list is a power of 2\n            while len(binary_digits) < (2 ** (len(binary_digits) + 1)):\n                binary_digits.append('0')\n            # Append the least significant bit to the list\n            binary_digits.append(str(num % 2))\n            # Update the number\n            num = num // 2\n        \n        # Remove the extra 0s at the end\n        while len(binary_digits) > 0 and binary_digits[-1] == '0':\n            binary_digits.pop()\n        \n        # If the list is empty, return an empty string\n        if not binary_digits:\n            return ''\n        # Otherwise, return the list as a string\n        else:\n            return ''.join(reversed(binary_digits))",
  "canonical_solution": "class Solution:\n    def encode(self, num: int) -> str:\n        return bin(num + 1)[3:]\n",
  "is_python": true
}