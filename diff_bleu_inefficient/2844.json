{
  "problem_idx": "2844",
  "metrics": {
    "bleu_score": 0.061378722870746846,
    "edit_similarity": 0.07550000000000001,
    "ast_similarity": 0.4864864864864865,
    "diff_bleu_score": 1.0
  },
  "inefficient_solution": "class Solution:\n    def minimumOperations(self, num: str) -> int:\n        n = len(num)\n        visited = set()\n        dp = {}\n        for i in range(n):\n            for j in range(n):\n                for k in range(5):\n                    for m in range(5):\n                        for l in range(5):\n                            for o in range(5):\n                                for p in range(5):\n                                    for q in range(5):\n                                        for r in range(5):\n                                            for s in range(5):\n                                                for t in range(5):\n                                                    for u in range(5):\n                                                        for v in range(5):\n                                                            for w in range(5):\n                                                                for x in range(5):\n                                                                    for y in range(5):\n                                                                        for z in range(5):\n                                                                            key = (i, j, k, m, l, o, p, q, r, s, t, u, v, w, x, y, z)\n                                                                            if key in visited:\n                                                                                continue\n                                                                            visited.add(key)\n                                                                            dp[key] = None\n        result = 1000\n        for i in range(n):\n            for j in range(n):\n                if i == j:\n                    continue\n                for k in range(10):\n                    new_num = num[:i] + str(k) + num[i+1:j] + num[j+1:]\n                    if not new_num:\n                        continue\n                    count = 0\n                    for digit in new_num:\n                        if int(digit) not in [0, 2, 4, 6, 8]:\n                            count += 1\n                    if count == 0:\n                        result = 0\n                        break\n                    for m in range(5):\n                        for l in range(5):\n                            for o in range(5):\n                                for p in range(5):\n                                    for q in range(5):\n                                        for r in range(5):\n                                            for s in range(5):\n                                                for t in range(5):\n                                                    for u in range(5):\n                                                        for v in range(5):\n                                                            for w in range(5):\n                                                                for x in range(5):\n                                                                    for y in range(5):\n                                                                        for z in range(5):\n                                                                            key = (i, j, k, m, l, o, p, q, r, s, t, u, v, w, x, y, z)\n                                                                            if dp[key] is None:\n                                                                                dp[key] = 1\n                                                                                break\n                                                                            else:\n                                                                                dp[key] += 1\n                        if dp[key] > result:\n                            break\n                    if dp[key] > result:\n                        break\n                if dp[key] > result:\n                    break\n            if dp[key] > result:\n                break\n        return result",
  "canonical_solution": "class Solution:\n    def minimumOperations(self, num: str) -> int:\n        @cache\n        def dfs(i: int, k: int) -> int:\n            if i == n:\n                return 0 if k == 0 else n\n            ans = dfs(i + 1, k) + 1\n            ans = min(ans, dfs(i + 1, (k * 10 + int(num[i])) % 25))\n            return ans\n\n        n = len(num)\n        return dfs(0, 0)\n",
  "is_python": true
}