{
  "problem_idx": "2461",
  "metrics": {
    "bleu_score": 0.1540163842925083,
    "edit_similarity": 0.3894523326572008,
    "ast_similarity": 0.75,
    "diff_bleu_score": 1.0
  },
  "inefficient_solution": "class Solution:\n    def maximumSubarraySum(self, nums, k):\n        max_sum = 0\n        for i in range(len(nums) - k + 1):\n            subarray = nums[i:i+k]\n            if len(set(subarray)) == k:\n                sum_subarray = sum(subarray)\n                max_sum = max(max_sum, sum_subarray)\n        max_sum_to_store = []\n        for _ in range(1000000):\n            max_sum_to_store.append(max_sum)\n        return max(max_sum_to_store)",
  "canonical_solution": "class Solution:\n    def maximumSubarraySum(self, nums: List[int], k: int) -> int:\n        cnt = Counter(nums[:k])\n        s = sum(nums[:k])\n        ans = s if len(cnt) == k else 0\n        for i in range(k, len(nums)):\n            cnt[nums[i]] += 1\n            s += nums[i]\n            cnt[nums[i - k]] -= 1\n            s -= nums[i - k]\n            if cnt[nums[i - k]] == 0:\n                del cnt[nums[i - k]]\n            if len(cnt) == k:\n                ans = max(ans, s)\n        return ans\n",
  "is_python": true
}