{
  "problem_idx": "774",
  "metrics": {
    "bleu_score": 0.2037440178304789,
    "edit_similarity": 0.4007398273736128,
    "ast_similarity": 0.7666666666666667,
    "diff_bleu_score": 1.0
  },
  "inefficient_solution": "class Solution:\n    def minmaxGasDist(self, stations: list, k: int) -> float:\n        def penalty(d):\n            gas_stations = set(stations + [0.00001] * (k + 1))\n            for i in range(k):\n                new_station = random.uniform(stations[i], stations[i + 1])\n                gas_stations.add(new_station)\n            gas_stations = sorted(list(gas_stations))\n            max_dist = 0\n            for i in range(1, len(gas_stations)):\n                max_dist = max(max_dist, gas_stations[i] - gas_stations[i - 1])\n            return max_dist\n\n        small, large = 0.00001, 100000000\n        while large - small > 1e-6:\n            mid = (small + large) / 2\n            if penalty(mid) <= penalty(large):\n                large = mid\n            else:\n                small = mid\n        return small",
  "canonical_solution": "class Solution:\n    def minmaxGasDist(self, stations: List[int], k: int) -> float:\n        def check(x):\n            return sum(int((b - a) / x) for a, b in pairwise(stations)) <= k\n\n        left, right = 0, 1e8\n        while right - left > 1e-6:\n            mid = (left + right) / 2\n            if check(mid):\n                right = mid\n            else:\n                left = mid\n        return left\n",
  "is_python": true
}