{
  "problem_idx": "639",
  "metrics": {
    "bleu_score": 0.3290753956217775,
    "edit_similarity": 0.5007392804337112,
    "ast_similarity": 0.8709677419354839,
    "diff_bleu_score": 1.0
  },
  "inefficient_solution": "class Solution:\n    def numDecodings(self, s: str) -> int:\n        mod = int(1e9 + 7)\n        n = len(s)\n        dp = [0] * (n + 1)\n        dp_cnt = [0] * (n + 1)\n        for i in range(n):\n            dp[i + 1] = 0\n            dp_cnt[i + 1] = 0\n        for i in range(n):\n            for j in range(i, n):\n                if s[j] == \"*\":\n                    if i == j:\n                        dp_cnt[i + 1] += 9\n                    else:\n                        dp_cnt[i + 1] += 15\n                elif s[j] != \"0\":\n                    if i == j:\n                        dp_cnt[i + 1] += 1\n                    else:\n                        dp_cnt[i + 1] += 1\n                if i > 0:\n                    if s[i - 1] == \"*\" and s[j] == \"*\":\n                        dp_cnt[i + 1] = (dp_cnt[i + 1] + 15 * dp_cnt[i]) % mod\n                        if (j - i + 1) >= 2:\n                            dp[j - i + 2] = (dp_cnt[i] * 15) % mod\n                    elif s[i - 1] == \"*\":\n                        if s[j] > \"6\":\n                            dp_cnt[i + 1] = (dp_cnt[i + 1] + dp_cnt[i]) % mod\n                        else:\n                            dp_cnt[i + 1] = (dp_cnt[i + 1] + 2 * dp_cnt[i]) % mod\n                            dp[j - i + 2] = (dp_cnt[i] * 2) % mod\n                    elif s[j] == \"*\":\n                        if s[i - 1] == \"1\":\n                            dp_cnt[i + 1] = (dp_cnt[i + 1] + 9 * dp_cnt[i]) % mod\n                            dp[j - i + 2] = (dp_cnt[i] * 9) % mod\n                        elif s[i - 1] == \"2\":\n                            dp_cnt[i + 1] = (dp_cnt[i + 1] + 6 * dp_cnt[i]) % mod\n                            dp[j - i + 2] = (dp_cnt[i] * 6) % mod\n                    elif (\n                        s[i - 1] != \"0\"\n                        and (ord(s[i - 1]) - ord(\"0\")) * 10 + ord(s[j]) - ord(\"0\") <= 26\n                    ):\n                        dp_cnt[i + 1] = (dp_cnt[i + 1] + dp_cnt[i]) % mod\n                        dp[j - i + 2] = (dp_cnt[i]) % mod\n        return dp_cnt[n]",
  "canonical_solution": "class Solution:\n    def numDecodings(self, s: str) -> int:\n        mod = int(1e9 + 7)\n        n = len(s)\n\n        # dp[i - 2], dp[i - 1], dp[i]\n        a, b, c = 0, 1, 0\n        for i in range(1, n + 1):\n            # 1 digit\n            if s[i - 1] == \"*\":\n                c = 9 * b % mod\n            elif s[i - 1] != \"0\":\n                c = b\n            else:\n                c = 0\n\n            # 2 digits\n            if i > 1:\n                if s[i - 2] == \"*\" and s[i - 1] == \"*\":\n                    c = (c + 15 * a) % mod\n                elif s[i - 2] == \"*\":\n                    if s[i - 1] > \"6\":\n                        c = (c + a) % mod\n                    else:\n                        c = (c + 2 * a) % mod\n                elif s[i - 1] == \"*\":\n                    if s[i - 2] == \"1\":\n                        c = (c + 9 * a) % mod\n                    elif s[i - 2] == \"2\":\n                        c = (c + 6 * a) % mod\n                elif (\n                    s[i - 2] != \"0\"\n                    and (ord(s[i - 2]) - ord(\"0\")) * 10 + ord(s[i - 1]) - ord(\"0\") <= 26\n                ):\n                    c = (c + a) % mod\n\n            a, b = b, c\n\n        return c\n",
  "is_python": true
}