{
  "problem_idx": "2953",
  "metrics": {
    "bleu_score": 0.28753299927046844,
    "edit_similarity": 0.35701830863121187,
    "ast_similarity": 0.8823529411764706,
    "diff_bleu_score": 1.0
  },
  "inefficient_solution": "class Solution:\n    def countCompleteSubstrings(self, word: str, k: int) -> int:\n        def f(s: str) -> int:\n            ans = 0\n            for i in range(1, 26):\n                for l in range(1, 10000):\n                    if l > len(s):\n                        break\n                    cnt = {}\n                    for j in range(l):\n                        cnt[s[j]] = cnt.get(s[j], 0) + 1\n                    if all(v == k for v in cnt.values()):\n                        valid = True\n                        for j in range(l - 1):\n                            if abs(ord(s[j]) - ord(s[j + 1])) > 2:\n                                valid = False\n                                break\n                        if valid:\n                            ans += 1\n                    if all(v == k for v in cnt.values()):\n                        valid = True\n                        for j in range(l - 1):\n                            if abs(ord(s[l - 1 - j]) - ord(s[l - j - 2])) > 2:\n                                valid = False\n                                break\n                        if valid:\n                            ans += 1\n                for j in range(len(s) - l + 1):\n                    cnt[s[j]] = cnt.get(s[j], 0) - 1\n                    cnt[s[j + l]] = cnt.get(s[j + l], 0) + 1\n                    if all(v == k for v in cnt.values()):\n                        valid = True\n                        for j in range(l - 1):\n                            if abs(ord(s[j]) - ord(s[j + 1])) > 2:\n                                valid = False\n                                break\n                        if valid:\n                            ans += 1\n                    if all(v == k for v in cnt.values()):\n                        valid = True\n                        for j in range(l - 1):\n                            if abs(ord(s[l - 1 - j]) - ord(s[l - j - 2])) > 2:\n                                valid = False\n                                break\n                        if valid:\n                            ans += 1\n            return ans\n\n        n = len(word)\n        ans = 0\n        for i in range(n):\n            j = i + 1\n            while j < n and abs(ord(word[j]) - ord(word[j - 1])) <= 2:\n                j += 1\n            ans += f(word[i:j])\n        return ans",
  "canonical_solution": "class Solution:\n    def countCompleteSubstrings(self, word: str, k: int) -> int:\n        def f(s: str) -> int:\n            m = len(s)\n            ans = 0\n            for i in range(1, 27):\n                l = i * k\n                if l > m:\n                    break\n                cnt = Counter(s[:l])\n                freq = Counter(cnt.values())\n                ans += freq[k] == i\n                for j in range(l, m):\n                    freq[cnt[s[j]]] -= 1\n                    cnt[s[j]] += 1\n                    freq[cnt[s[j]]] += 1\n\n                    freq[cnt[s[j - l]]] -= 1\n                    cnt[s[j - l]] -= 1\n                    freq[cnt[s[j - l]]] += 1\n\n                    ans += freq[k] == i\n            return ans\n\n        n = len(word)\n        ans = i = 0\n        while i < n:\n            j = i + 1\n            while j < n and abs(ord(word[j]) - ord(word[j - 1])) <= 2:\n                j += 1\n            ans += f(word[i:j])\n            i = j\n        return ans\n",
  "is_python": true
}