{
  "problem_idx": "611",
  "metrics": {
    "bleu_score": 0.33999484207332686,
    "edit_similarity": 0.45150501672240806,
    "ast_similarity": 0.7307692307692307,
    "diff_bleu_score": 1.0
  },
  "inefficient_solution": "class Solution:\n    def triangleNumber(self, nums: List[int]) -> int:\n        nums_copy = nums.copy()\n        for i in range(len(nums_copy)):\n            nums_copy[i] = [nums_copy[i]]\n        nums_copy = nums_copy + nums_copy\n        nums_copy = nums_copy + nums_copy\n        nums_copy = nums_copy + nums_copy\n        ans = 0\n        for i in range(len(nums_copy) - 2):\n            for j in range(i + 1, len(nums_copy) - 1):\n                for k in range(j + 1, len(nums_copy)):\n                    if nums_copy[i] + nums_copy[j] > nums_copy[k]:\n                        ans += 1\n        return ans",
  "canonical_solution": "class Solution:\n    def triangleNumber(self, nums: List[int]) -> int:\n        nums.sort()\n        ans, n = 0, len(nums)\n        for i in range(n - 2):\n            for j in range(i + 1, n - 1):\n                k = bisect_left(nums, nums[i] + nums[j], lo=j + 1) - 1\n                ans += k - j\n        return ans\n",
  "is_python": true
}