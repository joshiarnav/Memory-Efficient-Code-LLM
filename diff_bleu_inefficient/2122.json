{
  "problem_idx": "2122",
  "metrics": {
    "bleu_score": 0.15513200226648272,
    "edit_similarity": 0.3608748481166464,
    "ast_similarity": 0.5384615384615384,
    "diff_bleu_score": 1.0
  },
  "inefficient_solution": "class Solution:\n    def recoverArray(self, nums: List[int]) -> List[int]:\n        n = len(nums)\n        pairs = [[] for _ in range(n)]\n        for i in range(n):\n            pairs[i % n].append(nums[i])\n        ans = []\n        for i in range(n):\n            pairs[i].sort()\n            for j in range(1, len(pairs[i])):\n                ans.append((pairs[i][j] + pairs[i][j-1]) // 2)\n        return ans",
  "canonical_solution": "class Solution:\n    def recoverArray(self, nums: List[int]) -> List[int]:\n        nums.sort()\n        n = len(nums)\n        for i in range(1, n):\n            d = nums[i] - nums[0]\n            if d == 0 or d % 2 == 1:\n                continue\n            vis = [False] * n\n            vis[i] = True\n            ans = [(nums[0] + nums[i]) >> 1]\n            l, r = 1, i + 1\n            while r < n:\n                while l < n and vis[l]:\n                    l += 1\n                while r < n and nums[r] - nums[l] < d:\n                    r += 1\n                if r == n or nums[r] - nums[l] > d:\n                    break\n                vis[r] = True\n                ans.append((nums[l] + nums[r]) >> 1)\n                l, r = l + 1, r + 1\n            if len(ans) == (n >> 1):\n                return ans\n        return []\n",
  "is_python": true
}