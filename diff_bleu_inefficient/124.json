{
  "problem_idx": "124",
  "metrics": {
    "bleu_score": 0.2785750476611444,
    "edit_similarity": 0.45639187574671447,
    "ast_similarity": 0.6666666666666666,
    "diff_bleu_score": 1.0
  },
  "inefficient_solution": "class Solution:\n    def maxPathSum(self, root: Optional[TreeNode]) -> int:\n        paths = []\n        def dfs(root: Optional[TreeNode]) -> None:\n            if root is None:\n                return\n            left = []\n            right = []\n            if root.left is not None:\n                left = dfs(root.left)\n            if root.right is not None:\n                right = dfs(root.right)\n            paths.append([root.val])\n            if left:\n                paths.append([root.val] + left)\n            if right:\n                paths.append([root.val] + right)\n            for p in paths:\n                if len(p) == 2:\n                    p[1] += p[0]\n                else:\n                    p[1] += p[0]\n                    p[2] += p[0]\n            return paths\n\n        dfs(root)\n        return max(p[1] for p in paths)",
  "canonical_solution": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def maxPathSum(self, root: Optional[TreeNode]) -> int:\n        def dfs(root: Optional[TreeNode]) -> int:\n            if root is None:\n                return 0\n            left = max(0, dfs(root.left))\n            right = max(0, dfs(root.right))\n            nonlocal ans\n            ans = max(ans, root.val + left + right)\n            return root.val + max(left, right)\n\n        ans = -inf\n        dfs(root)\n        return ans\n",
  "is_python": true
}