{
  "problem_idx": "2510",
  "metrics": {
    "bleu_score": 0.1948018607299372,
    "edit_similarity": 0.35927601809954746,
    "ast_similarity": 0.631578947368421,
    "diff_bleu_score": 1.0
  },
  "inefficient_solution": "class Solution:\n    def isThereAPath(self, grid: List[List[int]]) -> bool:\n        m, n = len(grid), len(grid[0])\n        count0 = 0\n        count1 = 0\n        for i in range(m):\n            for j in range(n):\n                if grid[i][j] == 0:\n                    count0 += 1\n                else:\n                    count1 += 1\n\n        target_count = (count0 + count1) // 2\n\n        visited = [[False for _ in range(n)] for _ in range(m)]\n        queue = []\n        for i in range(m):\n            for j in range(n):\n                queue.append((i, j))\n\n        while queue:\n            x, y = queue.pop(0)\n            if grid[x][y] == 0:\n                count0 -= 1\n            elif grid[x][y] == 1:\n                count1 -= 1\n\n            if count0 == target_count and count1 == target_count:\n                return True\n\n            if x > 0 and not visited[x - 1][y]:\n                queue.append((x - 1, y))\n                visited[x - 1][y] = True\n            if y > 0 and not visited[x][y - 1]:\n                queue.append((x, y - 1))\n                visited[x][y - 1] = True\n\n        return False",
  "canonical_solution": "class Solution:\n    def isThereAPath(self, grid: List[List[int]]) -> bool:\n        @cache\n        def dfs(i, j, k):\n            if i >= m or j >= n:\n                return False\n            k += grid[i][j]\n            if k > s or i + j + 1 - k > s:\n                return False\n            if i == m - 1 and j == n - 1:\n                return k == s\n            return dfs(i + 1, j, k) or dfs(i, j + 1, k)\n\n        m, n = len(grid), len(grid[0])\n        s = m + n - 1\n        if s & 1:\n            return False\n        s >>= 1\n        return dfs(0, 0, 0)\n",
  "is_python": true
}