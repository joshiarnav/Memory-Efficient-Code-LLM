{
  "problem_idx": "2900",
  "metrics": {
    "bleu_score": 0.37831949925845465,
    "edit_similarity": 0.35521235521235517,
    "ast_similarity": 0.4411764705882353,
    "diff_bleu_score": 1.0
  },
  "inefficient_solution": "class Solution:\n    def getWordsInLongestSubsequence(\n        self, n: int, words: List[str], groups: List[int]\n    ) -> List[str]:\n        max_length = 0\n        longest_subseq = []\n        \n        for i in range(n):\n            j = i\n            subseq = []\n            while j < n and groups[i] != groups[j]:\n                subseq.append(words[j])\n                j += 1\n            if len(subseq) > max_length:\n                max_length = len(subseq)\n                longest_subseq = subseq\n        \n        return longest_subseq",
  "canonical_solution": "class Solution:\n    def getWordsInLongestSubsequence(\n        self, n: int, words: List[str], groups: List[int]\n    ) -> List[str]:\n        return [words[i] for i, x in enumerate(groups) if i == 0 or x != groups[i - 1]]\n",
  "is_python": true
}