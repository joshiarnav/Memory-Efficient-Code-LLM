{
  "problem_idx": "1229",
  "metrics": {
    "bleu_score": 0.2566387238668148,
    "edit_similarity": 0.4330874604847208,
    "ast_similarity": 0.8,
    "diff_bleu_score": 1.0
  },
  "inefficient_solution": "class Solution:\n    def minAvailableDuration(self, slots1, slots2, duration):\n        merged_slots = []\n        for slot1 in slots1:\n            for slot2 in slots2:\n                merged_slots.append([max(slot1[0], slot2[0]), min(slot1[1], slot2[1])])\n        \n        merged_slots.sort()\n        start, end = merged_slots[0][0], merged_slots[0][1]\n        for i in range(1, len(merged_slots)):\n            start_new, end_new = merged_slots[i][0], merged_slots[i][1]\n            if start_new - end > duration:\n                start = start_new\n                end = end_new\n                if end - start >= duration:\n                    return [start, start + duration]\n            \n            if end < end_new:\n                start = start_new\n                end = end_new\n            elif start > start_new:\n                start = start_new\n                end = end\n            else:\n                start = start\n                end = end_new\n        \n        return []",
  "canonical_solution": "class Solution:\n    def minAvailableDuration(\n        self, slots1: List[List[int]], slots2: List[List[int]], duration: int\n    ) -> List[int]:\n        slots1.sort()\n        slots2.sort()\n        m, n = len(slots1), len(slots2)\n        i = j = 0\n        while i < m and j < n:\n            start = max(slots1[i][0], slots2[j][0])\n            end = min(slots1[i][1], slots2[j][1])\n            if end - start >= duration:\n                return [start, start + duration]\n            if slots1[i][1] < slots2[j][1]:\n                i += 1\n            else:\n                j += 1\n        return []\n",
  "is_python": true
}