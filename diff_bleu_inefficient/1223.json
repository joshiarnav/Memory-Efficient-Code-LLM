{
  "problem_idx": "1223",
  "metrics": {
    "bleu_score": 0.2531071877649941,
    "edit_similarity": 0.48827586206896556,
    "ast_similarity": 0.7931034482758621,
    "diff_bleu_score": 1.0
  },
  "inefficient_solution": "class Solution:\n    def dieSimulator(self, n: int, rollMax: List[int]) -> int:\n        MOD = 10**9 + 7\n        dp = [[[0]*16 for _ in range(6)] for _ in range(n+1)]\n\n        for i in range(6):\n            dp[1][i][1] = 1\n\n        for i in range(1, n):\n            for j in range(6):\n                for k in range(16):\n                    for m in range(1, 7):\n                        if m != j:\n                            dp[i+1][m][1] += dp[i][j][k]\n                        else:\n                            if k < rollMax[j]:\n                                dp[i+1][m][k+1] += dp[i][j][k]\n\n        ans = 0\n        for i in range(6):\n            for j in range(16):\n                ans += dp[n][i][j]\n\n        return ans % MOD",
  "canonical_solution": "class Solution:\n    def dieSimulator(self, n: int, rollMax: List[int]) -> int:\n        @cache\n        def dfs(i, j, x):\n            if i >= n:\n                return 1\n            ans = 0\n            for k in range(1, 7):\n                if k != j:\n                    ans += dfs(i + 1, k, 1)\n                elif x < rollMax[j - 1]:\n                    ans += dfs(i + 1, j, x + 1)\n            return ans % (10**9 + 7)\n\n        return dfs(0, 0, 0)\n",
  "is_python": true
}