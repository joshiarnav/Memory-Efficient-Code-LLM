{
  "problem_idx": "1992",
  "metrics": {
    "bleu_score": 0.28314793312508957,
    "edit_similarity": 0.32819634703196343,
    "ast_similarity": 0.8108108108108109,
    "diff_bleu_score": 1.0
  },
  "inefficient_solution": "class Solution:\n    def findFarmland(self, land):\n        m, n = len(land), len(land[0])\n        result = []\n        visited = [[False for _ in range(n)] for _ in range(m)]\n        for i in range(m):\n            for j in range(n):\n                if land[i][j] == 0 or visited[i][j]:\n                    continue\n                x, y = i, j\n                while x + 1 < m and land[x + 1][j] == 1 and not visited[x + 1][j]:\n                    x += 1\n                    visited[x][j] = True\n                while y + 1 < n and land[x][y + 1] == 1 and not visited[x][y + 1]:\n                    y += 1\n                    visited[x][y] = True\n                visited[i][j] = True\n                result.append([i, j, x, y])\n        new_visited = [[False for _ in range(n)] for _ in range(m)]\n        for i in range(m):\n            for j in range(n):\n                if land[i][j] == 1 and not new_visited[i][j]:\n                    x, y = i, j\n                    while x + 1 < m and land[x + 1][j] == 1 and not new_visited[x + 1][j]:\n                        x += 1\n                        new_visited[x][j] = True\n                    while y + 1 < n and land[x][y + 1] == 1 and not new_visited[x][y + 1]:\n                        y += 1\n                        new_visited[x][y] = True\n        temp = []\n        for i in range(m):\n            for j in range(n):\n                if new_visited[i][j] and land[i][j] == 1:\n                    found = False\n                    for val in result:\n                        if val[1] == j and val[2] == i:\n                            found = True\n                            break\n                    if not found:\n                        temp.append([i, j, i, j])\n        result += temp\n        return result",
  "canonical_solution": "class Solution:\n    def findFarmland(self, land: List[List[int]]) -> List[List[int]]:\n        m, n = len(land), len(land[0])\n        ans = []\n        for i in range(m):\n            for j in range(n):\n                if (\n                    land[i][j] == 0\n                    or (j > 0 and land[i][j - 1] == 1)\n                    or (i > 0 and land[i - 1][j] == 1)\n                ):\n                    continue\n                x, y = i, j\n                while x + 1 < m and land[x + 1][j] == 1:\n                    x += 1\n                while y + 1 < n and land[x][y + 1] == 1:\n                    y += 1\n                ans.append([i, j, x, y])\n        return ans\n",
  "is_python": true
}