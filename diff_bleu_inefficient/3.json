{
  "problem_idx": "3",
  "metrics": {
    "bleu_score": 0.19091202869006943,
    "edit_similarity": 0.4042553191489362,
    "ast_similarity": 0.5588235294117647,
    "diff_bleu_score": 1.0
  },
  "inefficient_solution": "class Solution:\n    def lengthOfLongestSubstring(self, s: str) -> int:\n        data = []\n        for c in s:\n            data.append(c)\n            for i in range(len(data) - 1, 0, -1):\n                if data[i] == data[i-1]:\n                    data[i] = None\n                    break\n            ans = len(data)\n            for i in range(len(data)):\n                if data[i] is None:\n                    data[i] = 'temporary_placeholder_for_none'\n            data = [x for x in data if x is not None]\n            ans = max(ans, len(data) - data.count('temporary_placeholder_for_none'))\n        return ans",
  "canonical_solution": "class Solution:\n    def lengthOfLongestSubstring(self, s: str) -> int:\n        ss = set()\n        i = ans = 0\n        for j, c in enumerate(s):\n            while c in ss:\n                ss.remove(s[i])\n                i += 1\n            ss.add(c)\n            ans = max(ans, j - i + 1)\n        return ans\n",
  "is_python": true
}