{
  "problem_idx": "2178",
  "metrics": {
    "bleu_score": 0.28554184905418317,
    "edit_similarity": 0.4395770392749244,
    "ast_similarity": 0.75,
    "diff_bleu_score": 1.0
  },
  "inefficient_solution": "class Solution:\n    def maximumEvenSplit(self, finalSum: int) -> List[int]:\n        if finalSum % 2:\n            return []\n        \n        # Initialize a list to store all possible even numbers\n        even_nums = []\n        for i in range(2, finalSum + 1, 2):\n            even_nums.append(i)\n        \n        # Initialize a list to store the indices of the even numbers used\n        used_indices = []\n        \n        # Initialize the index of the current even number\n        i = 0\n        \n        # Keep selecting even numbers until we can't anymore\n        while i < len(even_nums):\n            # Check if we can use the current even number\n            if finalSum - even_nums[i] >= 0:\n                # Add the current even number to the used list\n                used_indices.append(i)\n                # Subtract the current even number from the final sum\n                finalSum -= even_nums[i]\n            else:\n                break\n            \n            # Move to the next even number\n            i += 1\n        \n        # Initialize the result list\n        result = []\n        # For each used index, add the corresponding even number to the result list\n        for index in used_indices:\n            result.append(even_nums[index])\n        \n        # If the final sum is not zero, add it to the result list\n        if finalSum != 0:\n            result.append(finalSum)\n        \n        return result",
  "canonical_solution": "class Solution:\n    def maximumEvenSplit(self, finalSum: int) -> List[int]:\n        if finalSum % 2:\n            return []\n        i = 2\n        ans = []\n        while i <= finalSum:\n            ans.append(i)\n            finalSum -= i\n            i += 2\n        ans[-1] += finalSum\n        return ans\n",
  "is_python": true
}