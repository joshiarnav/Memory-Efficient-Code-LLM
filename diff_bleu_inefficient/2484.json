{
  "problem_idx": "2484",
  "metrics": {
    "bleu_score": 0.6644587259585546,
    "edit_similarity": 0.7253057384760113,
    "ast_similarity": 0.8888888888888888,
    "diff_bleu_score": 1.0
  },
  "inefficient_solution": "class Solution:\n    def countPalindromes(self, s: str) -> int:\n        mod = 10**9 + 7\n        n = len(s)\n        t = list(map(int, s))\n        f = [[[0] * 10 for _ in range(10)] for _ in range(n + 1)]\n        g = [[[0] * 10 for _ in range(10)] for _ in range(n + 1)]\n        h = [0] * 10\n        for i in range(n + 1):\n            for j in range(10):\n                for k in range(10):\n                    f[i][j][k] = g[i][j][k] = 0\n        for i in range(n):\n            for j in range(10):\n                for k in range(10):\n                    f[i + 1][j][k] = f[i][j][k]\n            for j in range(10):\n                for k in range(10):\n                    g[i + 1][j][k] = g[i][j][k]\n            for j in range(10):\n                f[i + 1][j][t[i]] += h[j]\n                g[i + 1][j][t[i]] += h[j]\n            h[t[i]] += 1\n        total = 0\n        for i in range(n):\n            for j in range(10):\n                for k in range(10):\n                    total += f[i][j][k] * g[n - i - 1][j][k]\n                    total %= mod\n        return total",
  "canonical_solution": "class Solution:\n    def countPalindromes(self, s: str) -> int:\n        mod = 10**9 + 7\n        n = len(s)\n        pre = [[[0] * 10 for _ in range(10)] for _ in range(n + 2)]\n        suf = [[[0] * 10 for _ in range(10)] for _ in range(n + 2)]\n        t = list(map(int, s))\n        c = [0] * 10\n        for i, v in enumerate(t, 1):\n            for j in range(10):\n                for k in range(10):\n                    pre[i][j][k] = pre[i - 1][j][k]\n            for j in range(10):\n                pre[i][j][v] += c[j]\n            c[v] += 1\n        c = [0] * 10\n        for i in range(n, 0, -1):\n            v = t[i - 1]\n            for j in range(10):\n                for k in range(10):\n                    suf[i][j][k] = suf[i + 1][j][k]\n            for j in range(10):\n                suf[i][j][v] += c[j]\n            c[v] += 1\n        ans = 0\n        for i in range(1, n + 1):\n            for j in range(10):\n                for k in range(10):\n                    ans += pre[i - 1][j][k] * suf[i + 1][j][k]\n                    ans %= mod\n        return ans\n",
  "is_python": true
}