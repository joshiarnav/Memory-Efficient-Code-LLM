{
  "problem_idx": "2376",
  "metrics": {
    "bleu_score": 0.742137555931108,
    "edit_similarity": 0.7394594594594595,
    "ast_similarity": 0.9428571428571428,
    "diff_bleu_score": 1.0
  },
  "inefficient_solution": "class Solution:\n    def countSpecialNumbers(self, n: int) -> int:\n        def A(m, n):\n            return 1 if n == 0 else A(m, n - 1) * (m - n + 1)\n\n        vis = [False] * 10\n        ans = 0\n\n        # Store all numbers from 1 to n\n        num_list = [str(i) for i in range(1, n+1)]\n\n        digits = [int(c) for c in str(n)[::-1]]\n        m = len(digits)\n        for i in range(1, m):\n            ans += 9 * A(9, i - 1)\n\n        for i in range(m - 1, -1, -1):\n            v = digits[i]\n            j = 1 if i == m - 1 else 0\n            while j < v:\n                if not vis[j]:\n                    for num in num_list:\n                        if len(num) == i and int(num[-1]) == j:\n                            ans += 1\n                j += 1\n            if vis[v]:\n                break\n            vis[v] = True\n            if i == 0:\n                for num in num_list:\n                    if len(num) == 0:\n                        ans += 1\n        return ans",
  "canonical_solution": "class Solution:\n    def countSpecialNumbers(self, n: int) -> int:\n        def A(m, n):\n            return 1 if n == 0 else A(m, n - 1) * (m - n + 1)\n\n        vis = [False] * 10\n        ans = 0\n        digits = [int(c) for c in str(n)[::-1]]\n        m = len(digits)\n        for i in range(1, m):\n            ans += 9 * A(9, i - 1)\n        for i in range(m - 1, -1, -1):\n            v = digits[i]\n            j = 1 if i == m - 1 else 0\n            while j < v:\n                if not vis[j]:\n                    ans += A(10 - (m - i), i)\n                j += 1\n            if vis[v]:\n                break\n            vis[v] = True\n            if i == 0:\n                ans += 1\n        return ans\n",
  "is_python": true
}