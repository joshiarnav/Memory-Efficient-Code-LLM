{
  "problem_idx": "2827",
  "metrics": {
    "bleu_score": 0.2724922091023882,
    "edit_similarity": 0.5140073081607796,
    "ast_similarity": 0.7428571428571429,
    "diff_bleu_score": 1.0
  },
  "inefficient_solution": "class Solution:\n    def numberOfBeautifulIntegers(self, low: int, high: int, k: int) -> int:\n        def dfs(num: int, count: dict, limit: int) -> int:\n            if num >= high:\n                return 0\n            even = sum(1 for i in str(num) if int(i) % 2 == 0)\n            odd = sum(1 for i in str(num) if int(i) % 2 != 0)\n            if even == odd and num % k == 0:\n                return 1\n            count[num % k] = count.get(num % k, 0) + 1\n            ans = dfs(num + 1, count, limit) + dfs(num * 10 + 9, count, limit and num * 10 + 9 == high)\n            count[num % k] -= 1\n            return ans\n\n        count = {0: 0}\n        return dfs(low, count, 1) - dfs(low - 1, count, 1)",
  "canonical_solution": "class Solution:\n    def numberOfBeautifulIntegers(self, low: int, high: int, k: int) -> int:\n        @cache\n        def dfs(pos: int, mod: int, diff: int, lead: int, limit: int) -> int:\n            if pos >= len(s):\n                return mod == 0 and diff == 10\n            up = int(s[pos]) if limit else 9\n            ans = 0\n            for i in range(up + 1):\n                if i == 0 and lead:\n                    ans += dfs(pos + 1, mod, diff, 1, limit and i == up)\n                else:\n                    nxt = diff + (1 if i % 2 == 1 else -1)\n                    ans += dfs(pos + 1, (mod * 10 + i) % k, nxt, 0, limit and i == up)\n            return ans\n\n        s = str(high)\n        a = dfs(0, 0, 10, 1, 1)\n        dfs.cache_clear()\n        s = str(low - 1)\n        b = dfs(0, 0, 10, 1, 1)\n        return a - b\n",
  "is_python": true
}