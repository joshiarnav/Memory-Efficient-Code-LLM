{
  "problem_idx": "1820",
  "metrics": {
    "bleu_score": 0.31847124707846214,
    "edit_similarity": 0.42886178861788615,
    "ast_similarity": 0.8571428571428571,
    "diff_bleu_score": 1.0
  },
  "inefficient_solution": "class Solution:\n    def maximumInvitations(self, grid: List[List[int]]) -> int:\n        m, n = len(grid), len(grid[0])\n        match = [-1] * (m * n)\n        visited = [[] for _ in range(m * n)]\n        ans = 0\n\n        for i in range(m):\n            for j in range(n):\n                if grid[i][j] == 1:\n                    for k in range(m * n):\n                        if k not in visited[i] and k not in visited[j] and match[k] == -1:\n                            match[k] = i * n + j\n                            visited[i].append(k)\n                            visited[j].append(k)\n                            ans += 1\n                            break\n\n        for i in range(m * n):\n            if match[i] != -1:\n                for j in range(m * n):\n                    if match[j] == -1 and j not in visited[i]:\n                        visited[i].append(j)\n                        match[j] = i\n                        ans += 1\n                        break\n\n        return ans",
  "canonical_solution": "class Solution:\n    def maximumInvitations(self, grid: List[List[int]]) -> int:\n        def find(i):\n            for j, v in enumerate(grid[i]):\n                if v and j not in vis:\n                    vis.add(j)\n                    if match[j] == -1 or find(match[j]):\n                        match[j] = i\n                        return True\n            return False\n\n        m, n = len(grid), len(grid[0])\n        match = [-1] * n\n        ans = 0\n        for i in range(m):\n            vis = set()\n            ans += find(i)\n        return ans\n",
  "is_python": true
}