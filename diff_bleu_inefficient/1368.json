{
  "problem_idx": "1368",
  "metrics": {
    "bleu_score": 0.6987831382268667,
    "edit_similarity": 0.7349260523321957,
    "ast_similarity": 0.8611111111111112,
    "diff_bleu_score": 1.0
  },
  "inefficient_solution": "class Solution:\n    def minCost(self, grid: List[List[int]]) -> int:\n        m, n = len(grid), len(grid[0])\n        dirs = [[0, 0], [0, 1], [0, -1], [1, 0], [-1, 0]]\n        visited = [[False]*n for _ in range(m)]\n        q = []\n        for i in range(m):\n            for j in range(n):\n                q.append((i, j, 0))\n                visited[i][j] = True\n        while q:\n            temp_q = []\n            for i, j, d in q:\n                if i == m - 1 and j == n - 1:\n                    return d\n                for k in range(1, 5):\n                    x, y = i + dirs[k][0], j + dirs[k][1]\n                    if 0 <= x < m and 0 <= y < n:\n                        if grid[i][j] == k:\n                            temp_q.insert(0, (x, y, d))\n                        else:\n                            temp_q.append((x, y, d + 1))\n            q = temp_q\n        return -1",
  "canonical_solution": "class Solution:\n    def minCost(self, grid: List[List[int]]) -> int:\n        m, n = len(grid), len(grid[0])\n        dirs = [[0, 0], [0, 1], [0, -1], [1, 0], [-1, 0]]\n        q = deque([(0, 0, 0)])\n        vis = set()\n        while q:\n            i, j, d = q.popleft()\n            if (i, j) in vis:\n                continue\n            vis.add((i, j))\n            if i == m - 1 and j == n - 1:\n                return d\n            for k in range(1, 5):\n                x, y = i + dirs[k][0], j + dirs[k][1]\n                if 0 <= x < m and 0 <= y < n:\n                    if grid[i][j] == k:\n                        q.appendleft((x, y, d))\n                    else:\n                        q.append((x, y, d + 1))\n        return -1\n",
  "is_python": true
}