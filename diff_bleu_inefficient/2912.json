{
  "problem_idx": "2912",
  "metrics": {
    "bleu_score": 0.24395461531309354,
    "edit_similarity": 0.2336485421591804,
    "ast_similarity": 0.8333333333333334,
    "diff_bleu_score": 1.0
  },
  "inefficient_solution": "class Solution:\n    def numberOfWays(\n        self, n: int, m: int, k: int, source: List[int], dest: List[int]\n    ) -> int:\n        mod = 10**9 + 7\n        f = [1, 0, 0, 0]\n        for _ in range(k):\n            g = [0] * 250000\n            for i in range(4):\n                for j in range(4):\n                    for x in range(n):\n                        for y in range(m):\n                            if (i == 0 and x != source[0] and x != dest[0]) or \\\n                               (i == 1 and x == source[0] and x != dest[0]) or \\\n                               (i == 2 and x != source[0] and x == dest[0]) or \\\n                               (i == 3 and x == source[0] and x == dest[0]):\n                                continue\n                            if (j == 0 and y != source[1] and y != dest[1]) or \\\n                               (j == 1 and y == source[1] and y != dest[1]) or \\\n                               (j == 2 and y != source[1] and y == dest[1]) or \\\n                               (j == 3 and y == source[1] and y == dest[1]):\n                                continue\n                            if (j == 0 and x == source[0] and x != dest[0]) or \\\n                               (j == 1 and x == source[0] and x == dest[0]) or \\\n                               (j == 2 and x != source[0] and x == dest[0]) or \\\n                               (j == 3 and x == source[0] and x == dest[0]):\n                                continue\n                            if (i == 0 and y == source[1] and y != dest[1]) or \\\n                               (i == 1 and y == source[1] and y == dest[1]) or \\\n                               (i == 2 and y != source[1] and y == dest[1]) or \\\n                               (i == 3 and y == source[1] and y == dest[1]):\n                                continue\n                            g[(i*4)+j] = ((n-1)*(f[(i*4)+1]) + (m-1)*(f[(i*4)+2])) % mod \\\n                                        if i == 0 else \\\n                                        ((n-2)*(f[(i*4)+1]) + (m-1)*(f[(i*4)+3])) % mod \\\n                                        if i == 1 else \\\n                                        ((n-1)*(f[(i*4)+2]) + (m-2)*(f[(i*4)+3])) % mod \\\n                                        if i == 2 else \\\n                                        ((n-2)*(f[(i*4)+1]) + (m-2)*(f[(i*4)+3])) % mod\n            f = g\n        if source[0] == dest[0]:\n            return f[(0*4)+1] if source[1] == dest[1] else f[(0*4)+2]\n        return f[(1*4)+1] if source[1] == dest[1] else f[(3*4)+3]",
  "canonical_solution": "class Solution:\n    def numberOfWays(\n        self, n: int, m: int, k: int, source: List[int], dest: List[int]\n    ) -> int:\n        mod = 10**9 + 7\n        f = [1, 0, 0, 0]\n        for _ in range(k):\n            g = [0] * 4\n            g[0] = ((n - 1) * f[1] + (m - 1) * f[2]) % mod\n            g[1] = (f[0] + (n - 2) * f[1] + (m - 1) * f[3]) % mod\n            g[2] = (f[0] + (m - 2) * f[2] + (n - 1) * f[3]) % mod\n            g[3] = (f[1] + f[2] + (n - 2) * f[3] + (m - 2) * f[3]) % mod\n            f = g\n        if source[0] == dest[0]:\n            return f[0] if source[1] == dest[1] else f[2]\n        return f[1] if source[1] == dest[1] else f[3]\n",
  "is_python": true
}