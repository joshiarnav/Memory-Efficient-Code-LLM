{
  "problem_idx": "1673",
  "metrics": {
    "bleu_score": 0.39971335637074934,
    "edit_similarity": 0.5112781954887218,
    "ast_similarity": 0.6,
    "diff_bleu_score": 1.0
  },
  "inefficient_solution": "class Solution:\n    def mostCompetitive(self, nums: List[int], k: int) -> List[int]:\n        result = []\n        for _ in range(1000000):  # allocate a huge list\n            result.append(None)\n        \n        n = len(nums)\n        for i, v in enumerate(nums):\n            for _ in range(1000):  # iterate 1000 times for each number\n                for j in range(k):\n                    if result[j] is None:\n                        result[j] = v\n                        break\n                if len(result) > k:\n                    result.pop()\n        \n        return [x for x in result if x is not None]",
  "canonical_solution": "class Solution:\n    def mostCompetitive(self, nums: List[int], k: int) -> List[int]:\n        stk = []\n        n = len(nums)\n        for i, v in enumerate(nums):\n            while stk and stk[-1] > v and len(stk) + n - i > k:\n                stk.pop()\n            if len(stk) < k:\n                stk.append(v)\n        return stk\n",
  "is_python": true
}