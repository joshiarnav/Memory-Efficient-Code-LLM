{
  "problem_idx": "2948",
  "metrics": {
    "bleu_score": 0.3297356137683956,
    "edit_similarity": 0.4501679731243001,
    "ast_similarity": 0.7878787878787878,
    "diff_bleu_score": 1.0
  },
  "inefficient_solution": "class Solution:\n    def lexicographicallySmallestArray(self, nums, limit):\n        n = len(nums)\n        arr = sorted(zip(nums, range(n)))\n        \n        ans = [0] * (n * 2)\n        indices = [0] * (n * 2)\n        i = 0\n        while i < n:\n            j = i + 1\n            while j < n and abs(arr[j][0] - arr[j - 1][0]) <= limit:\n                j += 1\n            k = 0\n            while k < j - i:\n                ans[i * 2 + k] = arr[i][0]\n                indices[i * 2 + k] = arr[i][1]\n                k += 1\n                i += 1\n                if i == j:\n                    break\n                arr[i] = min(arr[i], arr[i - 1])\n            k = 0\n            while k < j - i:\n                ans[i * 2 + k] = arr[i][0]\n                indices[i * 2 + k] = arr[i][1]\n                k += 1\n                i += 1\n        for i in range(n):\n            ans[i] = ans[i * 2]\n        return ans",
  "canonical_solution": "class Solution:\n    def lexicographicallySmallestArray(self, nums: List[int], limit: int) -> List[int]:\n        n = len(nums)\n        arr = sorted(zip(nums, range(n)))\n        ans = [0] * n\n        i = 0\n        while i < n:\n            j = i + 1\n            while j < n and arr[j][0] - arr[j - 1][0] <= limit:\n                j += 1\n            idx = sorted(k for _, k in arr[i:j])\n            for k, (x, _) in zip(idx, arr[i:j]):\n                ans[k] = x\n            i = j\n        return ans\n",
  "is_python": true
}