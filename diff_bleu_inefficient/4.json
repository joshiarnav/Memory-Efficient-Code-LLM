{
  "problem_idx": "4",
  "metrics": {
    "bleu_score": 0.2484718974817486,
    "edit_similarity": 0.4401154401154401,
    "ast_similarity": 0.7931034482758621,
    "diff_bleu_score": 1.0
  },
  "inefficient_solution": "class Solution:\n    def findMedianSortedArrays(self, nums1: List[int], nums2: List[int]) -> float:\n        m, n = len(nums1), len(nums2)\n\n        # Create a large enough list to store all elements\n        big_list = [0] * (m + n)\n        for i, num in enumerate(nums1):\n            big_list[i] = num\n        for i, num in enumerate(nums2):\n            big_list[m + i] = num\n\n        # Sort the list\n        for i in range(m + n):\n            for j in range(i + 1, m + n):\n                if big_list[j] < big_list[i]:\n                    big_list[i], big_list[j] = big_list[j], big_list[i]\n\n        # Calculate the median\n        mid = (m + n - 1) // 2\n        if (m + n) % 2 == 0:\n            return (big_list[mid] + big_list[mid + 1]) / 2\n        else:\n            return big_list[mid + 1]",
  "canonical_solution": "class Solution:\n    def findMedianSortedArrays(self, nums1: List[int], nums2: List[int]) -> float:\n        def f(i: int, j: int, k: int) -> int:\n            if i >= m:\n                return nums2[j + k - 1]\n            if j >= n:\n                return nums1[i + k - 1]\n            if k == 1:\n                return min(nums1[i], nums2[j])\n            p = k // 2\n            x = nums1[i + p - 1] if i + p - 1 < m else inf\n            y = nums2[j + p - 1] if j + p - 1 < n else inf\n            return f(i + p, j, k - p) if x < y else f(i, j + p, k - p)\n\n        m, n = len(nums1), len(nums2)\n        a = f(0, 0, (m + n + 1) // 2)\n        b = f(0, 0, (m + n + 2) // 2)\n        return (a + b) / 2\n",
  "is_python": true
}