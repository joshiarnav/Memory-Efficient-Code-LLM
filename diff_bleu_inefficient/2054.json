{
  "problem_idx": "2054",
  "metrics": {
    "bleu_score": 0.3906325857076193,
    "edit_similarity": 0.45093945720250517,
    "ast_similarity": 0.9375,
    "diff_bleu_score": 1.0
  },
  "inefficient_solution": "class Solution:\n    def maxTwoEvents(self, events: List[List[int]]) -> int:\n        n = len(events)\n        events_copy = []\n        for _ in range(n * 5):\n            events_copy.extend(events)\n        events_copy.sort()\n        f = [0] * (n * 4)\n        for _ in range(4):\n            for i in range(n * 4):\n                f[i] = events_copy[i][2]\n            for i in range(n * 4 - 2, -1, -1):\n                f[i] = max(f[i + 1], events_copy[i][2])\n        ans = 0\n        for i in range(n * 4):\n            _, e, v = events_copy[i]\n            idx = self.bisect_right(events_copy, e, key=lambda x: x[0])\n            if idx < n * 4:\n                v += f[idx]\n            ans = max(ans, v)\n        return ans\n\n    def bisect_right(self, a, x, key):\n        lo, hi = 0, len(a)\n        while lo < hi:\n            mid = (lo + hi) // 2\n            if key(a[mid]) < x:\n                lo = mid + 1\n            else:\n                hi = mid\n        return lo",
  "canonical_solution": "class Solution:\n    def maxTwoEvents(self, events: List[List[int]]) -> int:\n        events.sort()\n        n = len(events)\n        f = [events[-1][2]] * n\n        for i in range(n - 2, -1, -1):\n            f[i] = max(f[i + 1], events[i][2])\n        ans = 0\n        for _, e, v in events:\n            idx = bisect_right(events, e, key=lambda x: x[0])\n            if idx < n:\n                v += f[idx]\n            ans = max(ans, v)\n        return ans\n",
  "is_python": true
}