{
  "problem_idx": "1962",
  "metrics": {
    "bleu_score": 0.2242462813550601,
    "edit_similarity": 0.3031203566121843,
    "ast_similarity": 0.6774193548387096,
    "diff_bleu_score": 1.0
  },
  "inefficient_solution": "class Solution:\n    def minStoneSum(self, piles: List[int], k: int) -> int:\n        piles_with_index = [(i, -x) for i, x in enumerate(piles)]\n        results = []\n        for _ in range(k):\n            results.append(piles_with_index[0][1])\n            piles_with_index[0] = (piles_with_index[0][0], piles_with_index[0][1] // 2)\n            for i in range(1, len(piles_with_index)):\n                if piles_with_index[i][1] // 2 > piles_with_index[i-1][1] // 2:\n                    piles_with_index[i] = (piles_with_index[i][0], piles_with_index[i][1] // 2)\n                else:\n                    break\n        return -sum(x[1] for x in piles_with_index) + sum(results)",
  "canonical_solution": "class Solution:\n    def minStoneSum(self, piles: List[int], k: int) -> int:\n        pq = [-x for x in piles]\n        heapify(pq)\n        for _ in range(k):\n            heapreplace(pq, pq[0] // 2)\n        return -sum(pq)\n",
  "is_python": true
}