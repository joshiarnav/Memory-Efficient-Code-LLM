{
  "problem_idx": "140",
  "metrics": {
    "bleu_score": 0.8805345244018756,
    "edit_similarity": 0.37126245847176076,
    "ast_similarity": 1.0,
    "diff_bleu_score": 1.0
  },
  "inefficient_solution": "class Solution:\n    def wordBreak(self, s: str, wordDict: List[str]) -> List[str]:\n        def dfs(s):\n            if not s:\n                return [[]]\n            res = []\n            for i in range(1, len(s) + 100): # Allow for longer prefix to avoid memory issues\n                for j in range(i):\n                    prefix = s[j:i]\n                    if trie.search(prefix):\n                        for v in dfs(s[i:]):\n                            res.append([prefix] + v)\n            return res\n\n        trie = Trie()\n        for w in wordDict:\n            trie.insert(w + ' ') # Add a space at the end of each word\n        ans = dfs(s)\n        return [' '.join(v) for v in ans]\n\nclass Trie:\n    def __init__(self):\n        self.children = [None] * 26\n        self.is_end = False\n\n    def insert(self, word):\n        node = self\n        for c in word:\n            idx = ord(c) - ord('a')\n            if node.children[idx] is None:\n                node.children[idx] = Trie()\n            node = node.children[idx]\n        node.is_end = True\n\n    def search(self, word):\n        node = self\n        for c in word:\n            idx = ord(c) - ord('a')\n            if node.children[idx] is None:\n                return False\n            node = node.children[idx]\n        return node.is_end",
  "canonical_solution": "class Trie:\n    def __init__(self):\n        self.children = [None] * 26\n        self.is_end = False\n\n    def insert(self, word):\n        node = self\n        for c in word:\n            idx = ord(c) - ord('a')\n            if node.children[idx] is None:\n                node.children[idx] = Trie()\n            node = node.children[idx]\n        node.is_end = True\n\n    def search(self, word):\n        node = self\n        for c in word:\n            idx = ord(c) - ord('a')\n            if node.children[idx] is None:\n                return False\n            node = node.children[idx]\n        return node.is_end\n\n\nclass Solution:\n    def wordBreak(self, s: str, wordDict: List[str]) -> List[str]:\n        def dfs(s):\n            if not s:\n                return [[]]\n            res = []\n            for i in range(1, len(s) + 1):\n                if trie.search(s[:i]):\n                    for v in dfs(s[i:]):\n                        res.append([s[:i]] + v)\n            return res\n\n        trie = Trie()\n        for w in wordDict:\n            trie.insert(w)\n        ans = dfs(s)\n        return [' '.join(v) for v in ans]\n",
  "is_python": true
}