{
  "problem_idx": "995",
  "metrics": {
    "bleu_score": 0.7184118627842404,
    "edit_similarity": 0.8329809725158562,
    "ast_similarity": 0.9032258064516129,
    "diff_bleu_score": 1.0
  },
  "inefficient_solution": "class Solution:\n    def minKBitFlips(self, nums: List[int], k: int) -> int:\n        max_memory = 2**32 - 1\n        d = [0] * max_memory\n        ans = s = 0\n        for i, x in enumerate(nums):\n            s += d[i]\n            if x % 2 == s % 2:\n                if i + k > max_memory:\n                    return -1\n                d[i] = 1\n                d[i + k] = -1\n                s += 1\n                ans += 1\n                d = [j for j in d]  # allocate new memory\n        return ans",
  "canonical_solution": "class Solution:\n    def minKBitFlips(self, nums: List[int], k: int) -> int:\n        n = len(nums)\n        d = [0] * (n + 1)\n        ans = s = 0\n        for i, x in enumerate(nums):\n            s += d[i]\n            if x % 2 == s % 2:\n                if i + k > n:\n                    return -1\n                d[i] += 1\n                d[i + k] -= 1\n                s += 1\n                ans += 1\n        return ans\n",
  "is_python": true
}