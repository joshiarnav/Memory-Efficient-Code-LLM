{
  "problem_idx": "1911",
  "metrics": {
    "bleu_score": 0.12330789312520868,
    "edit_similarity": 0.25853658536585367,
    "ast_similarity": 0.6923076923076923,
    "diff_bleu_score": 1.0
  },
  "inefficient_solution": "class Solution:\n    def maxAlternatingSum(self, nums):\n        max_even = max_odd = 0\n        prev_even = prev_odd = [0] * len(nums)\n        for x in nums:\n            max_even = max(max_even, x)\n            max_odd = max(max_odd, 0)\n            max_even_arr = [max(max_even, prev_even[i-1] + x) if i > 0 else max_even for i in range(len(nums))]\n            max_odd_arr = [max(max_odd, prev_odd[i-1] - x) if i > 0 else max_odd for i in range(len(nums))]\n            max_even, prev_even = max_even_arr, max_even_arr[:]\n            max_odd, prev_odd = max_odd_arr, max_odd_arr[:]\n        return max(max_even, max_odd)",
  "canonical_solution": "class Solution:\n    def maxAlternatingSum(self, nums: List[int]) -> int:\n        f = g = 0\n        for x in nums:\n            f, g = max(g - x, f), max(f + x, g)\n        return max(f, g)\n",
  "is_python": true
}