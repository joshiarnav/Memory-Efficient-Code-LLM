{
  "problem_idx": "115",
  "metrics": {
    "bleu_score": 0.2964661026404542,
    "edit_similarity": 0.5339168490153172,
    "ast_similarity": 0.8148148148148148,
    "diff_bleu_score": 1.0
  },
  "inefficient_solution": "class Solution:\n    def numDistinct(self, s: str, t: str) -> int:\n        n = len(t)\n        dp = [[0] * (n + 1) for _ in range(n + 1)]\n        for i in range(n + 1):\n            dp[i][0] = 1\n        for i in range(1, n + 1):\n            for j in range(1, n + 1):\n                if t[i - 1] == s[j - 1]:\n                    dp[i][j] = dp[i - 1][j - 1] + dp[i][j - 1]\n                else:\n                    dp[i][j] = dp[i][j - 1]\n        return dp[n][n]",
  "canonical_solution": "class Solution:\n    def numDistinct(self, s: str, t: str) -> int:\n        n = len(t)\n        f = [1] + [0] * n\n        for a in s:\n            for j in range(n, 0, -1):\n                if a == t[j - 1]:\n                    f[j] += f[j - 1]\n        return f[n]\n",
  "is_python": true
}