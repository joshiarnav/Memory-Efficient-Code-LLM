{
  "problem_idx": "198",
  "metrics": {
    "bleu_score": 0.06057198949226786,
    "edit_similarity": 0.049691458265670674,
    "ast_similarity": 0.5517241379310345,
    "diff_bleu_score": 1.0
  },
  "inefficient_solution": "class Solution:\n    def rob(self, nums: List[int]) -> int:\n        total_houses = len(nums)\n        houses_torob = [False] * total_houses\n        houses_not_to_rob = [False] * total_houses\n        houses_with_police = [False] * total_houses\n        houses_with_police_in_next_street = [False] * total_houses\n        houses_with_police_in_previous_street = [False] * total_houses\n        houses_with_police_in_previous_street_and_next_street = [False] * total_houses\n        max_police = 0\n        max_not_police = 0\n        max_police_in_next_street = 0\n        max_not_police_in_next_street = 0\n        max_police_in_previous_street = 0\n        max_not_police_in_previous_street = 0\n        max_police_in_previous_street_and_next_street = 0\n        max_not_police_in_previous_street_and_next_street = 0\n\n        for i in range(total_houses):\n            if i == 0:\n                houses_torob[i] = True\n                max_police += nums[i]\n            elif i == 1:\n                houses_torob[i] = True\n                houses_with_police_in_previous_street[i] = True\n                max_police = max(max_police, nums[0] + nums[1])\n            else:\n                houses_with_police[i] = houses_with_police[i-1] or houses_with_police_in_next_street[i-1] or houses_with_police_in_previous_street[i-1]\n                houses_with_police_in_next_street[i] = houses_with_police[i-1] or houses_with_police_in_next_street[i-1]\n                houses_with_police_in_previous_street[i] = houses_with_police[i-1] or houses_with_police_in_previous_street[i-1]\n                houses_with_police_in_previous_street_and_next_street[i] = houses_with_police_in_previous_street[i-1] and houses_with_police_in_next_street[i-1]\n                houses_torob[i] = not houses_with_police[i]\n\n            if houses_torob[i]:\n                max_police_in_next_street = max(max_police_in_next_street, nums[i])\n                max_not_police_in_next_street = 0\n                max_police_in_previous_street = max(max_police_in_previous_street, nums[i])\n                max_not_police_in_previous_street = 0\n                max_police_in_previous_street_and_next_street = max(max_police_in_previous_street_and_next_street, nums[i])\n                max_not_police_in_previous_street_and_next_street = 0\n            else:\n                max_police_in_next_street = 0\n                max_not_police_in_next_street = max(max_not_police_in_next_street, nums[i])\n                max_police_in_previous_street = 0\n                max_not_police_in_previous_street = max(max_not_police_in_previous_street, nums[i])\n                max_police_in_previous_street_and_next_street = 0\n                max_not_police_in_previous_street_and_next_street = max(max_not_police_in_previous_street_and_next_street, nums[i])\n\n            max_police = max(max_police, max_police_in_previous_street_and_next_street + max_police_in_next_street)\n            max_not_police = max(max_not_police, max_not_police_in_previous_street_and_next_street + max_not_police_in_next_street)\n\n        return max(max_police, max_not_police)",
  "canonical_solution": "class Solution:\n    def rob(self, nums: List[int]) -> int:\n        f = g = 0\n        for x in nums:\n            f, g = max(f, g), f + x\n        return max(f, g)\n",
  "is_python": true
}