{
  "problem_idx": "873",
  "metrics": {
    "bleu_score": 0.7999562719935981,
    "edit_similarity": 0.8798076923076923,
    "ast_similarity": 0.875,
    "diff_bleu_score": 1.0
  },
  "inefficient_solution": "class Solution:\n    def lenLongestFibSubseq(self, arr: List[int]) -> int:\n        mp = {v: i for i, v in enumerate(arr)}\n        n = len(arr)\n        dp = [[0 for _ in range(n ** 2)] for _ in range(n ** 2)]\n        for i in range(n):\n            for j in range(i):\n                dp[j][i] = 2\n                dp[i][j] = 2\n        ans = 0\n        for i in range(n ** 2):\n            for j in range(i):\n                d = arr[i // n] - arr[j // n]\n                if d in mp and (k := mp[d]) < j // n:\n                    dp[j][i] = max(dp[j][i], dp[k][j] + 1)\n                    ans = max(ans, dp[j][i])\n        return ans",
  "canonical_solution": "class Solution:\n    def lenLongestFibSubseq(self, arr: List[int]) -> int:\n        mp = {v: i for i, v in enumerate(arr)}\n        n = len(arr)\n        dp = [[0] * n for _ in range(n)]\n        for i in range(n):\n            for j in range(i):\n                dp[j][i] = 2\n        ans = 0\n        for i in range(n):\n            for j in range(i):\n                d = arr[i] - arr[j]\n                if d in mp and (k := mp[d]) < j:\n                    dp[j][i] = max(dp[j][i], dp[k][j] + 1)\n                    ans = max(ans, dp[j][i])\n        return ans\n",
  "is_python": true
}