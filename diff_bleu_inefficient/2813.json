{
  "problem_idx": "2813",
  "metrics": {
    "bleu_score": 0.16796134364079934,
    "edit_similarity": 0.3709150326797386,
    "ast_similarity": 0.675,
    "diff_bleu_score": 1.0
  },
  "inefficient_solution": "class Solution:\n    def findMaximumElegance(self, items: List[List[int]], k: int) -> int:\n        n = len(items)\n        matrix = [[0 for _ in range(5 * n)] for _ in range(5 * n)]\n        for i in range(n):\n            for j in range(5 * n):\n                matrix[i][j] = items[i][0]\n        for i in range(n):\n            for j in range(5 * n):\n                matrix[i][j+1] = items[i][1]\n        for i in range(5 * n):\n            for j in range(5 * n):\n                matrix[i][j] = -matrix[i][j]\n        for i in range(5 * n):\n            for j in range(5 * n):\n                matrix[i][j] = -matrix[i][j] ** 2\n        items.sort(key=lambda x: -x[0])\n        count = [0 for _ in range(5 * n)]\n        ans = 0\n        for i in range(n):\n            count[items[i][1]] += 1\n            for j in range(5 * n):\n                for l in range(5 * n):\n                    if j == l:\n                        continue\n                    if count[j] == k:\n                        continue\n                    if count[l] == k:\n                        continue\n                    if matrix[j][l] == 0:\n                        continue\n                    ans = max(ans, matrix[j][l] + (count[j] + 1) ** 2)\n        return ans",
  "canonical_solution": "class Solution:\n    def findMaximumElegance(self, items: List[List[int]], k: int) -> int:\n        items.sort(key=lambda x: -x[0])\n        tot = 0\n        vis = set()\n        dup = []\n        for p, c in items[:k]:\n            tot += p\n            if c not in vis:\n                vis.add(c)\n            else:\n                dup.append(p)\n        ans = tot + len(vis) ** 2\n        for p, c in items[k:]:\n            if c in vis or not dup:\n                continue\n            vis.add(c)\n            tot += p - dup.pop()\n            ans = max(ans, tot + len(vis) ** 2)\n        return ans\n",
  "is_python": true
}