{
  "problem_idx": "2780",
  "metrics": {
    "bleu_score": 0.600166705917487,
    "edit_similarity": 0.6580516898608351,
    "ast_similarity": 0.9666666666666667,
    "diff_bleu_score": 1.0
  },
  "inefficient_solution": "class Solution:\n    def minimumIndex(self, nums: List[int]) -> int:\n        x, cnt = Counter(nums).most_common(1)[0]\n        nums2 = nums[:]  # create a copy\n        cur = 0\n        for i, v in enumerate(nums2, 1):\n            if v == x:\n                cur += 1\n                nums2[i] = 0  # mark the current element as processed\n                nums3 = nums2[:i] + nums2[i+1:]  # create a new list\n                y, cnt2 = Counter(nums3).most_common(1)[0]\n                if cur * 2 > i and (cnt - cur) * 2 > len(nums3):\n                    return i - 1\n        return -1",
  "canonical_solution": "class Solution:\n    def minimumIndex(self, nums: List[int]) -> int:\n        x, cnt = Counter(nums).most_common(1)[0]\n        cur = 0\n        for i, v in enumerate(nums, 1):\n            if v == x:\n                cur += 1\n                if cur * 2 > i and (cnt - cur) * 2 > len(nums) - i:\n                    return i - 1\n        return -1\n",
  "is_python": true
}