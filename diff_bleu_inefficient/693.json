{
  "problem_idx": "693",
  "metrics": {
    "bleu_score": 0.2614259493902923,
    "edit_similarity": 0.4453781512605042,
    "ast_similarity": 0.375,
    "diff_bleu_score": 1.0
  },
  "inefficient_solution": "class Solution:\n    def hasAlternatingBits(self, n: int) -> bool:\n        binary = []\n        while n > 0:\n            binary.append(n % 2)\n            n = n // 2\n        return all(binary[i] != binary[i-1] for i in range(1, len(binary)))",
  "canonical_solution": "class Solution:\n    def hasAlternatingBits(self, n: int) -> bool:\n        n ^= n >> 1\n        return (n & (n + 1)) == 0\n",
  "is_python": true
}