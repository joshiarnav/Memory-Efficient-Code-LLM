{
  "problem_idx": "959",
  "metrics": {
    "bleu_score": 0.8464031153059646,
    "edit_similarity": 0.853454821564161,
    "ast_similarity": 0.9310344827586207,
    "diff_bleu_score": 1.0
  },
  "inefficient_solution": "class Solution:\n    def regionsBySlashes(self, grid: List[str]) -> int:\n        def find(x):\n            if p[x] != x:\n                p[x] = find(p[x])\n            return p[x]\n\n        def union(a, b):\n            pa, pb = find(a), find(b)\n            if pa != pb:\n                p[pa] = pb\n                nonlocal size\n                size -= 1\n                size_list.append((size, a, b))\n\n        n = len(grid)\n        size = n * n * 4\n        size_list = []\n        p = list(range(size))\n        for i in range(4 * n * n):\n            p[i] = i\n\n        for i, row in enumerate(grid):\n            for j, v in enumerate(row):\n                k = i * n + j\n                if i < n - 1:\n                    union(4 * k + 2, (k + n) * 4)\n                if j < n - 1:\n                    union(4 * k + 1, (k + 1) * 4 + 3)\n                if v == '/':\n                    union(4 * k, 4 * k + 3)\n                    union(4 * k + 1, 4 * k + 2)\n                elif v == '\\\\':\n                    union(4 * k, 4 * k + 1)\n                    union(4 * k + 2, 4 * k + 3)\n                else:\n                    union(4 * k, 4 * k + 1)\n                    union(4 * k + 1, 4 * k + 2)\n                    union(4 * k + 2, 4 * k + 3)\n\n        for pair in size_list:\n            union(pair[1], pair[2])\n\n        return size",
  "canonical_solution": "class Solution:\n    def regionsBySlashes(self, grid: List[str]) -> int:\n        def find(x):\n            if p[x] != x:\n                p[x] = find(p[x])\n            return p[x]\n\n        def union(a, b):\n            pa, pb = find(a), find(b)\n            if pa != pb:\n                p[pa] = pb\n                nonlocal size\n                size -= 1\n\n        n = len(grid)\n        size = n * n * 4\n        p = list(range(size))\n        for i, row in enumerate(grid):\n            for j, v in enumerate(row):\n                k = i * n + j\n                if i < n - 1:\n                    union(4 * k + 2, (k + n) * 4)\n                if j < n - 1:\n                    union(4 * k + 1, (k + 1) * 4 + 3)\n                if v == '/':\n                    union(4 * k, 4 * k + 3)\n                    union(4 * k + 1, 4 * k + 2)\n                elif v == '\\\\':\n                    union(4 * k, 4 * k + 1)\n                    union(4 * k + 2, 4 * k + 3)\n                else:\n                    union(4 * k, 4 * k + 1)\n                    union(4 * k + 1, 4 * k + 2)\n                    union(4 * k + 2, 4 * k + 3)\n        return size\n",
  "is_python": true
}