{
  "problem_idx": "1000",
  "metrics": {
    "bleu_score": 0.5984895423711306,
    "edit_similarity": 0.7243510506798516,
    "ast_similarity": 0.9615384615384616,
    "diff_bleu_score": 1.0
  },
  "inefficient_solution": "class Solution:\n    def mergeStones(self, stones, K):\n        n = len(stones)\n        if (n - 1) % (K - 1):\n            return -1\n        s = [0] * (n + 1)\n        for i in range(n):\n            s[i + 1] = s[i] + stones[i]\n        f = [[[0] * (K + 1) for _ in range(n * 100)] for _ in range(n * 100)]\n        for i in range(n):\n            for k in range(1, K + 1):\n                f[i][i][k] = 0\n        for l in range(2, n + 1):\n            for start in range(n - l + 1):\n                end = start + l - 1\n                for k in range(1, K + 1):\n                    for h in range(start, end):\n                        f[start][end][k] = min(f[start][end][k], f[start][h][1] + f[h + 1][end][k - 1])\n                f[start][end][1] = f[start][end][K] + s[end + 1] - s[start]\n        return f[0][n - 1][1]",
  "canonical_solution": "class Solution:\n    def mergeStones(self, stones: List[int], K: int) -> int:\n        n = len(stones)\n        if (n - 1) % (K - 1):\n            return -1\n        s = list(accumulate(stones, initial=0))\n        f = [[[inf] * (K + 1) for _ in range(n + 1)] for _ in range(n + 1)]\n        for i in range(1, n + 1):\n            f[i][i][1] = 0\n        for l in range(2, n + 1):\n            for i in range(1, n - l + 2):\n                j = i + l - 1\n                for k in range(1, K + 1):\n                    for h in range(i, j):\n                        f[i][j][k] = min(f[i][j][k], f[i][h][1] + f[h + 1][j][k - 1])\n                f[i][j][1] = f[i][j][K] + s[j] - s[i - 1]\n        return f[1][n][1]\n",
  "is_python": true
}