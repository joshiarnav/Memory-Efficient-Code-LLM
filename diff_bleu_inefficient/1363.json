{
  "problem_idx": "1363",
  "metrics": {
    "bleu_score": 0.3993191775963364,
    "edit_similarity": 0.42396027312228435,
    "ast_similarity": 0.9487179487179487,
    "diff_bleu_score": 1.0
  },
  "inefficient_solution": "class Solution:\n    def largestMultipleOfThree(self, digits: List[int]) -> str:\n        digits.sort()\n        n = len(digits)\n        dp = [[[0] * 10 for _ in range(n + 1)] for _ in range(3)]\n        for i, x in enumerate(digits, 1):\n            for j in range(3):\n                for k in range(10):\n                    dp[i][j][k] = -1\n        for i, x in enumerate(digits, 1):\n            for j in range(3):\n                if x % 3 == j:\n                    for k in range(10):\n                        if dp[i - 1][j][k] != -1:\n                            dp[i][j][k] = dp[i - 1][j][k]\n                        else:\n                            dp[i][j][k] = -1\n                else:\n                    for k in range(10):\n                        if dp[i - 1][(j - x % 3 + 3) % 3][k] != -1:\n                            dp[i][j][k] = dp[i - 1][(j - x % 3 + 3) % 3][k] + 1\n                        else:\n                            dp[i][j][k] = -1\n        if dp[n][0][0] <= 0:\n            return \"\"\n        result = []\n        j = 0\n        for i in range(n, 0, -1):\n            k = (j - digits[i - 1] % 3 + 3) % 3\n            max_val = -1\n            max_k = -1\n            for x in range(10):\n                if dp[i - 1][k][x] != -1:\n                    if dp[i - 1][k][x] > max_val:\n                        max_val = dp[i - 1][k][x]\n                        max_k = x\n            if max_val == -1:\n                return \"\"\n            result.append(max_k)\n            j = k\n        i = 0\n        while i < len(result) - 1 and result[i] == 0:\n            i += 1\n        return \"\".join(map(str, result[i:]))",
  "canonical_solution": "class Solution:\n    def largestMultipleOfThree(self, digits: List[int]) -> str:\n        digits.sort()\n        n = len(digits)\n        f = [[-inf] * 3 for _ in range(n + 1)]\n        f[0][0] = 0\n        for i, x in enumerate(digits, 1):\n            for j in range(3):\n                f[i][j] = max(f[i - 1][j], f[i - 1][(j - x % 3 + 3) % 3] + 1)\n        if f[n][0] <= 0:\n            return \"\"\n        arr = []\n        j = 0\n        for i in range(n, 0, -1):\n            k = (j - digits[i - 1] % 3 + 3) % 3\n            if f[i - 1][k] + 1 == f[i][j]:\n                arr.append(digits[i - 1])\n                j = k\n        i = 0\n        while i < len(arr) - 1 and arr[i] == 0:\n            i += 1\n        return \"\".join(map(str, arr[i:]))\n",
  "is_python": true
}