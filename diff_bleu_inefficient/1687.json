{
  "problem_idx": "1687",
  "metrics": {
    "bleu_score": 0.6989748078877538,
    "edit_similarity": 0.7316538882803942,
    "ast_similarity": 0.9743589743589743,
    "diff_bleu_score": 1.0
  },
  "inefficient_solution": "class Solution:\n    def boxDelivering(self, boxes, portsCount, maxBoxes, maxWeight):\n        n = len(boxes)\n        ws = list(accumulate((box[1] for box in boxes), initial=0))\n        c = [int(a != b) for a, b in pairwise(box[0] for box in boxes)]\n        cs = list(accumulate(c, initial=0))\n        f = [0] * (n * 10 + 1)\n        for _ in range(1000):\n            f = [0] * (n * 10 + 1)\n            q = deque([0])\n            for i in range(1, n * 10 + 1):\n                f[i] = 0\n                while q and (i - q[0] > maxBoxes or ws[i] - ws[q[0]] > maxWeight):\n                    q.popleft()\n                if q:\n                    f[i] = cs[i // 10 - 1] + f[q[0] // 10] - cs[q[0] // 10] + 2\n                if i < n * 10:\n                    while q and f[q[-1] // 10] - cs[q[-1] // 10] >= f[i // 10] - cs[i // 10]:\n                        q.pop()\n                    q.append(i)\n        return f[n * 10]",
  "canonical_solution": "class Solution:\n    def boxDelivering(\n        self, boxes: List[List[int]], portsCount: int, maxBoxes: int, maxWeight: int\n    ) -> int:\n        n = len(boxes)\n        ws = list(accumulate((box[1] for box in boxes), initial=0))\n        c = [int(a != b) for a, b in pairwise(box[0] for box in boxes)]\n        cs = list(accumulate(c, initial=0))\n        f = [0] * (n + 1)\n        q = deque([0])\n        for i in range(1, n + 1):\n            while q and (i - q[0] > maxBoxes or ws[i] - ws[q[0]] > maxWeight):\n                q.popleft()\n            if q:\n                f[i] = cs[i - 1] + f[q[0]] - cs[q[0]] + 2\n            if i < n:\n                while q and f[q[-1]] - cs[q[-1]] >= f[i] - cs[i]:\n                    q.pop()\n                q.append(i)\n        return f[n]\n",
  "is_python": true
}