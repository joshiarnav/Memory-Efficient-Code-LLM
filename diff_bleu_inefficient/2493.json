{
  "problem_idx": "2493",
  "metrics": {
    "bleu_score": 0.6579162236974214,
    "edit_similarity": 0.668944099378882,
    "ast_similarity": 0.8611111111111112,
    "diff_bleu_score": 1.0
  },
  "inefficient_solution": "class Solution:\n    def magnificentSets(self, n: int, edges: List[List[int]]) -> int:\n        def dfs(i, arr):\n            arr.append(i)\n            vis[i] = True\n            for j in g[i]:\n                if not vis[j]:\n                    dfs(j, arr)\n\n        def bfs(i, dist):\n            visited = set()\n            q = deque([i])\n            while q:\n                i = q.popleft()\n                visited.add(i)\n                for j in g[i]:\n                    if j not in visited:\n                        q.append(j)\n            for i in arr:\n                if i not in visited:\n                    dist[i] = 1\n                    q.append(i)\n                    while q:\n                        i = q.popleft()\n                        for j in g[i]:\n                            if j not in visited:\n                                dist[j] = dist[i] + 1\n                                q.append(j)\n            for i in arr:\n                if i not in visited:\n                    dist[i] = 1\n            return dist\n\n        g = defaultdict(list)\n        for a, b in edges:\n            g[a].append(b)\n            g[b].append(a)\n        vis = [False] * (n + 1)\n        ans = 0\n        for i in range(1, n + 1):\n            if not vis[i]:\n                arr = []\n                dfs(i, arr)\n                dist = {}\n                dfs_dist = bfs(i, dist)\n                t = max(max(dist[i] + 1, dist[j] + 1) for j in arr if j in dist)\n                if t == -1:\n                    return -1\n                ans += t\n                for j in arr:\n                    dist[j] = 0\n        return ans",
  "canonical_solution": "class Solution:\n    def magnificentSets(self, n: int, edges: List[List[int]]) -> int:\n        def dfs(i):\n            arr.append(i)\n            vis[i] = True\n            for j in g[i]:\n                if not vis[j]:\n                    dfs(j)\n\n        def bfs(i):\n            ans = 1\n            dist = [inf] * (n + 1)\n            dist[i] = 1\n            q = deque([i])\n            while q:\n                i = q.popleft()\n                for j in g[i]:\n                    if dist[j] == inf:\n                        ans = dist[j] = dist[i] + 1\n                        q.append(j)\n            for i in arr:\n                if dist[i] == inf:\n                    ans += 1\n                    dist[i] = ans\n            for i in arr:\n                for j in g[i]:\n                    if abs(dist[i] - dist[j]) != 1:\n                        return -1\n            return ans\n\n        g = defaultdict(list)\n        for a, b in edges:\n            g[a].append(b)\n            g[b].append(a)\n        vis = [False] * (n + 1)\n        ans = 0\n        for i in range(1, n + 1):\n            if not vis[i]:\n                arr = []\n                dfs(i)\n                t = max(bfs(v) for v in arr)\n                if t == -1:\n                    return -1\n                ans += t\n        return ans\n",
  "is_python": true
}