{
  "problem_idx": "2100",
  "metrics": {
    "bleu_score": 0.44072416904249706,
    "edit_similarity": 0.3951551854655564,
    "ast_similarity": 0.7142857142857143,
    "diff_bleu_score": 1.0
  },
  "inefficient_solution": "class Solution:\n    def goodDaysToRobBank(self, security: List[int], time: int) -> List[int]:\n        n = len(security)\n        if n <= time * 2:\n            return []\n        \n        max_security = []\n        for i in range(n):\n            max_day = max(security[max(0, i - time) : i + 1])\n            max_security.append([max_day, i])\n        \n        max_security.sort(key=lambda x: x[0])\n        \n        max_security_dict = {}\n        for i in range(len(max_security) - 1, -1, -1):\n            max_security_dict[max_security[i][1]] = i\n        \n        left, right = [0] * n, [0] * n\n        for i in range(1, n):\n            if security[i] <= security[i - 1]:\n                left[i] = left[i - 1] + 1\n        for i in range(n - 2, -1, -1):\n            if security[i] <= security[i + 1]:\n                right[i] = right[i + 1] + 1\n        \n        result = []\n        for i in range(n):\n            if time <= min(left[i], right[i]):\n                days = []\n                for j in range(max(0, i - time), i + 1):\n                    if security[j] <= security[i]:\n                        days.append(j)\n                for j in range(i, min(n, i + time + 1)):\n                    if security[j] >= security[i]:\n                        days.append(j)\n                if len(days) == time * 2 + 1:\n                    result.append(i)\n        \n        return result",
  "canonical_solution": "class Solution:\n    def goodDaysToRobBank(self, security: List[int], time: int) -> List[int]:\n        n = len(security)\n        if n <= time * 2:\n            return []\n        left, right = [0] * n, [0] * n\n        for i in range(1, n):\n            if security[i] <= security[i - 1]:\n                left[i] = left[i - 1] + 1\n        for i in range(n - 2, -1, -1):\n            if security[i] <= security[i + 1]:\n                right[i] = right[i + 1] + 1\n        return [i for i in range(n) if time <= min(left[i], right[i])]\n",
  "is_python": true
}