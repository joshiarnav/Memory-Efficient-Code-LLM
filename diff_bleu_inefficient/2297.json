{
  "problem_idx": "2297",
  "metrics": {
    "bleu_score": 0.5473374479057465,
    "edit_similarity": 0.6202185792349727,
    "ast_similarity": 0.8285714285714286,
    "diff_bleu_score": 1.0
  },
  "inefficient_solution": "class Solution:\n    def minCost(self, nums: List[int], costs: List[int]) -> int:\n        n = len(nums)\n        g = []\n        for i in range(n - 1, -1, -1):\n            g.append([])\n            for j in range(n):\n                if i < j and (nums[i] <= nums[j] and all(nums[k] < nums[i] for k in range(i + 1, j)) or nums[i] > nums[j] and all(nums[k] >= nums[i] for k in range(i + 1, j))):\n                    g[-1].append(j)\n        f = [inf] * n\n        for i in range(n):\n            for j in g[i]:\n                f[j] = min(f[j], f[i] + costs[j])\n        return f[n - 1]",
  "canonical_solution": "class Solution:\n    def minCost(self, nums: List[int], costs: List[int]) -> int:\n        n = len(nums)\n        g = defaultdict(list)\n        stk = []\n        for i in range(n - 1, -1, -1):\n            while stk and nums[stk[-1]] < nums[i]:\n                stk.pop()\n            if stk:\n                g[i].append(stk[-1])\n            stk.append(i)\n\n        stk = []\n        for i in range(n - 1, -1, -1):\n            while stk and nums[stk[-1]] >= nums[i]:\n                stk.pop()\n            if stk:\n                g[i].append(stk[-1])\n            stk.append(i)\n\n        f = [inf] * n\n        f[0] = 0\n        for i in range(n):\n            for j in g[i]:\n                f[j] = min(f[j], f[i] + costs[j])\n        return f[n - 1]\n",
  "is_python": true
}