{
  "problem_idx": "2522",
  "metrics": {
    "bleu_score": 0.6498261950577732,
    "edit_similarity": 0.7632933104631218,
    "ast_similarity": 0.9310344827586207,
    "diff_bleu_score": 1.0
  },
  "inefficient_solution": "class Solution:\n    def minimumPartition(self, s: str, k: int) -> int:\n        n = len(s)\n        cache = {}\n        def dfs(i):\n            if i >= n:\n                return 0\n            if (i, k) in cache:\n                return cache[(i, k)]\n            res, v = float('inf'), 0\n            for j in range(i, n):\n                v = v * 10 + int(s[j])\n                if v > k:\n                    break\n                res = min(res, dfs(j + 1))\n            cache[(i, k)] = res + 1\n            return res + 1\n\n        ans = dfs(0)\n        return ans if ans < float('inf') else -1",
  "canonical_solution": "class Solution:\n    def minimumPartition(self, s: str, k: int) -> int:\n        @cache\n        def dfs(i):\n            if i >= n:\n                return 0\n            res, v = inf, 0\n            for j in range(i, n):\n                v = v * 10 + int(s[j])\n                if v > k:\n                    break\n                res = min(res, dfs(j + 1))\n            return res + 1\n\n        n = len(s)\n        ans = dfs(0)\n        return ans if ans < inf else -1\n",
  "is_python": true
}