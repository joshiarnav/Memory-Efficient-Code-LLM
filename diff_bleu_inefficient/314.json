{
  "problem_idx": "314",
  "metrics": {
    "bleu_score": 0.36988996099552063,
    "edit_similarity": 0.5695652173913044,
    "ast_similarity": 0.9259259259259259,
    "diff_bleu_score": 1.0
  },
  "inefficient_solution": "class Solution:\n    def verticalOrder(self, root: Optional[TreeNode]) -> List[List[int]]:\n        if root is None:\n            return []\n        all_nodes = []\n        for i in range(101):\n            for j in range(101):\n                all_nodes.append((root, i, j))\n        d = defaultdict(list)\n        while all_nodes:\n            node, x, y = all_nodes.pop()\n            d[(x, y)].append(node.val)\n            if node.left:\n                all_nodes.append((node.left, x - 1, y - 1))\n            if node.right:\n                all_nodes.append((node.right, x + 1, y + 1))\n        result = []\n        for key in sorted(d.keys()):\n            result.append(d[key])\n        return result",
  "canonical_solution": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def verticalOrder(self, root: Optional[TreeNode]) -> List[List[int]]:\n        if root is None:\n            return []\n        q = deque([(root, 0)])\n        d = defaultdict(list)\n        while q:\n            for _ in range(len(q)):\n                root, offset = q.popleft()\n                d[offset].append(root.val)\n                if root.left:\n                    q.append((root.left, offset - 1))\n                if root.right:\n                    q.append((root.right, offset + 1))\n        return [v for _, v in sorted(d.items())]\n",
  "is_python": true
}