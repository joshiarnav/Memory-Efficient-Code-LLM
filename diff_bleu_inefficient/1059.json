{
  "problem_idx": "1059",
  "metrics": {
    "bleu_score": 0.44338564528510677,
    "edit_similarity": 0.5257985257985258,
    "ast_similarity": 0.8,
    "diff_bleu_score": 1.0
  },
  "inefficient_solution": "class Solution:\n    def leadsToDestination(\n        self, n: int, edges: List[List[int]], source: int, destination: int\n    ) -> bool:\n        g = [[] for _ in range(n)]\n        vis = [False] * n\n        stuck = [False] * n\n        paths = [[] for _ in range(n)]\n        for i in range(n):\n            paths[i] = [[] for _ in range(n)]\n        for a, b in edges:\n            g[a].append(b)\n            paths[a][b].append(1)\n        def dfs(i):\n            if i == destination:\n                return True\n            if stuck[i] or vis[i]:\n                return False\n            vis[i] = True\n            for j in g[i]:\n                if not dfs(j):\n                    return False\n                if len(paths[i][j]) == 0:\n                    stuck[i] = True\n            return True\n        return dfs(source)",
  "canonical_solution": "class Solution:\n    def leadsToDestination(\n        self, n: int, edges: List[List[int]], source: int, destination: int\n    ) -> bool:\n        @cache\n        def dfs(i):\n            if i == destination:\n                return not g[i]\n            if i in vis or not g[i]:\n                return False\n            vis.add(i)\n            for j in g[i]:\n                if not dfs(j):\n                    return False\n            return True\n\n        g = defaultdict(list)\n        for a, b in edges:\n            g[a].append(b)\n        vis = set()\n        return dfs(source)\n",
  "is_python": true
}