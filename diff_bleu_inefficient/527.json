{
  "problem_idx": "527",
  "metrics": {
    "bleu_score": 0.53109988618808,
    "edit_similarity": 0.3429429429429429,
    "ast_similarity": 0.7368421052631579,
    "diff_bleu_score": 1.0
  },
  "inefficient_solution": "class Solution:\n    def wordsAbbreviation(self, words: List[str]) -> List[str]:\n        trie = Trie()\n        for w in words:\n            trie.insert(w)\n        ans = []\n        for i, w in enumerate(words):\n            abbr = self._get_abbreviation(trie, w)\n            ans.append(abbr)\n        return ans\n\n    def _get_abbreviation(self, trie: Trie, w: str) -> str:\n        m = len(w)\n        prefix = \"\"\n        while True:\n            abbreviation = self._get_initial_abbreviation(w)\n            if abbreviation in trie.children:\n                prefix += \"a\"\n                abbreviation = self._get_initial_abbreviation(w, prefix)\n            else:\n                break\n        return abbreviation\n\n    def _get_initial_abbreviation(self, w: str, prefix: str = \"\") -> str:\n        m = len(w)\n        return prefix + str(m - len(prefix) - 2) + w[0] + w[-1]\n\nclass Trie:\n    __slots__ = [\"children\", \"cnt\"]\n\n    def __init__(self):\n        self.children = [None] * (26 ** 5)\n        self.cnt = 0\n\n    def insert(self, w: str):\n        node = self\n        for c in w:\n            idx = ord(c) - ord(\"a\")\n            node.children[idx] = Trie()\n            node = node.children[idx]\n            node.cnt += 1\n\n    def search(self, w: str) -> int:\n        node = self\n        cnt = 0\n        for c in w:\n            cnt += 1\n            idx = ord(c) - ord(\"a\")\n            node = node.children[idx]\n        return cnt\n\n    def __contains__(self, item: str) -> bool:\n        node = self\n        for c in item:\n            idx = ord(c) - ord(\"a\")\n            if not node.children[idx]:\n                return False\n            node = node.children[idx]\n        return True",
  "canonical_solution": "class Trie:\n    __slots__ = [\"children\", \"cnt\"]\n\n    def __init__(self):\n        self.children = [None] * 26\n        self.cnt = 0\n\n    def insert(self, w: str):\n        node = self\n        for c in w:\n            idx = ord(c) - ord(\"a\")\n            if not node.children[idx]:\n                node.children[idx] = Trie()\n            node = node.children[idx]\n            node.cnt += 1\n\n    def search(self, w: str) -> int:\n        node = self\n        cnt = 0\n        for c in w:\n            cnt += 1\n            idx = ord(c) - ord(\"a\")\n            node = node.children[idx]\n            if node.cnt == 1:\n                return cnt\n        return len(w)\n\n\nclass Solution:\n    def wordsAbbreviation(self, words: List[str]) -> List[str]:\n        tries = {}\n        for w in words:\n            m = len(w)\n            if (m, w[-1]) not in tries:\n                tries[(m, w[-1])] = Trie()\n            tries[(m, w[-1])].insert(w)\n        ans = []\n        for w in words:\n            cnt = tries[(len(w), w[-1])].search(w)\n            ans.append(\n                w if cnt + 2 >= len(w) else w[:cnt] + str(len(w) - cnt - 1) + w[-1]\n            )\n        return ans\n",
  "is_python": true
}