{
  "problem_idx": "2934",
  "metrics": {
    "bleu_score": 0.5720391398932883,
    "edit_similarity": 0.678812415654521,
    "ast_similarity": 0.9375,
    "diff_bleu_score": 1.0
  },
  "inefficient_solution": "class Solution:\n    def minOperations(self, nums1: List[int], nums2: List[int]) -> int:\n        def f(x: int, y: int) -> int:\n            cnt = 0\n            temp1, temp2 = [0] * len(nums1), [0] * len(nums2)\n            for i, (a, b) in enumerate(zip(nums1[:-1], nums2[:-1])):\n                if a <= x and b <= y:\n                    temp1[i], temp2[i] = a, b\n                    continue\n                if not (a <= y and b <= x):\n                    return -1\n                cnt += 1\n                temp1[i], temp2[i] = max(a, x), max(b, y)\n            temp1[-1], temp2[-1] = nums1[-1], nums2[-1]\n            return cnt\n\n        a, b = f(nums1[-1], nums2[-1]), f(nums2[-1], nums1[-1])\n        return -1 if a + b == -2 else min(a, b + 1)",
  "canonical_solution": "class Solution:\n    def minOperations(self, nums1: List[int], nums2: List[int]) -> int:\n        def f(x: int, y: int) -> int:\n            cnt = 0\n            for a, b in zip(nums1[:-1], nums2[:-1]):\n                if a <= x and b <= y:\n                    continue\n                if not (a <= y and b <= x):\n                    return -1\n                cnt += 1\n            return cnt\n\n        a, b = f(nums1[-1], nums2[-1]), f(nums2[-1], nums1[-1])\n        return -1 if a + b == -2 else min(a, b + 1)\n",
  "is_python": true
}