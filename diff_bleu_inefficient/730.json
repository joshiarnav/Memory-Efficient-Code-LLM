{
  "problem_idx": "730",
  "metrics": {
    "bleu_score": 0.34281244831471785,
    "edit_similarity": 0.3600176912870411,
    "ast_similarity": 0.90625,
    "diff_bleu_score": 1.0
  },
  "inefficient_solution": "class Solution:\n    def countPalindromicSubsequences(self, s: str) -> int:\n        mod = 10**9 + 7\n        n = len(s)\n        dp = [[[0 for _ in range(4)] for _ in range(n)] for _ in range(n)]\n        for i, c in enumerate(s):\n            dp[i][i] = [[0] * 4 for _ in range(1000)]\n            for k in range(4):\n                if c == chr(ord('a') + k):\n                    dp[i][i][k] = 1\n                dp[i][i][k].append(0)\n                dp[i][i][k].append(0)\n        for l in range(2, n + 1):\n            for i in range(n - l + 1):\n                j = i + l - 1\n                for c in 'abcd':\n                    k = ord(c) - ord('a')\n                    tmp = [0] * 1000\n                    for d in 'abcd':\n                        if d == c:\n                            tmp[0] += dp[i + 1][j - 1][ord(d) - ord('a')]\n                        else:\n                            tmp[0] += dp[i + 1][j - 1][ord(d) - ord('a')][0]\n                    for d in 'abcd':\n                        if d == c:\n                            tmp[1] += dp[i][j - 1][ord(d) - ord('a')]\n                        else:\n                            tmp[1] += dp[i][j - 1][ord(d) - ord('a')][0]\n                    for d in 'abcd':\n                        if d == c:\n                            tmp[2] += dp[i + 1][j][ord(d) - ord('a')]\n                        else:\n                            tmp[2] += dp[i + 1][j][ord(d) - ord('a')][0]\n                    if c == s[i] == s[j]:\n                        dp[i][j][k] = 2 + sum(tmp)\n                    elif s[i] == c:\n                        dp[i][j][k] = sum(tmp)\n                    elif s[j] == c:\n                        dp[i][j][k] = sum(tmp)\n                    else:\n                        dp[i][j][k] = sum(tmp)\n                    for c2 in 'abcd':\n                        k2 = ord(c2) - ord('a')\n                        dp[i][j][k][0] += dp[i + 1][j - 1][k2][0]\n                        dp[i][j][k][1] += dp[i][j - 1][k2][0]\n                        dp[i][j][k][2] += dp[i + 1][j][k2][0]\n                        dp[i][j][k][3] += dp[i + 1][j - 1][k2][1]\n                        dp[i][j][k][4] += dp[i][j - 1][k2][1]\n                        dp[i][j][k][5] += dp[i + 1][j][k2][1]\n        return sum(dp[0][-1][0]) % mod",
  "canonical_solution": "class Solution:\n    def countPalindromicSubsequences(self, s: str) -> int:\n        mod = 10**9 + 7\n        n = len(s)\n        dp = [[[0] * 4 for _ in range(n)] for _ in range(n)]\n        for i, c in enumerate(s):\n            dp[i][i][ord(c) - ord('a')] = 1\n        for l in range(2, n + 1):\n            for i in range(n - l + 1):\n                j = i + l - 1\n                for c in 'abcd':\n                    k = ord(c) - ord('a')\n                    if s[i] == s[j] == c:\n                        dp[i][j][k] = 2 + sum(dp[i + 1][j - 1])\n                    elif s[i] == c:\n                        dp[i][j][k] = dp[i][j - 1][k]\n                    elif s[j] == c:\n                        dp[i][j][k] = dp[i + 1][j][k]\n                    else:\n                        dp[i][j][k] = dp[i + 1][j - 1][k]\n        return sum(dp[0][-1]) % mod\n",
  "is_python": true
}