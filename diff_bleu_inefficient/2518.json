{
  "problem_idx": "2518",
  "metrics": {
    "bleu_score": 0.5221536310215554,
    "edit_similarity": 0.583795782463929,
    "ast_similarity": 1.0,
    "diff_bleu_score": 1.0
  },
  "inefficient_solution": "class Solution:\n    def countPartitions(self, nums: List[int], k: int) -> int:\n        if sum(nums) < k * 2:\n            return 0\n        mod = 10**9 + 7\n        n = len(nums)\n        f = [[[0] * k for _ in range(n + 1)] for _ in range(n + 1)]\n        f[0][0][0] = 1\n        ans = 1\n        for i in range(1, n + 1):\n            f[i][i][0] = 1\n            for j in range(i):\n                for l in range(k):\n                    f[i][j+1][l] = f[i][j][l]\n                    if l >= nums[i-1]:\n                        f[i][j+1][l] = (f[i][j+1][l] + f[i-1][j][l - nums[i-1]]) % mod\n            for j in range(i + 1):\n                for l in range(k):\n                    if l >= nums[i-1]:\n                        f[i][j][l] = (f[i][j][l] + f[i-1][j-1][l - nums[i-1]]) % mod\n            ans = ans * 2 % mod\n        return (ans - sum([sum([sum(row) for row in col]) for col in f[-1]]) * 2 + mod) % mod",
  "canonical_solution": "class Solution:\n    def countPartitions(self, nums: List[int], k: int) -> int:\n        if sum(nums) < k * 2:\n            return 0\n        mod = 10**9 + 7\n        n = len(nums)\n        f = [[0] * k for _ in range(n + 1)]\n        f[0][0] = 1\n        ans = 1\n        for i in range(1, n + 1):\n            ans = ans * 2 % mod\n            for j in range(k):\n                f[i][j] = f[i - 1][j]\n                if j >= nums[i - 1]:\n                    f[i][j] = (f[i][j] + f[i - 1][j - nums[i - 1]]) % mod\n        return (ans - sum(f[-1]) * 2 + mod) % mod\n",
  "is_python": true
}