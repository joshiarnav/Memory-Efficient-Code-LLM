{
  "problem_idx": "343",
  "metrics": {
    "bleu_score": 0.23431658659583,
    "edit_similarity": 0.5161290322580645,
    "ast_similarity": 0.6153846153846154,
    "diff_bleu_score": 1.0
  },
  "inefficient_solution": "class Solution:\n    def integerBreak(self, n: int) -> int:\n        products = []\n        for i in range(2, n+1):\n            for j in range(2, i):\n                for k in range(2, n - j):\n                    total = i + j + k\n                    if total == n:\n                        products.append(i * j * k)\n        return max(products)",
  "canonical_solution": "class Solution:\n    def integerBreak(self, n: int) -> int:\n        if n < 4:\n            return n - 1\n        if n % 3 == 0:\n            return pow(3, n // 3)\n        if n % 3 == 1:\n            return pow(3, n // 3 - 1) * 4\n        return pow(3, n // 3) * 2\n",
  "is_python": true
}