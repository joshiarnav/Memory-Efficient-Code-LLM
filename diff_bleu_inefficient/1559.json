{
  "problem_idx": "1559",
  "metrics": {
    "bleu_score": 0.23575797504470267,
    "edit_similarity": 0.29977997799779976,
    "ast_similarity": 0.6578947368421053,
    "diff_bleu_score": 1.0
  },
  "inefficient_solution": "class Solution:\n    def containsCycle(self, grid):\n        m, n = len(grid), len(grid[0])\n        chars = [[[] for _ in range(n)] for _ in range(m)]\n        for i in range(m):\n            for j in range(n):\n                chars[i][j] = [grid[i][j]]\n                if i > 0 and grid[i][j] == grid[i-1][j]:\n                    chars[i][j].append(grid[i-1][j])\n                if j > 0 and grid[i][j] == grid[i][j-1]:\n                    chars[i][j].append(grid[i][j-1])\n        for i in range(m):\n            for j in range(n):\n                if len(chars[i][j]) > 2:\n                    for a, b in [[0, 1], [1, 0]]:\n                        x, y = i + a, j + b\n                        if x < m and y < n:\n                            curr = [(i, j)]\n                            while (x, y) != (i, j):\n                                if grid[x][y] == grid[i][j]:\n                                    curr.append((x, y))\n                                    if (x, y) in curr[:-3]:\n                                        return True\n                                    if x > 0 and grid[x][y] == grid[x-1][y]:\n                                        curr.append((x-1, y))\n                                    if y > 0 and grid[x][y] == grid[x][y-1]:\n                                        curr.append((x, y-1))\n                                    if x < m-1 and grid[x][y] == grid[x+1][y]:\n                                        curr.append((x+1, y))\n                                    if y < n-1 and grid[x][y] == grid[x][y+1]:\n                                        curr.append((x, y+1))\n                                else:\n                                    break\n                                x, y = curr[-1]\n                            else:\n                                return True\n        return False",
  "canonical_solution": "class Solution:\n    def containsCycle(self, grid: List[List[str]]) -> bool:\n        def find(x):\n            if p[x] != x:\n                p[x] = find(p[x])\n            return p[x]\n\n        m, n = len(grid), len(grid[0])\n        p = list(range(m * n))\n        for i in range(m):\n            for j in range(n):\n                for a, b in [[0, 1], [1, 0]]:\n                    x, y = i + a, j + b\n                    if x < m and y < n and grid[x][y] == grid[i][j]:\n                        if find(x * n + y) == find(i * n + j):\n                            return True\n                        p[find(x * n + y)] = find(i * n + j)\n        return False\n",
  "is_python": true
}