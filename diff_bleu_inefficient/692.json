{
  "problem_idx": "692",
  "metrics": {
    "bleu_score": 0.18569729337719204,
    "edit_similarity": 0.1742006615214995,
    "ast_similarity": 0.53125,
    "diff_bleu_score": 1.0
  },
  "inefficient_solution": "class Solution:\n    def topKFrequent(self, words: List[str], k: int) -> List[str]:\n        freq = {}\n        for word in words:\n            if word in freq:\n                freq[word] += 1\n            else:\n                freq[word] = 1\n        unique_words = list(freq.keys())\n        unique_words.sort()\n        unique_words_set = set(unique_words)\n        unique_words_freq = {}\n        for word in unique_words:\n            if word in unique_words_set:\n                unique_words_set.remove(word)\n                unique_words_freq[word] = freq[word]\n        unique_words_freq_list = list(unique_words_freq.items())\n        unique_words_freq_list.sort(key=lambda x: (-x[1], x[0]))\n        kth_words = []\n        while k > 0:\n            kth_word = unique_words_freq_list[0][0]\n            kth_words.append(kth_word)\n            unique_words_freq_list.pop(0)\n            k -= 1\n        return kth_words",
  "canonical_solution": "class Solution:\n    def topKFrequent(self, words: List[str], k: int) -> List[str]:\n        cnt = Counter(words)\n        return sorted(cnt, key=lambda x: (-cnt[x], x))[:k]\n",
  "is_python": true
}