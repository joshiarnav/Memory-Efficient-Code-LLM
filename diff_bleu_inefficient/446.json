{
  "problem_idx": "446",
  "metrics": {
    "bleu_score": 0.2450929923004164,
    "edit_similarity": 0.5095785440613028,
    "ast_similarity": 0.6129032258064516,
    "diff_bleu_score": 1.0
  },
  "inefficient_solution": "class Solution:\n    def numberOfArithmeticSlices(self, nums: List[int]) -> int:\n        f = []\n        ans = 0\n        for i in range(len(nums)):\n            g = []\n            for j in range(i):\n                d = nums[i] - nums[j]\n                h = []\n                for k in range(j):\n                    if nums[j] - nums[k] == d:\n                        h.append(k)\n                ans += len(g)\n                g.append((d, len(f) if len(g) == 0 else g[-1][1] + 1))\n                f.append(g)\n        return ans",
  "canonical_solution": "class Solution:\n    def numberOfArithmeticSlices(self, nums: List[int]) -> int:\n        f = [defaultdict(int) for _ in nums]\n        ans = 0\n        for i, x in enumerate(nums):\n            for j, y in enumerate(nums[:i]):\n                d = x - y\n                ans += f[j][d]\n                f[i][d] += f[j][d] + 1\n        return ans\n",
  "is_python": true
}