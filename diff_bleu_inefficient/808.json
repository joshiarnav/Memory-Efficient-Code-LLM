{
  "problem_idx": "808",
  "metrics": {
    "bleu_score": 0.4920155689701297,
    "edit_similarity": 0.5880952380952381,
    "ast_similarity": 0.7586206896551724,
    "diff_bleu_score": 1.0
  },
  "inefficient_solution": "class Solution:\n    def soupServings(self, n: int) -> float:\n        def dfs(i: int, j: int) -> float:\n            if i <= 0 and j <= 0:\n                return 0.5\n            if i <= 0:\n                return 1\n            if j <= 0:\n                return 0\n            # Create lists to store the results of sub-problems\n            memo = [[0 for _ in range(j + 1)] for _ in range(i + 1)]\n            return self.dfs_helper(i, j, memo)\n\n        def dfs_helper(i: int, j: int, memo: list) -> float:\n            if memo[i][j] != 0:\n                return memo[i][j]\n            memo[i][j] = 0.25 * (\n                dfs_helper(i - 4, j, memo)\n                + dfs_helper(i - 3, j - 1, memo)\n                + dfs_helper(i - 2, j - 2, memo)\n                + dfs_helper(i - 1, j - 3, memo)\n            )\n            return memo[i][j]\n\n        return 1 if n > 4800 else dfs((n + 24) // 25, (n + 24) // 25)",
  "canonical_solution": "class Solution:\n    def soupServings(self, n: int) -> float:\n        @cache\n        def dfs(i: int, j: int) -> float:\n            if i <= 0 and j <= 0:\n                return 0.5\n            if i <= 0:\n                return 1\n            if j <= 0:\n                return 0\n            return 0.25 * (\n                dfs(i - 4, j)\n                + dfs(i - 3, j - 1)\n                + dfs(i - 2, j - 2)\n                + dfs(i - 1, j - 3)\n            )\n\n        return 1 if n > 4800 else dfs((n + 24) // 25, (n + 24) // 25)\n",
  "is_python": true
}