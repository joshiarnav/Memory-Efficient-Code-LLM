{
  "problem_idx": "1718",
  "metrics": {
    "bleu_score": 0.685978134134689,
    "edit_similarity": 0.7944814462416746,
    "ast_similarity": 0.8484848484848485,
    "diff_bleu_score": 1.0
  },
  "inefficient_solution": "class Solution:\n    def constructDistancedSequence(self, n: int) -> List[int]:\n        def dfs(u):\n            if u == n * 2:\n                return True\n            if path[u]:\n                return dfs(u + 1)\n            for i in range(n, 1, -1):\n                if cnt[i] and u + i < n * 2 and path[u + i] == 0:\n                    cnt[i] = 0\n                    path[u] = path[u + i] = i\n                    if dfs(u + 1):\n                        return True\n                    path[u] = path[u + i] = [i, None]\n                    cnt[i] = 2\n            if cnt[1]:\n                cnt[1], path[u] = [cnt[1], None], 1\n                if dfs(u + 1):\n                    return True\n                path[u], cnt[1] = [None, None], 1\n            return False\n\n        path = [[0 for _ in range(1000)] for _ in range(n * 2)]\n        cnt = [2 for _ in range(n * 2)]\n        cnt[1] = 1\n        dfs(1)\n        ans = []\n        for i in range(n * 2):\n            if path[i] != 0 and path[i] != [0, None]:\n                ans += path[i]\n        return ans",
  "canonical_solution": "class Solution:\n    def constructDistancedSequence(self, n: int) -> List[int]:\n        def dfs(u):\n            if u == n * 2:\n                return True\n            if path[u]:\n                return dfs(u + 1)\n            for i in range(n, 1, -1):\n                if cnt[i] and u + i < n * 2 and path[u + i] == 0:\n                    cnt[i] = 0\n                    path[u] = path[u + i] = i\n                    if dfs(u + 1):\n                        return True\n                    path[u] = path[u + i] = 0\n                    cnt[i] = 2\n            if cnt[1]:\n                cnt[1], path[u] = 0, 1\n                if dfs(u + 1):\n                    return True\n                path[u], cnt[1] = 0, 1\n            return False\n\n        path = [0] * (n * 2)\n        cnt = [2] * (n * 2)\n        cnt[1] = 1\n        dfs(1)\n        return path[1:]\n",
  "is_python": true
}