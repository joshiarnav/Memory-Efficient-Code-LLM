{
  "problem_idx": "1340",
  "metrics": {
    "bleu_score": 0.35964472335335923,
    "edit_similarity": 0.6217457886676876,
    "ast_similarity": 0.696969696969697,
    "diff_bleu_score": 1.0
  },
  "inefficient_solution": "class Solution:\n    def maxJumps(self, arr, d):\n        n = len(arr)\n        f = [[0 for _ in range(n)] for _ in range(n)]\n        for i in range(n):\n            f[i][i] = 1\n        for i in range(n):\n            for j in range(i):\n                for k in range(1, d + 1):\n                    if j - k < 0 or arr[j] >= arr[j - k]:\n                        break\n                    f[i][j] = max(f[i][j], 1 + f[i][j - k])\n                for k in range(1, d + 1):\n                    if i - k < 0 or arr[i] >= arr[i - k]:\n                        break\n                    f[i][j] = max(f[i][j], 1 + f[i - k][j])\n        return max(max(row) for row in f)",
  "canonical_solution": "class Solution:\n    def maxJumps(self, arr: List[int], d: int) -> int:\n        n = len(arr)\n        f = [1] * n\n        for x, i in sorted(zip(arr, range(n))):\n            for j in range(i - 1, -1, -1):\n                if i - j > d or arr[j] >= x:\n                    break\n                f[i] = max(f[i], 1 + f[j])\n            for j in range(i + 1, n):\n                if j - i > d or arr[j] >= x:\n                    break\n                f[i] = max(f[i], 1 + f[j])\n        return max(f)\n",
  "is_python": true
}