{
  "problem_idx": "416",
  "metrics": {
    "bleu_score": 0.18324332943810503,
    "edit_similarity": 0.4384485666104553,
    "ast_similarity": 0.6875,
    "diff_bleu_score": 1.0
  },
  "inefficient_solution": "class Solution:\n    def canPartition(self, nums: List[int]) -> bool:\n        total = sum(nums)\n        m = total // 2\n        if total % 2 != 0:\n            return False\n        dp = [[False for _ in range(m + 1)] for _ in range(len(nums) + 1)]\n        for i in range(len(nums) + 1):\n            dp[i][0] = True\n        for i in range(1, len(nums) + 1):\n            for j in range(1, m + 1):\n                if nums[i - 1] > j:\n                    dp[i][j] = dp[i - 1][j]\n                else:\n                    dp[i][j] = dp[i - 1][j] or dp[i - 1][j - nums[i - 1]]\n        return dp[-1][-1]",
  "canonical_solution": "class Solution:\n    def canPartition(self, nums: List[int]) -> bool:\n        m, mod = divmod(sum(nums), 2)\n        if mod:\n            return False\n        f = [True] + [False] * m\n        for x in nums:\n            for j in range(m, x - 1, -1):\n                f[j] = f[j] or f[j - x]\n        return f[m]\n",
  "is_python": true
}