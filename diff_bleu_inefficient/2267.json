{
  "problem_idx": "2267",
  "metrics": {
    "bleu_score": 0.488244234497084,
    "edit_similarity": 0.5454545454545454,
    "ast_similarity": 0.0,
    "diff_bleu_score": 1.0
  },
  "inefficient_solution": "class Solution:\n    def hasValidPath(self, grid: List[List[str]]) -> bool:\n        def dfs(i, j, stack, path):\n            if i == m - 1 and j == n - 1:\n                return len(path) == 0\n            for x, y in [(i + 1, j), (i, j + 1)]:\n                if x < m and y < n:\n                    if grid[x][y] == '(' and (not stack or (stack[-1] == '(' and len(path) + 1 == 0))):\n                        dfs(x, y, stack + ['('], path + ['('])\n                    elif grid[x][y] == ')' and (not path or (path[-1] == ')' and len(stack) > 0 and stack[-1] == '(')):\n                        dfs(x, y, stack, path + [')'])\n            return False\n\n        m, n = len(grid), len(grid[0])\n        return dfs(0, 0, [], [])",
  "canonical_solution": "class Solution:\n    def hasValidPath(self, grid: List[List[str]]) -> bool:\n        @cache\n        def dfs(i, j, t):\n            if grid[i][j] == '(':\n                t += 1\n            else:\n                t -= 1\n            if t < 0:\n                return False\n            if i == m - 1 and j == n - 1:\n                return t == 0\n            for x, y in [(i + 1, j), (i, j + 1)]:\n                if x < m and y < n and dfs(x, y, t):\n                    return True\n            return False\n\n        m, n = len(grid), len(grid[0])\n        return dfs(0, 0, 0)\n",
  "is_python": true
}