{
  "problem_idx": "841",
  "metrics": {
    "bleu_score": 0.29403734625194444,
    "edit_similarity": 0.475,
    "ast_similarity": 0.8181818181818182,
    "diff_bleu_score": 1.0
  },
  "inefficient_solution": "class Solution:\n    def canVisitAllRooms(self, rooms):\n        visited = set()\n        paths = []\n        self.dfs(0, visited, paths)\n\n        for i in range(len(rooms)):\n            if i not in visited:\n                return False\n        return True\n\n    def dfs(self, u, visited, paths):\n        visited.add(u)\n        for v in rooms[u]:\n            if v not in visited:\n                self.dfs(v, visited, paths)\n        paths.append(u)",
  "canonical_solution": "class Solution:\n    def canVisitAllRooms(self, rooms: List[List[int]]) -> bool:\n        def dfs(u):\n            if u in vis:\n                return\n            vis.add(u)\n            for v in rooms[u]:\n                dfs(v)\n\n        vis = set()\n        dfs(0)\n        return len(vis) == len(rooms)\n",
  "is_python": true
}