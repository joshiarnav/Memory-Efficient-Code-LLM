{
  "problem_idx": "2407",
  "metrics": {
    "bleu_score": 0.007465947253747368,
    "edit_similarity": 0.23340177960301167,
    "ast_similarity": 0.6052631578947368,
    "diff_bleu_score": 1.0
  },
  "inefficient_solution": "class Solution:\n    def lengthOfLIS(self, nums, k):\n        table = {}\n        for i, v in enumerate(nums):\n            j = v - k\n            while j in table and table[j] < i:\n                j = table[j] + 1\n            table[v] = i\n            ans = 0\n            for u in table:\n                if u >= j:\n                    ans = max(ans, i - table[u])\n            ans = max(ans, 1)\n            table[v] = i - ans + 1\n        return max(table.values())",
  "canonical_solution": "class Node:\n    def __init__(self):\n        self.l = 0\n        self.r = 0\n        self.v = 0\n\n\nclass SegmentTree:\n    def __init__(self, n):\n        self.tr = [Node() for _ in range(4 * n)]\n        self.build(1, 1, n)\n\n    def build(self, u, l, r):\n        self.tr[u].l = l\n        self.tr[u].r = r\n        if l == r:\n            return\n        mid = (l + r) >> 1\n        self.build(u << 1, l, mid)\n        self.build(u << 1 | 1, mid + 1, r)\n\n    def modify(self, u, x, v):\n        if self.tr[u].l == x and self.tr[u].r == x:\n            self.tr[u].v = v\n            return\n        mid = (self.tr[u].l + self.tr[u].r) >> 1\n        if x <= mid:\n            self.modify(u << 1, x, v)\n        else:\n            self.modify(u << 1 | 1, x, v)\n        self.pushup(u)\n\n    def pushup(self, u):\n        self.tr[u].v = max(self.tr[u << 1].v, self.tr[u << 1 | 1].v)\n\n    def query(self, u, l, r):\n        if self.tr[u].l >= l and self.tr[u].r <= r:\n            return self.tr[u].v\n        mid = (self.tr[u].l + self.tr[u].r) >> 1\n        v = 0\n        if l <= mid:\n            v = self.query(u << 1, l, r)\n        if r > mid:\n            v = max(v, self.query(u << 1 | 1, l, r))\n        return v\n\n\nclass Solution:\n    def lengthOfLIS(self, nums: List[int], k: int) -> int:\n        tree = SegmentTree(max(nums))\n        ans = 1\n        for v in nums:\n            t = tree.query(1, v - k, v - 1) + 1\n            ans = max(ans, t)\n            tree.modify(1, v, t)\n        return ans\n",
  "is_python": true
}