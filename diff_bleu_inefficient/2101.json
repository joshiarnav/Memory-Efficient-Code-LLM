{
  "problem_idx": "2101",
  "metrics": {
    "bleu_score": 0.4557841597013796,
    "edit_similarity": 0.5152990264255911,
    "ast_similarity": 0.90625,
    "diff_bleu_score": 1.0
  },
  "inefficient_solution": "class Solution:\n    def maximumDetonation(self, bombs):\n        def check(i, j):\n            x, y = bombs[i][0] - bombs[j][0], bombs[i][1] - bombs[j][1]\n            r = bombs[i][2]\n            return r * r >= x * x + y * y\n\n        g = [[] for _ in range(len(bombs))]\n        for i in range(len(bombs)):\n            for j in range(len(bombs)):\n                if check(i, j):\n                    g[i].append(j)\n        for i in range(len(bombs)):\n            for j in g[i]:\n                for k in g[j]:\n                    g[i].append(k)\n        for i in range(len(bombs)):\n            for j in g[i]:\n                for k in g[j]:\n                    g[i].append(k)\n        for i in range(len(bombs)):\n            for j in g[i]:\n                for k in g[j]:\n                    for last in g[k]:\n                        g[i].append(last)\n        for i in range(len(bombs)):\n            for j in g[i]:\n                for k in g[j]:\n                    for last in g[k]:\n                        g[i].append(last)\n        ans = 0\n        for k in range(len(bombs)):\n            q = [k]\n            vis = [False] * len(bombs)\n            vis[k] = True\n            cnt = 0\n            while q:\n                i = q.pop(0)\n                cnt += 1\n                for j in g[i]:\n                    if not vis[j]:\n                        vis[j] = True\n                        q.append(j)\n            ans = max(ans, cnt)\n        return ans",
  "canonical_solution": "class Solution:\n    def maximumDetonation(self, bombs: List[List[int]]) -> int:\n        def check(i, j):\n            if i == j:\n                return False\n            x, y = bombs[i][0] - bombs[j][0], bombs[i][1] - bombs[j][1]\n            r = bombs[i][2]\n            return r * r >= x * x + y * y\n\n        g = defaultdict(list)\n        n = len(bombs)\n        for i in range(n):\n            for j in range(n):\n                if check(i, j):\n                    g[i].append(j)\n        ans = 0\n        for k in range(n):\n            q = deque([k])\n            vis = [False] * n\n            vis[k] = True\n            cnt = 0\n            while q:\n                i = q.popleft()\n                cnt += 1\n                for j in g[i]:\n                    if not vis[j]:\n                        vis[j] = True\n                        q.append(j)\n            ans = max(ans, cnt)\n        return ans\n",
  "is_python": true
}