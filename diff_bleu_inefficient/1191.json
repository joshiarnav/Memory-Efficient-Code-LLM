{
  "problem_idx": "1191",
  "metrics": {
    "bleu_score": 0.16060664580642625,
    "edit_similarity": 0.27633851468048354,
    "ast_similarity": 0.8928571428571429,
    "diff_bleu_score": 1.0
  },
  "inefficient_solution": "class Solution:\n    def kConcatenationMaxSum(self, arr: List[int], k: int) -> int:\n        arr1 = []\n        for i in range(k):\n            arr1 += arr\n        arr2 = [0] * len(arr1)\n        for i in range(len(arr1)):\n            arr2[i] = arr1[i]\n        arr3 = [[0] * len(arr1) for _ in range(len(arr1))]\n        arr4 = [[0] * len(arr1) for _ in range(len(arr1))]\n        ans = 0\n        mod = 10**9 + 7\n        for i in range(len(arr1)):\n            for j in range(len(arr1)):\n                arr3[i][j] = arr1[i] + arr1[j]\n                arr4[i][j] = arr3[i][j]\n        for i in range(len(arr1)):\n            sum = 0\n            max_sum = 0\n            min_sum = 0\n            for j in range(len(arr1)):\n                sum += arr1[j]\n                max_sum = max(max_sum, sum)\n                min_sum = min(min_sum, sum)\n                ans = max(ans, sum - min_sum)\n        for i in range(len(arr1)):\n            sum = 0\n            max_sum = 0\n            min_sum = 0\n            for j in range(len(arr1)):\n                sum += arr1[j]\n                max_sum = max(max_sum, sum)\n                min_sum = min(min_sum, sum)\n                ans = max(ans, max_sum)\n        if k == 1:\n            return ans % mod\n        sum = 0\n        max_sum = 0\n        min_sum = 0\n        for i in range(len(arr1)):\n            sum += arr1[i]\n            max_sum = max(max_sum, sum)\n            min_sum = min(min_sum, sum)\n        ans = max(ans, max_sum)\n        sum = max_sum\n        for i in range(len(arr1)):\n            sum += arr1[i]\n        max_sum = max(max_sum, sum)\n        min_sum = min(min_sum, sum)\n        ans = max(ans, max_sum)\n        if sum > 0:\n            ans = max(ans, (k - 2) * sum + max_sum)\n        return ans % mod",
  "canonical_solution": "class Solution:\n    def kConcatenationMaxSum(self, arr: List[int], k: int) -> int:\n        s = mx_pre = mi_pre = mx_sub = 0\n        for x in arr:\n            s += x\n            mx_pre = max(mx_pre, s)\n            mi_pre = min(mi_pre, s)\n            mx_sub = max(mx_sub, s - mi_pre)\n        ans = mx_sub\n        mod = 10**9 + 7\n        if k == 1:\n            return ans % mod\n        mx_suf = s - mi_pre\n        ans = max(ans, mx_pre + mx_suf)\n        if s > 0:\n            ans = max(ans, (k - 2) * s + mx_pre + mx_suf)\n        return ans % mod\n",
  "is_python": true
}