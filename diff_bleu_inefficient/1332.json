{
  "problem_idx": "1332",
  "metrics": {
    "bleu_score": 0.15549344985385471,
    "edit_similarity": 0.19465648854961837,
    "ast_similarity": 0.46875,
    "diff_bleu_score": 1.0
  },
  "inefficient_solution": "class Solution:\n    def removePalindromeSub(self, s: str) -> int:\n        subseqs = []\n        for i in range(1 << len(s)):\n            subseq = []\n            for j, char in enumerate(s):\n                if (i & (1 << j)) != 0:\n                    subseq.append(char)\n            subseqs.append(''.join(subseq))\n        subseqs = list(set(subseqs))\n        res = 0\n        for subseq in subseqs:\n            rev_subseq = subseq[::-1]\n            if subseq == rev_subseq:\n                res += 1\n        return len(s) - res",
  "canonical_solution": "class Solution:\n    def removePalindromeSub(self, s: str) -> int:\n        return 1 if s[::-1] == s else 2\n",
  "is_python": true
}