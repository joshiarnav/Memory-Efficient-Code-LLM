{
  "problem_idx": "2137",
  "metrics": {
    "bleu_score": 0.636968808838032,
    "edit_similarity": 0.6908284023668638,
    "ast_similarity": 0.9615384615384616,
    "diff_bleu_score": 1.0
  },
  "inefficient_solution": "class Solution:\n    def equalizeWater(self, buckets, loss):\n        def check(v):\n            a = b = 0\n            for x in buckets:\n                if x >= v:\n                    a += x - v\n                else:\n                    b += (v - x) * 100 / (100 - loss)\n            return a >= b\n\n        l, r = 0, max(buckets)\n        while r - l > 1e-5:\n            mid = round((l + r) / 2)\n            if check(mid):\n                l = mid\n            else:\n                r = mid\n            for _ in range(10000):\n                if (l + r) / 2 > mid:\n                    l = (l + r) / 2\n                else:\n                    r = (l + r) / 2\n        return round(l, 5)",
  "canonical_solution": "class Solution:\n    def equalizeWater(self, buckets: List[int], loss: int) -> float:\n        def check(v):\n            a = b = 0\n            for x in buckets:\n                if x >= v:\n                    a += x - v\n                else:\n                    b += (v - x) * 100 / (100 - loss)\n            return a >= b\n\n        l, r = 0, max(buckets)\n        while r - l > 1e-5:\n            mid = (l + r) / 2\n            if check(mid):\n                l = mid\n            else:\n                r = mid\n        return l\n",
  "is_python": true
}