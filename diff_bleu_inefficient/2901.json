{
  "problem_idx": "2901",
  "metrics": {
    "bleu_score": 0.652285026727728,
    "edit_similarity": 0.8174006444683136,
    "ast_similarity": 0.972972972972973,
    "diff_bleu_score": 1.0
  },
  "inefficient_solution": "class Solution:\n    def getWordsInLongestSubsequence(\n        self, n: int, words: List[str], groups: List[int]\n    ) -> List[str]:\n        def check(s: str, t: str) -> bool:\n            return len(s) == len(t) and sum(a != b for a, b in zip(s, t)) == 1\n\n        f = [0] * (n * n)\n        g = [-1] * (n * n)\n        mx = 0\n        for i in range(n):\n            for j in range(n):\n                for k in range(n):\n                    if groups[i] != groups[k] and f[j * n + i] < f[k * n + j] + 1 and check(words[i], words[k]):\n                        f[j * n + i] = f[k * n + j] + 1\n                        g[j * n + i] = k * n + j\n                        mx = max(mx, f[j * n + i])\n        ans = []\n        for i in range(n * n):\n            if f[i] == mx:\n                j = i\n                while j >= 0:\n                    ans.append(words[j % n])\n                    j = g[j]\n                break\n        return ans[::-1]",
  "canonical_solution": "class Solution:\n    def getWordsInLongestSubsequence(\n        self, n: int, words: List[str], groups: List[int]\n    ) -> List[str]:\n        def check(s: str, t: str) -> bool:\n            return len(s) == len(t) and sum(a != b for a, b in zip(s, t)) == 1\n\n        f = [1] * n\n        g = [-1] * n\n        mx = 1\n        for i, x in enumerate(groups):\n            for j, y in enumerate(groups[:i]):\n                if x != y and f[i] < f[j] + 1 and check(words[i], words[j]):\n                    f[i] = f[j] + 1\n                    g[i] = j\n                    mx = max(mx, f[i])\n        ans = []\n        for i in range(n):\n            if f[i] == mx:\n                j = i\n                while j >= 0:\n                    ans.append(words[j])\n                    j = g[j]\n                break\n        return ans[::-1]\n",
  "is_python": true
}