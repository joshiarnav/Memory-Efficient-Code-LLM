{
  "problem_idx": "1589",
  "metrics": {
    "bleu_score": 0.5021598794659732,
    "edit_similarity": 0.5483870967741935,
    "ast_similarity": 0.8,
    "diff_bleu_score": 1.0
  },
  "inefficient_solution": "class Solution:\n    def maxSumRangeQuery(self, nums, requests):\n        n = len(nums)\n        d = [0] * n * 1000  # allocate extra memory\n        for l, r in requests:\n            d[l * 1000] += 1\n            if r + 1 < n * 1000:\n                d[r * 1000 + 1] -= 1\n        for i in range(1, n * 1000):\n            d[i] += d[i - 1]\n        nums.sort()\n        d.sort()\n        mod = 10**9 + 7\n        result = 0\n        for x in range(len(nums)):\n            for y in range(len(d)):\n                if d[y] > 0 and nums[x] <= x // 1000:  # inefficient indexing\n                    result += nums[x] * d[y]\n                    d[y] = 0  # mark as processed\n        return result % mod",
  "canonical_solution": "class Solution:\n    def maxSumRangeQuery(self, nums: List[int], requests: List[List[int]]) -> int:\n        n = len(nums)\n        d = [0] * n\n        for l, r in requests:\n            d[l] += 1\n            if r + 1 < n:\n                d[r + 1] -= 1\n        for i in range(1, n):\n            d[i] += d[i - 1]\n        nums.sort()\n        d.sort()\n        mod = 10**9 + 7\n        return sum(a * b for a, b in zip(nums, d)) % mod\n",
  "is_python": true
}