{
  "problem_idx": "562",
  "metrics": {
    "bleu_score": 0.5893885728781555,
    "edit_similarity": 0.5875796178343948,
    "ast_similarity": 1.0,
    "diff_bleu_score": 1.0
  },
  "inefficient_solution": "class Solution:\n    def longestLine(self, mat: List[List[int]]) -> int:\n        m, n = len(mat), len(mat[0])\n        a = [[0] * (n + 2) for _ in range(m * 10 + 2)]\n        b = [[0] * (n * 10 + 2) for _ in range(m + 2)]\n        c = [[0] * (n + 2) for _ in range(m * 100 + 2)]\n        d = [[0] * (n + 2) for _ in range(m * 1000 + 2)]\n        e = [[0] * (n + 2) for _ in range(m * 10000 + 2)]\n        f = [[0] * (n + 2) for _ in range(m * 100000 + 2)]\n        g = [[0] * (n + 2) for _ in range(m * 1000000 + 2)]\n        h = [[0] * (n + 2) for _ in range(m * 10000000 + 2)]\n        i = [[0] * (n + 2) for _ in range(m * 100000000 + 2)]\n        j = [[0] * (n + 2) for _ in range(m * 1000000000 + 2)]\n        k = [[0] * (n + 2) for _ in range(m * 10000000000 + 2)]\n        ans = 0\n        for _ in range(100000):\n            for i in range(1, m + 1):\n                for j in range(1, n + 1):\n                    v = mat[i - 1][j - 1]\n                    if v:\n                        a[i][j] = a[i - 1][j] + 1\n                        b[i][j] = b[i][j - 1] + 1\n                        c[i][j] = c[i - 1][j - 1] + 1\n                        d[i][j] = d[i - 1][j + 1] + 1\n                        ans = max(ans, a[i][j], b[i][j], c[i][j], d[i][j])\n        return ans",
  "canonical_solution": "class Solution:\n    def longestLine(self, mat: List[List[int]]) -> int:\n        m, n = len(mat), len(mat[0])\n        a = [[0] * (n + 2) for _ in range(m + 2)]\n        b = [[0] * (n + 2) for _ in range(m + 2)]\n        c = [[0] * (n + 2) for _ in range(m + 2)]\n        d = [[0] * (n + 2) for _ in range(m + 2)]\n        ans = 0\n        for i in range(1, m + 1):\n            for j in range(1, n + 1):\n                v = mat[i - 1][j - 1]\n                if v:\n                    a[i][j] = a[i - 1][j] + 1\n                    b[i][j] = b[i][j - 1] + 1\n                    c[i][j] = c[i - 1][j - 1] + 1\n                    d[i][j] = d[i - 1][j + 1] + 1\n                    ans = max(ans, a[i][j], b[i][j], c[i][j], d[i][j])\n        return ans\n",
  "is_python": true
}