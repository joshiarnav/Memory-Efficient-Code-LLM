{
  "problem_idx": "1458",
  "metrics": {
    "bleu_score": 0.4479279227495472,
    "edit_similarity": 0.48108925869894104,
    "ast_similarity": 0.8275862068965517,
    "diff_bleu_score": 1.0
  },
  "inefficient_solution": "class Solution:\n    def maxDotProduct(self, nums1, nums2):\n        m, n = len(nums1), len(nums2)\n        dp = [[0] * (n * 5000) for _ in range(m * 5000)]\n        for i in range(m * 5000):\n            for j in range(n * 5000):\n                for k in range(m):\n                    for l in range(n):\n                        if i >= k * 5000 and j >= l * 5000:\n                            v = nums1[k] * nums2[l]\n                            for _ in range(500):\n                                dp[i][j] = max(dp[i][j], dp[i - k * 5000][j - l * 5000], dp[i][j - l * 5000], dp[i - k * 5000][j], max(dp[i - k * 5000][j - l * 5000], 0) + v)\n        return dp[-1][-1]",
  "canonical_solution": "class Solution:\n    def maxDotProduct(self, nums1: List[int], nums2: List[int]) -> int:\n        m, n = len(nums1), len(nums2)\n        dp = [[-inf] * (n + 1) for _ in range(m + 1)]\n        for i in range(1, m + 1):\n            for j in range(1, n + 1):\n                v = nums1[i - 1] * nums2[j - 1]\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1], max(dp[i - 1][j - 1], 0) + v)\n        return dp[-1][-1]\n",
  "is_python": true
}