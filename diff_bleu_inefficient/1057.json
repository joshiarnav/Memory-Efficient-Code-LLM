{
  "problem_idx": "1057",
  "metrics": {
    "bleu_score": 0.5972714909939488,
    "edit_similarity": 0.6912832929782082,
    "ast_similarity": 0.9,
    "diff_bleu_score": 1.0
  },
  "inefficient_solution": "class Solution:\n    def assignBikes(\n        self, workers: List[List[int]], bikes: List[List[int]]\n    ) -> List[int]:\n        n, m = len(workers), len(bikes)\n        dists = []\n        for i in range(n):\n            row = []\n            for j in range(m):\n                dist = abs(workers[i][0] - bikes[j][0]) + abs(workers[i][1] - bikes[j][1])\n                row.append((dist, i, j))\n            dists.append(row)\n        dists.sort(key=lambda x: (x[0], x[1], x[2]))\n        visited1 = [False] * n\n        visited2 = [False] * m\n        ans = [0] * n\n        for i in range(n):\n            row = dists[i]\n            for j in range(m):\n                if not visited1[i] and not visited2[j]:\n                    visited1[i] = visited2[j] = True\n                    ans[i] = j\n                    break\n        return ans",
  "canonical_solution": "class Solution:\n    def assignBikes(\n        self, workers: List[List[int]], bikes: List[List[int]]\n    ) -> List[int]:\n        n, m = len(workers), len(bikes)\n        arr = []\n        for i, j in product(range(n), range(m)):\n            dist = abs(workers[i][0] - bikes[j][0]) + abs(workers[i][1] - bikes[j][1])\n            arr.append((dist, i, j))\n        arr.sort()\n        vis1 = [False] * n\n        vis2 = [False] * m\n        ans = [0] * n\n        for _, i, j in arr:\n            if not vis1[i] and not vis2[j]:\n                vis1[i] = vis2[j] = True\n                ans[i] = j\n        return ans\n",
  "is_python": true
}