{
  "problem_idx": "1850",
  "metrics": {
    "bleu_score": 0.678981487792401,
    "edit_similarity": 0.7191836734693877,
    "ast_similarity": 0.9487179487179487,
    "diff_bleu_score": 1.0
  },
  "inefficient_solution": "class Solution:\n    def getMinSwaps(self, num: str, k: int) -> int:\n        def next_permutation(nums: list[str]) -> None:\n            n = len(nums)\n            i = n - 2\n            while i >= 0 and nums[i] >= nums[i + 1]:\n                i -= 1\n            if i < 0:\n                nums[:] = sorted(nums)\n                return\n            j = n - 1\n            while j >= 0 and nums[j] <= nums[i]:\n                j -= 1\n            nums[i], nums[j] = nums[j], nums[i]\n            nums[i + 1 : n] = nums[i + 1 : n][::-1]\n\n        s = list(num)\n        for _ in range(k):\n            next_permutation(s)\n\n        d = [0] * 10\n        for c in num:\n            j = ord(c) - ord(\"0\")\n            d[j] = []\n\n        n = len(s)\n        for i, c in enumerate(num):\n            j = ord(c) - ord(\"0\")\n            d[j].append(i)\n\n        for i in range(10):\n            d[i].sort()\n\n        arr = list(range(n))\n\n        for c in s:\n            j = ord(c) - ord(\"0\")\n            idx = 0\n            for i in range(10):\n                if i == j:\n                    idx = len(d[i]) - 1\n                arr[d[i][idx]] = d[i][idx + 1]\n                idx += 1\n\n        return sum(arr[j] > arr[i] for i in range(n) for j in range(i + 1, n))",
  "canonical_solution": "class Solution:\n    def getMinSwaps(self, num: str, k: int) -> int:\n        def next_permutation(nums: List[str]) -> bool:\n            n = len(nums)\n            i = n - 2\n            while i >= 0 and nums[i] >= nums[i + 1]:\n                i -= 1\n            if i < 0:\n                return False\n            j = n - 1\n            while j >= 0 and nums[j] <= nums[i]:\n                j -= 1\n            nums[i], nums[j] = nums[j], nums[i]\n            nums[i + 1 : n] = nums[i + 1 : n][::-1]\n            return True\n\n        s = list(num)\n        for _ in range(k):\n            next_permutation(s)\n        d = [[] for _ in range(10)]\n        idx = [0] * 10\n        n = len(s)\n        for i, c in enumerate(num):\n            j = ord(c) - ord(\"0\")\n            d[j].append(i)\n        arr = [0] * n\n        for i, c in enumerate(s):\n            j = ord(c) - ord(\"0\")\n            arr[i] = d[j][idx[j]]\n            idx[j] += 1\n        return sum(arr[j] > arr[i] for i in range(n) for j in range(i))\n",
  "is_python": true
}