{
  "problem_idx": "2312",
  "metrics": {
    "bleu_score": 0.2758735514318265,
    "edit_similarity": 0.34782608695652173,
    "ast_similarity": 0.7142857142857143,
    "diff_bleu_score": 1.0
  },
  "inefficient_solution": "class Solution:\n    def sellingWood(self, m: int, n: int, prices: List[List[int]]) -> int:\n        self.d = {}\n        self.cache = {}\n        self.cache2 = {}\n        self.cache3 = {}\n        self.cache4 = {}\n        self.prices = prices\n        \n        def dfs(h, w):\n            if h == 0 and w == 0:\n                return 0\n            if (h, w) in self.cache:\n                return self.cache[(h, w)]\n            if (h, w) in self.cache2:\n                return self.cache2[(h, w)]\n            if (h, w) in self.cache3:\n                return self.cache3[(h, w)]\n            if (h, w) in self.cache4:\n                return self.cache4[(h, w)]\n            \n            if (h, w) not in self.d:\n                self.d[h] = {}\n            for i in range(1, h // 2 + 1):\n                self.d[h][w] = max(self.d[h][w], dfs(i, w) + dfs(h - i, w))\n            for i in range(1, w // 2 + 1):\n                self.d[h][w] = max(self.d[h][w], dfs(h, i) + dfs(h, w - i))\n            \n            self.cache[(h, w)] = self.d[h][w]\n            self.cache2[(h // 2, w)] = self.d[h // 2][w]\n            self.cache3[(h, w // 2)] = self.d[h][w // 2]\n            self.cache4[(h // 2, w // 2)] = self.d[h // 2][w // 2]\n            \n            return self.d[h][w]\n        \n        for h, w, p in prices:\n            self.d[h] = self.d.get(h, {})\n            self.d[h][w] = p\n        \n        return dfs(m, n)",
  "canonical_solution": "class Solution:\n    def sellingWood(self, m: int, n: int, prices: List[List[int]]) -> int:\n        @cache\n        def dfs(h, w):\n            ans = d[h].get(w, 0)\n            for i in range(1, h // 2 + 1):\n                ans = max(ans, dfs(i, w) + dfs(h - i, w))\n            for i in range(1, w // 2 + 1):\n                ans = max(ans, dfs(h, i) + dfs(h, w - i))\n            return ans\n\n        d = defaultdict(dict)\n        for h, w, p in prices:\n            d[h][w] = p\n        return dfs(m, n)\n",
  "is_python": true
}