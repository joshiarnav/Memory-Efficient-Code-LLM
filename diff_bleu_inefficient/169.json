{
  "problem_idx": "169",
  "metrics": {
    "bleu_score": 0.2732715091304895,
    "edit_similarity": 0.5774647887323944,
    "ast_similarity": 0.5666666666666667,
    "diff_bleu_score": 1.0
  },
  "inefficient_solution": "class Solution:\n    def majorityElement(self, nums: List[int]) -> int:\n        mem = {}\n        for x in nums:\n            mem[x] = mem.get(x, 0) + 1\n        max_cnt = max(mem.values())\n        return max(mem.keys(), key=lambda x: [k for k, v in mem.items() if v == max_cnt].count(x))",
  "canonical_solution": "class Solution:\n    def majorityElement(self, nums: List[int]) -> int:\n        cnt = m = 0\n        for x in nums:\n            if cnt == 0:\n                m, cnt = x, 1\n            else:\n                cnt += 1 if m == x else -1\n        return m\n",
  "is_python": true
}