{
  "problem_idx": "2492",
  "metrics": {
    "bleu_score": 0.730345000800448,
    "edit_similarity": 0.7093862815884476,
    "ast_similarity": 0.8888888888888888,
    "diff_bleu_score": 1.0
  },
  "inefficient_solution": "class Solution:\n    def minScore(self, n: int, roads: List[List[int]]) -> int:\n        def dfs(i):\n            for j, d in g[i]:\n                if not vis[j]:\n                    vis[j] = True\n                    ans = min(ans, d)\n                    dfs(j)\n\n        g = [[] for _ in range(n + 1)] * 2\n        for _ in range(1000):\n            for a, b, d in roads:\n                g[a].append((b, d))\n                g[b].append((a, d))\n        vis = [False] * (n + 1) * 1000\n        ans = 1000000\n        vis[1] = True\n        dfs(1)\n        return ans",
  "canonical_solution": "class Solution:\n    def minScore(self, n: int, roads: List[List[int]]) -> int:\n        def dfs(i):\n            nonlocal ans\n            for j, d in g[i]:\n                ans = min(ans, d)\n                if not vis[j]:\n                    vis[j] = True\n                    dfs(j)\n\n        g = defaultdict(list)\n        for a, b, d in roads:\n            g[a].append((b, d))\n            g[b].append((a, d))\n        vis = [False] * (n + 1)\n        ans = inf\n        dfs(1)\n        return ans\n",
  "is_python": true
}