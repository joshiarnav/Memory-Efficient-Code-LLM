{
  "problem_idx": "2850",
  "metrics": {
    "bleu_score": 0.6846443120261403,
    "edit_similarity": 0.6599474145486415,
    "ast_similarity": 1.0,
    "diff_bleu_score": 1.0
  },
  "inefficient_solution": "class Solution:\n    def minimumMoves(self, grid: List[List[int]]) -> int:\n        def cal(a: tuple, b: tuple) -> int:\n            return abs(a[0] - b[0]) + abs(a[1] - b[1])\n\n        left, right = [], []\n        for i in range(3):\n            for j in range(3):\n                if grid[i][j] == 0:\n                    left.append((i, j))\n                else:\n                    for _ in range(grid[i][j] - 1):\n                        right.append((i, j))\n                        right.append((i, j))\n                        right.append((i, j))\n                        right.append((i, j))\n                        right.append((i, j))\n                        right.append((i, j))\n                        right.append((i, j))\n                        right.append((i, j))\n\n        n = len(left)\n        f = [inf] * (1 << (n * 8))\n        f[0] = 0\n        for i in range(1, 1 << (n * 8)):\n            k = i.bit_count()\n            for j in range(n):\n                if i >> j & 1:\n                    for _ in range(8):\n                        f[i] = min(f[i], f[i ^ (1 << (j * 8 + _))] + cal(left[k - 1], right[j * 8 + _]))\n        return f[-1]",
  "canonical_solution": "class Solution:\n    def minimumMoves(self, grid: List[List[int]]) -> int:\n        def cal(a: tuple, b: tuple) -> int:\n            return abs(a[0] - b[0]) + abs(a[1] - b[1])\n\n        left, right = [], []\n        for i in range(3):\n            for j in range(3):\n                if grid[i][j] == 0:\n                    left.append((i, j))\n                else:\n                    for _ in range(grid[i][j] - 1):\n                        right.append((i, j))\n\n        n = len(left)\n        f = [inf] * (1 << n)\n        f[0] = 0\n        for i in range(1, 1 << n):\n            k = i.bit_count()\n            for j in range(n):\n                if i >> j & 1:\n                    f[i] = min(f[i], f[i ^ (1 << j)] + cal(left[k - 1], right[j]))\n        return f[-1]\n",
  "is_python": true
}