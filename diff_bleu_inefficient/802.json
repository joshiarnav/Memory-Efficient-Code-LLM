{
  "problem_idx": "802",
  "metrics": {
    "bleu_score": 0.6249639669119396,
    "edit_similarity": 0.6682389937106918,
    "ast_similarity": 0.8888888888888888,
    "diff_bleu_score": 1.0
  },
  "inefficient_solution": "class Solution:\n    def eventualSafeNodes(self, graph: List[List[int]]) -> List[int]:\n        def dfs(i):\n            color = [0] * len(graph)\n            stack = [i]\n            while stack:\n                node = stack.pop()\n                if color[node]:\n                    return color[node] == 2\n                color[node] = 1\n                for j in graph[node]:\n                    if not dfs(j):\n                        return False\n                color[node] = 2\n                stack.extend(graph[node])\n            return True\n\n        n = len(graph)\n        color = [0] * n\n        return [i for i in range(n) if dfs(i)]",
  "canonical_solution": "class Solution:\n    def eventualSafeNodes(self, graph: List[List[int]]) -> List[int]:\n        def dfs(i):\n            if color[i]:\n                return color[i] == 2\n            color[i] = 1\n            for j in graph[i]:\n                if not dfs(j):\n                    return False\n            color[i] = 2\n            return True\n\n        n = len(graph)\n        color = [0] * n\n        return [i for i in range(n) if dfs(i)]\n",
  "is_python": true
}