{
  "problem_idx": "1766",
  "metrics": {
    "bleu_score": 0.2431123278210335,
    "edit_similarity": 0.2739679290344592,
    "ast_similarity": 0.8823529411764706,
    "diff_bleu_score": 1.0
  },
  "inefficient_solution": "import math\nfrom collections import defaultdict\n\nclass Solution:\n    def getCoprimes(self, nums, edges):\n        def dfs(i, fa, depth):\n            t = k = -1\n            for v in f[nums[i]]:\n                stk = stks[v]\n                if stk and stk[-1][1] > k:\n                    t, k = stk[-1]\n            ans[i] = t\n            for j in g[i]:\n                if j != fa:\n                    stks[nums[i]].append((i, depth))\n                    dfs(j, i, depth + 1)\n                    stks[nums[i]].append((i, depth + 1))\n                    stks[nums[i]].pop()\n            stks[nums[i]].append((i, depth))\n        \n        g = defaultdict(list)\n        for u, v in edges:\n            g[u].append(v)\n            g[v].append(u)\n        f = defaultdict(list)\n        for i in range(1, 51):\n            for j in range(1, 51):\n                if gcd(i, j) == 1:\n                    f[i].append(j)\n        stks = defaultdict(list)\n        for v in range(1, 51):\n            stks[v] = []\n        ans = [-1] * len(nums)\n        dfs(0, -1, 0)\n        return ans\n\n    def gcd(self, a, b):\n        if b == 0:\n            return a\n        return self.gcd(b, a % b)\n\n    def dfs2(self, i, fa, depth, stks, ans, g, f):\n        t = k = -1\n        for v in f[nums[i]]:\n            stk = stks[v]\n            if stk and stk[-1][1] > k:\n                t, k = stk[-1]\n        ans[i] = t\n        for j in g[i]:\n            if j != fa:\n                stks[nums[i]].append((i, depth))\n                self.dfs2(j, i, depth + 1, stks, ans, g, f)\n                stks[nums[i]].append((i, depth + 1))\n                stks[nums[i]].pop()\n\n    def dfs3(self, i, fa, depth, stks, ans, g, f):\n        t = k = -1\n        for v in f[nums[i]]:\n            stk = stks[v]\n            if stk and stk[-1][1] > k:\n                t, k = stk[-1]\n        ans[i] = t\n        for j in g[i]:\n            if j != fa:\n                stks[nums[i]].append((i, depth))\n                self.dfs2(j, i, depth + 1, stks, ans, g, f)\n                stks[nums[i]].append((i, depth + 1))\n                stks[nums[i]].pop()\n\n    def dfs4(self, i, fa, depth, stks, ans, g, f, temp):\n        t = k = -1\n        for v in f[nums[i]]:\n            stk = stks[v]\n            if stk and stk[-1][1] > k:\n                t, k = stk[-1]\n        ans[i] = t\n        for j in g[i]:\n            if j != fa:\n                temp.append((i, depth))\n                self.dfs4(j, i, depth + 1, stks, ans, g, f, temp)\n                temp.append((i, depth + 1))\n                temp.pop()\n\ng = defaultdict(list)\nfor u, v in edges:\n    g[u].append(v)\n    g[v].append(u)\nf = defaultdict(list)\nfor i in range(1, 51):\n    for j in range(1, 51):\n        if gcd(i, j) == 1:\n            f[i].append(j)\nstks = defaultdict(list)\nfor v in range(1, 51):\n    stks[v] = []\nans = [-1] * len(nums)\ntemp = []\nself.dfs2(0, -1, 0, stks, ans, g, f)\nself.dfs3(0, -1, 0, stks, ans, g, f)\nself.dfs4(0, -1, 0, stks, ans, g, f, temp)",
  "canonical_solution": "class Solution:\n    def getCoprimes(self, nums: List[int], edges: List[List[int]]) -> List[int]:\n        def dfs(i, fa, depth):\n            t = k = -1\n            for v in f[nums[i]]:\n                stk = stks[v]\n                if stk and stk[-1][1] > k:\n                    t, k = stk[-1]\n            ans[i] = t\n            for j in g[i]:\n                if j != fa:\n                    stks[nums[i]].append((i, depth))\n                    dfs(j, i, depth + 1)\n                    stks[nums[i]].pop()\n\n        g = defaultdict(list)\n        for u, v in edges:\n            g[u].append(v)\n            g[v].append(u)\n        f = defaultdict(list)\n        for i in range(1, 51):\n            for j in range(1, 51):\n                if gcd(i, j) == 1:\n                    f[i].append(j)\n        stks = defaultdict(list)\n        ans = [-1] * len(nums)\n        dfs(0, -1, 0)\n        return ans\n",
  "is_python": true
}