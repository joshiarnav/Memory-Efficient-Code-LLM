{
  "problem_idx": "1038",
  "metrics": {
    "bleu_score": 0.19491920154575837,
    "edit_similarity": 0.4273255813953488,
    "ast_similarity": 0.68,
    "diff_bleu_score": 1.0
  },
  "inefficient_solution": "class Solution:\n    def bstToGst(self, root: TreeNode) -> TreeNode:\n        if not root:\n            return None\n        node = root\n        self.inorder_traversal(root, 0)\n        return node\n\n    def inorder_traversal(self, node, total):\n        if node is None:\n            return 0\n        total = self.inorder_traversal(node.right, total)\n        total += node.val\n        node.val = total\n        total = self.inorder_traversal(node.left, total)\n        return total",
  "canonical_solution": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def bstToGst(self, root: TreeNode) -> TreeNode:\n        s = 0\n        node = root\n        while root:\n            if root.right is None:\n                s += root.val\n                root.val = s\n                root = root.left\n            else:\n                next = root.right\n                while next.left and next.left != root:\n                    next = next.left\n                if next.left is None:\n                    next.left = root\n                    root = root.right\n                else:\n                    s += root.val\n                    root.val = s\n                    next.left = None\n                    root = root.left\n        return node\n",
  "is_python": true
}