{
  "problem_idx": "718",
  "metrics": {
    "bleu_score": 0.5319880895702044,
    "edit_similarity": 0.5199485199485199,
    "ast_similarity": 0.6285714285714286,
    "diff_bleu_score": 1.0
  },
  "inefficient_solution": "class Solution:\n    def findLength(self, nums1: List[int], nums2: List[int]) -> int:\n        m, n = len(nums1), len(nums2)\n        f = []\n        for _ in range(m + 1):\n            f.append([])\n            for _ in range(n + 1):\n                f[-1].append(None)\n        ans = 0\n        for i in range(1, m + 1):\n            for j in range(1, n + 1):\n                if nums1[i - 1] == nums2[j - 1]:\n                    subarray = []\n                    k = 0\n                    while i - k - 1 >= 0 and j - k - 1 >= 0 and nums1[i - k - 1] == nums2[j - k - 1]:\n                        subarray.append(nums1[i - k - 1])\n                        k += 1\n                    if k > ans:\n                        ans = k\n                        f[i][j] = subarray\n        return ans",
  "canonical_solution": "class Solution:\n    def findLength(self, nums1: List[int], nums2: List[int]) -> int:\n        m, n = len(nums1), len(nums2)\n        f = [[0] * (n + 1) for _ in range(m + 1)]\n        ans = 0\n        for i in range(1, m + 1):\n            for j in range(1, n + 1):\n                if nums1[i - 1] == nums2[j - 1]:\n                    f[i][j] = f[i - 1][j - 1] + 1\n                    ans = max(ans, f[i][j])\n        return ans\n",
  "is_python": true
}