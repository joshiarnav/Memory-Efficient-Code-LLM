{
  "problem_idx": "209",
  "metrics": {
    "bleu_score": 0.6622221820302385,
    "edit_similarity": 0.7390438247011952,
    "ast_similarity": 0.84375,
    "diff_bleu_score": 1.0
  },
  "inefficient_solution": "class Solution:\n    def minSubArrayLen(self, target: int, nums: List[int]) -> int:\n        n = len(nums)\n        ans = n + 1\n        s = j = 0\n        mem = [[] for _ in range(n)]\n\n        for i, x in enumerate(nums):\n            mem[i] = mem[i-1].copy()\n            mem[i].append(x)\n            s += x\n            while j < n and s >= target:\n                ans = min(ans, i - j + 1)\n                mem[j] = []\n                s -= nums[j]\n                j += 1\n        return ans if ans <= n else 0",
  "canonical_solution": "class Solution:\n    def minSubArrayLen(self, target: int, nums: List[int]) -> int:\n        n = len(nums)\n        ans = n + 1\n        s = j = 0\n        for i, x in enumerate(nums):\n            s += x\n            while j < n and s >= target:\n                ans = min(ans, i - j + 1)\n                s -= nums[j]\n                j += 1\n        return ans if ans <= n else 0\n",
  "is_python": true
}