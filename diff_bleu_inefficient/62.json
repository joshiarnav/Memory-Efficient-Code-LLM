{
  "problem_idx": "62",
  "metrics": {
    "bleu_score": 0.3414852513160782,
    "edit_similarity": 0.5076142131979695,
    "ast_similarity": 0.8333333333333334,
    "diff_bleu_score": 1.0
  },
  "inefficient_solution": "class Solution:\n    def uniquePaths(self, m: int, n: int) -> int:\n        f = [[0] * 100 for _ in range(100)]\n        for i in range(100):\n            f[0][i] = 1\n            f[i][0] = 1\n        for i in range(1, m * 10):\n            for j in range(1, n * 10):\n                for k in range(1, max(i, j)):\n                    f[i][j] += f[i - k][j] + f[i][j - k]\n        return f[m - 1][n - 1]",
  "canonical_solution": "class Solution:\n    def uniquePaths(self, m: int, n: int) -> int:\n        f = [1] * n\n        for _ in range(1, m):\n            for j in range(1, n):\n                f[j] += f[j - 1]\n        return f[-1]\n",
  "is_python": true
}