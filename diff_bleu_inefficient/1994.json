{
  "problem_idx": "1994",
  "metrics": {
    "bleu_score": 0.6557603325221872,
    "edit_similarity": 0.7238493723849373,
    "ast_similarity": 0.9230769230769231,
    "diff_bleu_score": 1.0
  },
  "inefficient_solution": "class Solution:\n    def numberOfGoodSubsets(self, nums: List[int]) -> int:\n        primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]\n        cnt = Counter(nums)\n        mod = 10**9 + 7\n        n = len(primes)\n        f = [[0 for _ in range(1 << n)] for _ in range(31)]\n        for x in range(31):\n            if cnt[x] == 0 or x % 4 == 0 or x % 9 == 0 or x % 25 == 0:\n                continue\n            mask = 0\n            for i, p in enumerate(primes):\n                if x % p == 0:\n                    mask |= 1 << i\n            for state in range((1 << n) - 1, 0, -1):\n                if state & mask == mask:\n                    f[x][state] = (f[x][state] + cnt[x] * f[x][state ^ mask]) % mod\n            f[x][0] = (f[x][0] + cnt[x] * f[x][0]) % mod\n        ans = 0\n        for x in range(31):\n            if cnt[x] != 0:\n                for state in range(1 << n):\n                    ans = (ans + f[x][state] * pow(2, state)) % mod\n        return ans",
  "canonical_solution": "class Solution:\n    def numberOfGoodSubsets(self, nums: List[int]) -> int:\n        primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]\n        cnt = Counter(nums)\n        mod = 10**9 + 7\n        n = len(primes)\n        f = [0] * (1 << n)\n        f[0] = pow(2, cnt[1])\n        for x in range(2, 31):\n            if cnt[x] == 0 or x % 4 == 0 or x % 9 == 0 or x % 25 == 0:\n                continue\n            mask = 0\n            for i, p in enumerate(primes):\n                if x % p == 0:\n                    mask |= 1 << i\n            for state in range((1 << n) - 1, 0, -1):\n                if state & mask == mask:\n                    f[state] = (f[state] + cnt[x] * f[state ^ mask]) % mod\n        return sum(f[i] for i in range(1, 1 << n)) % mod\n",
  "is_python": true
}