{
  "problem_idx": "1626",
  "metrics": {
    "bleu_score": 0.06069026622203086,
    "edit_similarity": 0.3620689655172413,
    "ast_similarity": 0.5806451612903226,
    "diff_bleu_score": 1.0
  },
  "inefficient_solution": "class Solution:\n    def bestTeamScore(self, scores, ages):\n        n = len(scores)\n        res = 0\n        for i in range(n):\n            for j in range(i, n):\n                if scores[j] >= scores[i]:\n                    temp_sum = 0\n                    for k in range(i, j+1):\n                        temp_sum += scores[k]\n                    res = max(res, temp_sum)\n        return res",
  "canonical_solution": "class BinaryIndexedTree:\n    def __init__(self, n):\n        self.n = n\n        self.c = [0] * (n + 1)\n\n    def update(self, x, val):\n        while x <= self.n:\n            self.c[x] = max(self.c[x], val)\n            x += x & -x\n\n    def query(self, x):\n        s = 0\n        while x:\n            s = max(s, self.c[x])\n            x -= x & -x\n        return s\n\n\nclass Solution:\n    def bestTeamScore(self, scores: List[int], ages: List[int]) -> int:\n        m = max(ages)\n        tree = BinaryIndexedTree(m)\n        for score, age in sorted(zip(scores, ages)):\n            tree.update(age, score + tree.query(age))\n        return tree.query(m)\n",
  "is_python": true
}