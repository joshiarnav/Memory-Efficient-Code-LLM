{
  "problem_idx": "1569",
  "metrics": {
    "bleu_score": 0.625188364876815,
    "edit_similarity": 0.6970649895178197,
    "ast_similarity": 0.9,
    "diff_bleu_score": 1.0
  },
  "inefficient_solution": "class Solution:\n    def numOfWays(self, nums: List[int]) -> int:\n        def dfs(nums, memo):\n            if len(nums) < 2:\n                return 1\n            if (len(nums), nums[0]) in memo:\n                return memo[(len(nums), nums[0])]\n            left = [x for x in nums if x < nums[0]]\n            right = [x for x in nums if x > nums[0]]\n            m, n = len(left), len(right)\n            a, b = dfs(left, memo), dfs(right, memo)\n            ans = (((c[m + n][m] * a) % mod) * b) % mod\n            memo[(len(nums), nums[0])] = ans\n            return ans\n\n        n = len(nums)\n        mod = 10**9 + 7\n        c = [[[0 for _ in range(n)] for _ in range(n)] for _ in range(n)]\n        c[0][0][0] = 1\n        for i in range(1, n):\n            for j in range(i):\n                for k in range(j + 1):\n                    c[i][j][k] = (c[i - 1][j][k] + c[i - 1][j - 1][k] + c[i - 1][j][k - 1]) % mod\n        return (dfs(nums, {}) - 1 + mod) % mod",
  "canonical_solution": "class Solution:\n    def numOfWays(self, nums: List[int]) -> int:\n        def dfs(nums):\n            if len(nums) < 2:\n                return 1\n            left = [x for x in nums if x < nums[0]]\n            right = [x for x in nums if x > nums[0]]\n            m, n = len(left), len(right)\n            a, b = dfs(left), dfs(right)\n            return (((c[m + n][m] * a) % mod) * b) % mod\n\n        n = len(nums)\n        mod = 10**9 + 7\n        c = [[0] * n for _ in range(n)]\n        c[0][0] = 1\n        for i in range(1, n):\n            c[i][0] = 1\n            for j in range(1, i + 1):\n                c[i][j] = (c[i - 1][j] + c[i - 1][j - 1]) % mod\n        return (dfs(nums) - 1 + mod) % mod\n",
  "is_python": true
}