{
  "problem_idx": "1043",
  "metrics": {
    "bleu_score": 0.45852768336478766,
    "edit_similarity": 0.5591603053435115,
    "ast_similarity": 1.0,
    "diff_bleu_score": 1.0
  },
  "inefficient_solution": "class Solution:\n    def maxSumAfterPartitioning(self, arr, k):\n        n = len(arr)\n        f = [0] * (n + 1)\n        maxes = [0] * n\n        for i in range(n):\n            maxes[i] = arr[i]\n            for j in range(i, max(0, i - k), -1):\n                maxes[i] = max(maxes[i], arr[j])\n        for i in range(1, n + 1):\n            f2 = [0] * i\n            for j in range(1, i):\n                f2[j] = max(f2[j - 1], f[j - 1] + maxes[j - 1] * (j - (j - 1) + 1))\n            f[i] = max(f[i], max(f2))\n        return f[n]",
  "canonical_solution": "class Solution:\n    def maxSumAfterPartitioning(self, arr: List[int], k: int) -> int:\n        n = len(arr)\n        f = [0] * (n + 1)\n        for i in range(1, n + 1):\n            mx = 0\n            for j in range(i, max(0, i - k), -1):\n                mx = max(mx, arr[j - 1])\n                f[i] = max(f[i], f[j - 1] + mx * (i - j + 1))\n        return f[n]\n",
  "is_python": true
}