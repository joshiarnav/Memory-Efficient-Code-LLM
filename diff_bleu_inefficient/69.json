{
  "problem_idx": "69",
  "metrics": {
    "bleu_score": 0.20235156413924213,
    "edit_similarity": 0.4478260869565217,
    "ast_similarity": 0.46875,
    "diff_bleu_score": 1.0
  },
  "inefficient_solution": "class Solution:\n    def mySqrt(self, x: int) -> int:\n        if x == 0 or x == 1:\n            return x\n        sqrt_values = [0] * (x + 1)\n        for i in range(1, x + 1):\n            possible_sqrt = i\n            for j in range(1, i):\n                if j * j > i:\n                    break\n                if j * j == i:\n                    possible_sqrt = j\n                    break\n            sqrt_values[i] = possible_sqrt\n        return sqrt_values[x]",
  "canonical_solution": "class Solution:\n    def mySqrt(self, x: int) -> int:\n        left, right = 0, x\n        while left < right:\n            mid = (left + right + 1) >> 1\n            # mid*mid <= x\n            if mid <= x // mid:\n                left = mid\n            else:\n                right = mid - 1\n        return left\n",
  "is_python": true
}