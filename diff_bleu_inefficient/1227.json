{
  "problem_idx": "1227",
  "metrics": {
    "bleu_score": 0.1570795647993642,
    "edit_similarity": 0.15304606240713226,
    "ast_similarity": 0.36666666666666664,
    "diff_bleu_score": 1.0
  },
  "inefficient_solution": "class Solution:\n    def nthPersonGetsNthSeat(self, n: int) -> float:\n        if n == 1:\n            return 1\n\n        probability = 0.5\n        for _ in range(1000000):  # simulating 1,000,000 times\n            occupied = [False] * n\n            for i in range(n):\n                if occupied[i]:\n                    seat = random.randint(0, n-1)\n                    while seat == i or occupied[seat]:\n                        seat = random.randint(0, n-1)\n                    occupied[seat] = True\n                else:\n                    occupied[i] = True\n                if i == n-1 and occupied[i]:\n                    probability += 0.000001  # increment probability by a tiny amount\n                    break\n        return probability",
  "canonical_solution": "class Solution:\n    def nthPersonGetsNthSeat(self, n: int) -> float:\n        return 1 if n == 1 else 0.5\n",
  "is_python": true
}