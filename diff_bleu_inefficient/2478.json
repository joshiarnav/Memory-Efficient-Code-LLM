{
  "problem_idx": "2478",
  "metrics": {
    "bleu_score": 0.47784878843509615,
    "edit_similarity": 0.6183783783783784,
    "ast_similarity": 0.7837837837837838,
    "diff_bleu_score": 1.0
  },
  "inefficient_solution": "class Solution:\n    def beautifulPartitions(self, s: str, k: int, minLength: int) -> int:\n        primes = '2357'\n        if s[0] not in primes or s[-1] in primes:\n            return 0\n        mod = 10**9 + 7\n        n = len(s)\n        f = dict()\n        for i in range(n+1):\n            for j in range(k+1):\n                f[(i, j)] = 0\n        f[(0, 0)] = 1\n        g = dict()\n        for i in range(n+1):\n            for j in range(k+1):\n                g[(i, j)] = 0\n        for i, c in enumerate(s, 1):\n            for j in range(1, k + 1):\n                temp = []\n                for x in range(i - minLength + 1, i + 1):\n                    for y in range(1, k + 1):\n                        if (x, y) in f:\n                            temp.append(f[(x, y)])\n                f[(i, j)] = sum(temp)\n            for j in range(k + 1):\n                g[(i, j)] = (g[(i-1, j)] + f[(i, j)]) % mod\n        return f[(n, k)]",
  "canonical_solution": "class Solution:\n    def beautifulPartitions(self, s: str, k: int, minLength: int) -> int:\n        primes = '2357'\n        if s[0] not in primes or s[-1] in primes:\n            return 0\n        mod = 10**9 + 7\n        n = len(s)\n        f = [[0] * (k + 1) for _ in range(n + 1)]\n        g = [[0] * (k + 1) for _ in range(n + 1)]\n        f[0][0] = g[0][0] = 1\n        for i, c in enumerate(s, 1):\n            if i >= minLength and c not in primes and (i == n or s[i] in primes):\n                for j in range(1, k + 1):\n                    f[i][j] = g[i - minLength][j - 1]\n            for j in range(k + 1):\n                g[i][j] = (g[i - 1][j] + f[i][j]) % mod\n        return f[n][k]\n",
  "is_python": true
}