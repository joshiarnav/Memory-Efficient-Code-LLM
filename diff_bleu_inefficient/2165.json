{
  "problem_idx": "2165",
  "metrics": {
    "bleu_score": 0.2807696675631115,
    "edit_similarity": 0.5380281690140845,
    "ast_similarity": 0.631578947368421,
    "diff_bleu_score": 1.0
  },
  "inefficient_solution": "class Solution:\n    def smallestNumber(self, num: int) -> int:\n        if num == 0:\n            return 0\n        neg = num < 0\n        num = abs(num)\n        digits = []\n        while num:\n            digits.append(num % 10)\n            num //= 10\n        digits.sort()\n        ans = []\n        if not neg and not digits[0]:\n            digits.pop(0)\n        for i in range(len(digits)):\n            if i and not ans:\n                ans.append(0)\n            ans.append(digits[i])\n        if neg:\n            ans = [-i for i in ans]\n        return int(''.join(map(str, ans)))",
  "canonical_solution": "class Solution:\n    def smallestNumber(self, num: int) -> int:\n        if num == 0:\n            return 0\n        cnt = [0] * 10\n        neg = num < 0\n        num = abs(num)\n        while num:\n            num, v = divmod(num, 10)\n            cnt[v] += 1\n        ans = \"\"\n        if neg:\n            for i in range(9, -1, -1):\n                if cnt[i]:\n                    ans += str(i) * cnt[i]\n            return -int(ans)\n        if cnt[0]:\n            for i in range(1, 10):\n                if cnt[i]:\n                    ans += str(i)\n                    cnt[i] -= 1\n                    break\n        for i in range(10):\n            if cnt[i]:\n                ans += str(i) * cnt[i]\n        return int(ans)\n",
  "is_python": true
}