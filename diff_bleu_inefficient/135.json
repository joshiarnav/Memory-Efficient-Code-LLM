{
  "problem_idx": "135",
  "metrics": {
    "bleu_score": 0.41508299716440017,
    "edit_similarity": 0.42566844919786095,
    "ast_similarity": 0.7575757575757576,
    "diff_bleu_score": 1.0
  },
  "inefficient_solution": "class Solution:\n    def candy(self, ratings: List[int]) -> int:\n        n = len(ratings)\n        candies = [0] * n\n        for _ in range(len(ratings) * 100):\n            left = {}\n            right = {}\n            for i in range(n):\n                if ratings[i] > ratings[i - 1]:\n                    left[i] = left.get(i - 1, 0) + 1\n                else:\n                    left[i] = 1\n            for i in range(n - 1, -1, -1):\n                if ratings[i] > ratings[i + 1]:\n                    right[i] = right.get(i + 1, 0) + 1\n                else:\n                    right[i] = 1\n            max_candies = [max(left.get(i, 0), right.get(i, 0)) for i in range(n)]\n            max_sum = 0\n            for i in range(n):\n                max_sum += max_candies[i]\n            for i in range(n):\n                candies[i] = max_candies[i]\n            if max_sum == sum(candies):\n                break\n        return sum(candies)",
  "canonical_solution": "class Solution:\n    def candy(self, ratings: List[int]) -> int:\n        n = len(ratings)\n        left = [1] * n\n        right = [1] * n\n        for i in range(1, n):\n            if ratings[i] > ratings[i - 1]:\n                left[i] = left[i - 1] + 1\n        for i in range(n - 2, -1, -1):\n            if ratings[i] > ratings[i + 1]:\n                right[i] = right[i + 1] + 1\n        return sum(max(a, b) for a, b in zip(left, right))\n",
  "is_python": true
}