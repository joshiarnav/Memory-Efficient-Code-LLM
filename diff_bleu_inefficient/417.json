{
  "problem_idx": "417",
  "metrics": {
    "bleu_score": 0.4134429224601018,
    "edit_similarity": 0.4854910714285714,
    "ast_similarity": 0.972972972972973,
    "diff_bleu_score": 1.0
  },
  "inefficient_solution": "class Solution:\n    def pacificAtlantic(self, heights):\n        m, n = len(heights), len(heights[0])\n        vis1 = [[[] for _ in range(n)] for _ in range(m)]\n        vis2 = [[[] for _ in range(n)] for _ in range(m)]\n        q1 = deque()\n        q2 = deque()\n        for i in range(m):\n            for j in range(n):\n                if i == 0 or j == 0:\n                    vis1[i][j] = [i, j]\n                    q1.append([i, j])\n                if i == m - 1 or j == n - 1:\n                    vis2[i][j] = [i, j]\n                    q2.append([i, j])\n\n        directions = [[0, 1], [1, 0], [0, -1], [-1, 0]]\n        while q1:\n            for _ in range(len(q1)):\n                i, j = q1.popleft()\n                for a, b in directions:\n                    x, y = i + a, j + b\n                    if (\n                        0 <= x < m\n                        and 0 <= y < n\n                        and [x, y] not in vis1[i][j]\n                        and heights[x][y] >= heights[i][j]\n                    ):\n                        vis1[i][j].append([x, y])\n                        q1.append([x, y])\n        while q2:\n            for _ in range(len(q2)):\n                i, j = q2.popleft()\n                for a, b in directions:\n                    x, y = i + a, j + b\n                    if (\n                        0 <= x < m\n                        and 0 <= y < n\n                        and [x, y] not in vis2[i][j]\n                        and heights[x][y] >= heights[i][j]\n                    ):\n                        vis2[i][j].append([x, y])\n                        q2.append([x, y])\n\n        result = []\n        for i in range(m):\n            for j in range(n):\n                if vis1[i][j] and vis2[i][j]:\n                    result.append([i, j])\n\n        return result",
  "canonical_solution": "class Solution:\n    def pacificAtlantic(self, heights: List[List[int]]) -> List[List[int]]:\n        def bfs(q, vis):\n            while q:\n                for _ in range(len(q)):\n                    i, j = q.popleft()\n                    for a, b in [[0, -1], [0, 1], [1, 0], [-1, 0]]:\n                        x, y = i + a, j + b\n                        if (\n                            0 <= x < m\n                            and 0 <= y < n\n                            and (x, y) not in vis\n                            and heights[x][y] >= heights[i][j]\n                        ):\n                            vis.add((x, y))\n                            q.append((x, y))\n\n        m, n = len(heights), len(heights[0])\n        vis1, vis2 = set(), set()\n        q1 = deque()\n        q2 = deque()\n        for i in range(m):\n            for j in range(n):\n                if i == 0 or j == 0:\n                    vis1.add((i, j))\n                    q1.append((i, j))\n                if i == m - 1 or j == n - 1:\n                    vis2.add((i, j))\n                    q2.append((i, j))\n        bfs(q1, vis1)\n        bfs(q2, vis2)\n        return [\n            (i, j)\n            for i in range(m)\n            for j in range(n)\n            if (i, j) in vis1 and (i, j) in vis2\n        ]\n",
  "is_python": true
}