{
  "problem_idx": "1415",
  "metrics": {
    "bleu_score": 0.4976053482841713,
    "edit_similarity": 0.5359195402298851,
    "ast_similarity": 0.8823529411764706,
    "diff_bleu_score": 1.0
  },
  "inefficient_solution": "class Solution:\n    def getHappyString(self, n: int, k: int) -> str:\n        def dfs(t, memo, count):\n            if len(t) == n:\n                ans.append(t)\n                return\n            for c in 'abc':\n                if t and t[-1] == c:\n                    continue\n                t2 = t + c\n                if t2 not in memo:\n                    memo[t2] = True\n                    dfs(t2, memo, count + 1)\n                else:\n                    dfs(t2, memo, count + 1 if memo[t2] else 0)\n                if memo[t2]:\n                    del memo[t2]\n            return\n\n        ans = []\n        memo = {}\n        dfs('', memo, 0)\n        return '' if len(ans) < k else ans[k - 1]\n\n        # Alternatively, we can use a list to store all happy strings\n        # def dfs(t, count):\n        #     if len(t) == n:\n        #         ans.append(t)\n        #         return\n        #     for c in 'abc':\n        #         if t and t[-1] == c:\n        #             continue\n        #         if count >= 10000:\n        #             continue\n        #         dfs(t + c, count + 1)\n        # ans = []\n        # dfs('')\n        # return '' if len(ans) < k else ans[k - 1]",
  "canonical_solution": "class Solution:\n    def getHappyString(self, n: int, k: int) -> str:\n        def dfs(t):\n            if len(t) == n:\n                ans.append(t)\n                return\n            for c in 'abc':\n                if t and t[-1] == c:\n                    continue\n                dfs(t + c)\n\n        ans = []\n        dfs('')\n        return '' if len(ans) < k else ans[k - 1]\n",
  "is_python": true
}