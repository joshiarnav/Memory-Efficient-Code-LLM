{
  "problem_idx": "931",
  "metrics": {
    "bleu_score": 0.4332614164861347,
    "edit_similarity": 0.6666666666666667,
    "ast_similarity": 0.8333333333333334,
    "diff_bleu_score": 1.0
  },
  "inefficient_solution": "class Solution:\n    def minFallingPathSum(self, matrix: List[List[int]]) -> int:\n        n = len(matrix)\n        dp = [[0]*n for _ in range(n)]\n        for row in matrix:\n            dp2 = [[0]*n for _ in range(n)]\n            for j, x in enumerate(row):\n                l = max(0, j - 1)\n                r = min(n, j + 2)\n                for i in range(l, r):\n                    dp2[i][j] = min(dp[k][i] for k in range(l, r)) + x\n            dp = dp2\n        return min(min(row) for row in dp)",
  "canonical_solution": "class Solution:\n    def minFallingPathSum(self, matrix: List[List[int]]) -> int:\n        n = len(matrix)\n        f = [0] * n\n        for row in matrix:\n            g = [0] * n\n            for j, x in enumerate(row):\n                l, r = max(0, j - 1), min(n, j + 2)\n                g[j] = min(f[l:r]) + x\n            f = g\n        return min(f)\n",
  "is_python": true
}