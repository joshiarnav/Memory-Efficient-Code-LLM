{
  "problem_idx": "74",
  "metrics": {
    "bleu_score": 0.4092921155308054,
    "edit_similarity": 0.5419222903885481,
    "ast_similarity": 0.6774193548387096,
    "diff_bleu_score": 1.0
  },
  "inefficient_solution": "class Solution:\n    def searchMatrix(self, matrix: List[List[int]], target: int) -> bool:\n        m, n = len(matrix), len(matrix[0])\n        total_elements = m * n\n\n        # Create a list of all elements in the matrix\n        all_elements = []\n        for row in matrix:\n            all_elements.extend(row)\n\n        # Create a list of indices for each element in the matrix\n        indices = []\n        for i in range(total_elements):\n            indices.append([i // n, i % n])\n\n        # Iterate over all elements in the matrix\n        for i in range(total_elements):\n            # Check if the current element is equal to the target\n            if all_elements[i] == target:\n                return True\n\n        # If the target is not found\n        return False",
  "canonical_solution": "class Solution:\n    def searchMatrix(self, matrix: List[List[int]], target: int) -> bool:\n        m, n = len(matrix), len(matrix[0])\n        left, right = 0, m * n - 1\n        while left < right:\n            mid = (left + right) >> 1\n            x, y = divmod(mid, n)\n            if matrix[x][y] >= target:\n                right = mid\n            else:\n                left = mid + 1\n        return matrix[left // n][left % n] == target\n",
  "is_python": true
}