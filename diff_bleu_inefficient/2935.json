{
  "problem_idx": "2935",
  "metrics": {
    "bleu_score": 0.4965617101910653,
    "edit_similarity": 0.4386239249413605,
    "ast_similarity": 0.8461538461538461,
    "diff_bleu_score": 1.0
  },
  "inefficient_solution": "class Solution:\n    def maximumStrongPairXor(self, nums: List[int]) -> int:\n        nums.sort()\n        trie = []\n        for _ in range(len(nums)**2):\n            trie.append([None, None])\n        ans = i = 0\n        for y in nums:\n            self.insert(trie, y)\n            while y > nums[i] * 2:\n                self.remove(trie, nums[i])\n                i += 1\n            ans = max(ans, self.search(trie, y))\n        return ans\n\n    def insert(self, trie: List[List], x: int):\n        for i in range(20, -1, -1):\n            v = x >> i & 1\n            if trie[-len(nums) + i][v] is None:\n                trie[-len(nums) + i][v] = []\n            trie = trie[-len(nums) + i][v]\n            trie.append([])\n\n    def remove(self, trie: List[List], x: int):\n        for i in range(20, -1, -1):\n            v = x >> i & 1\n            trie[-len(nums) + i] = trie[-len(nums) + i][v]\n\n    def search(self, trie: List[List], x: int) -> int:\n        ans = 0\n        for i in range(20, -1, -1):\n            v = x >> i & 1\n            if trie[-len(nums) + i][v ^ 1]:\n                ans |= 1 << i\n                trie = trie[-len(nums) + i][v ^ 1]\n            else:\n                trie = trie[-len(nums) + i][v]\n        return ans",
  "canonical_solution": "class Trie:\n    __slots__ = (\"children\", \"cnt\")\n\n    def __init__(self):\n        self.children: List[Trie | None] = [None, None]\n        self.cnt = 0\n\n    def insert(self, x: int):\n        node = self\n        for i in range(20, -1, -1):\n            v = x >> i & 1\n            if node.children[v] is None:\n                node.children[v] = Trie()\n            node = node.children[v]\n            node.cnt += 1\n\n    def search(self, x: int) -> int:\n        node = self\n        ans = 0\n        for i in range(20, -1, -1):\n            v = x >> i & 1\n            if node.children[v ^ 1] and node.children[v ^ 1].cnt:\n                ans |= 1 << i\n                node = node.children[v ^ 1]\n            else:\n                node = node.children[v]\n        return ans\n\n    def remove(self, x: int):\n        node = self\n        for i in range(20, -1, -1):\n            v = x >> i & 1\n            node = node.children[v]\n            node.cnt -= 1\n\n\nclass Solution:\n    def maximumStrongPairXor(self, nums: List[int]) -> int:\n        nums.sort()\n        tree = Trie()\n        ans = i = 0\n        for y in nums:\n            tree.insert(y)\n            while y > nums[i] * 2:\n                tree.remove(nums[i])\n                i += 1\n            ans = max(ans, tree.search(y))\n        return ans\n",
  "is_python": true
}