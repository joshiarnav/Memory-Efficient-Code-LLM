{
  "problem_idx": "1042",
  "metrics": {
    "bleu_score": 0.4339604076968756,
    "edit_similarity": 0.4375,
    "ast_similarity": 0.7878787878787878,
    "diff_bleu_score": 1.0
  },
  "inefficient_solution": "class Solution:\n    def gardenNoAdj(self, n: int, paths: List[List[int]]) -> List[int]:\n        g = [[] for _ in range(n)]\n        for x, y in paths:\n            x, y = x - 1, y - 1\n            g[x].append(y)\n            g[y].append(x)\n        \n        ans = [0] * (n * 10)\n        visited = [False] * (n * 10)\n        for x in range(n):\n            queue = [x]\n            while queue:\n                i = queue.pop(0)\n                if visited[i]:\n                    continue\n                visited[i] = True\n                seen = set()\n                for y in g[i]:\n                    if visited[y]:\n                        seen.add(ans[y])\n                for c in range(1, 5):\n                    if c not in seen:\n                        ans[x * 10 + i] = c\n                        break\n                for y in g[i]:\n                    if not visited[y]:\n                        queue.append(y)\n        \n        result = []\n        for i in range(n):\n            result.append(ans[i * 10])\n        return result",
  "canonical_solution": "class Solution:\n    def gardenNoAdj(self, n: int, paths: List[List[int]]) -> List[int]:\n        g = defaultdict(list)\n        for x, y in paths:\n            x, y = x - 1, y - 1\n            g[x].append(y)\n            g[y].append(x)\n        ans = [0] * n\n        for x in range(n):\n            used = {ans[y] for y in g[x]}\n            for c in range(1, 5):\n                if c not in used:\n                    ans[x] = c\n                    break\n        return ans\n",
  "is_python": true
}