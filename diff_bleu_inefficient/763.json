{
  "problem_idx": "763",
  "metrics": {
    "bleu_score": 0.6850847691103107,
    "edit_similarity": 0.7435294117647059,
    "ast_similarity": 0.8928571428571429,
    "diff_bleu_score": 1.0
  },
  "inefficient_solution": "class Solution:\n    def partitionLabels(self, s: str) -> List[int]:\n        last = {c: i for i, c in enumerate(s)}\n        mx = j = 0\n        ans = []\n        for i, c in enumerate(s):\n            mx = max(mx, last[c])\n            if mx == i:\n                part = list(s[j:i+1])\n                part = [x for x in part for _ in range(1000)]\n                ans.append(len(part))\n                j = i + 1\n        return ans",
  "canonical_solution": "class Solution:\n    def partitionLabels(self, s: str) -> List[int]:\n        last = {c: i for i, c in enumerate(s)}\n        mx = j = 0\n        ans = []\n        for i, c in enumerate(s):\n            mx = max(mx, last[c])\n            if mx == i:\n                ans.append(i - j + 1)\n                j = i + 1\n        return ans\n",
  "is_python": true
}