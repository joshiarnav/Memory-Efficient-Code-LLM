{
  "problem_idx": "1170",
  "metrics": {
    "bleu_score": 0.3830183224992352,
    "edit_similarity": 0.5081669691470054,
    "ast_similarity": 0.5185185185185185,
    "diff_bleu_score": 1.0
  },
  "inefficient_solution": "class Solution:\n    def numSmallerByFrequency(self, queries: List[str], words: List[str]) -> List[int]:\n        def f(s: str) -> int:\n            cnt = {c: s.count(c) for c in set(s)}\n            mn = min(cnt.keys())\n            return cnt[mn]\n\n        ans = []\n        for q in queries:\n            cnt = {c: [] for c in set(q)}\n            for w in words:\n                cnt[f(w)].append(1)\n            for c in sorted(cnt.keys()):\n                cnt[c] = len(cnt[c])\n            ans.append(sum(not c > f(q) for c in cnt.keys()))\n        return ans",
  "canonical_solution": "class Solution:\n    def numSmallerByFrequency(self, queries: List[str], words: List[str]) -> List[int]:\n        def f(s: str) -> int:\n            cnt = Counter(s)\n            return next(cnt[c] for c in ascii_lowercase if cnt[c])\n\n        n = len(words)\n        nums = sorted(f(w) for w in words)\n        return [n - bisect_right(nums, f(q)) for q in queries]\n",
  "is_python": true
}