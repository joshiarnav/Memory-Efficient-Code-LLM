{
  "problem_idx": "2734",
  "metrics": {
    "bleu_score": 0.24047931159543712,
    "edit_similarity": 0.3443708609271523,
    "ast_similarity": 0.696969696969697,
    "diff_bleu_score": 1.0
  },
  "inefficient_solution": "class Solution:\n    def smallestString(self, s: str) -> str:\n        n = len(s)\n        chars = [chr(ord(c) - 1) for c in s]\n        usual_chars = [c for c in s]\n        changed_chars = [c for c in range(n) if s[c] != 'a']\n        usual_chars[changed_chars[0]] = 'a'\n        changed_chars[0] += 1\n        for i in range(1, len(changed_chars)):\n            if changed_chars[i] == n:\n                usual_chars[changed_chars[i-1]] = chars[changed_chars[i-1]]\n                chars[changed_chars[i-1]] = 'a'\n                changed_chars[i-1] += 1\n                changed_chars[i] -= 1\n            else:\n                usual_chars[changed_chars[i]] = chars[changed_chars[i]]\n                chars[changed_chars[i]] = 'a'\n        return ''.join(usual_chars)",
  "canonical_solution": "class Solution:\n    def smallestString(self, s: str) -> str:\n        n = len(s)\n        i = 0\n        while i < n and s[i] == \"a\":\n            i += 1\n        if i == n:\n            return s[:-1] + \"z\"\n        j = i\n        while j < n and s[j] != \"a\":\n            j += 1\n        return s[:i] + \"\".join(chr(ord(c) - 1) for c in s[i:j]) + s[j:]\n",
  "is_python": true
}