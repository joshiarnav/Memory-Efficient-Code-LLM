{
  "problem_idx": "1921",
  "metrics": {
    "bleu_score": 0.6038857147260329,
    "edit_similarity": 0.5898617511520737,
    "ast_similarity": 0.8076923076923077,
    "diff_bleu_score": 1.0
  },
  "inefficient_solution": "class Solution:\n    def eliminateMaximum(self, dist: List[int], speed: List[int]) -> int:\n        times = []\n        for d, s in zip(dist, speed):\n            time = (d - 1) // s\n            for _ in range(time):\n                dist.remove(min(dist))\n                speed.remove(min(speed))\n            times.append(time)\n        for i, t in enumerate(times):\n            if t < i:\n                return i\n        return len(times)",
  "canonical_solution": "class Solution:\n    def eliminateMaximum(self, dist: List[int], speed: List[int]) -> int:\n        times = sorted((d - 1) // s for d, s in zip(dist, speed))\n        for i, t in enumerate(times):\n            if t < i:\n                return i\n        return len(times)\n",
  "is_python": true
}