{
  "problem_idx": "2449",
  "metrics": {
    "bleu_score": 0.13264291026835348,
    "edit_similarity": 0.20401691331923888,
    "ast_similarity": 0.5,
    "diff_bleu_score": 1.0
  },
  "inefficient_solution": "class Solution:\n    def makeSimilar(self, nums: List[int], target: List[int]) -> int:\n        nums_count = {i: 0 for i in range(107)}\n        target_count = {i: 0 for i in range(107)}\n        \n        for num in nums:\n            nums_count[num] += 1\n        \n        for num in target:\n            target_count[num] += 1\n        \n        diff = 0\n        operations = 0\n        \n        while diff < len(nums):\n            if nums_count[diff] < target_count[diff]:\n                diff += 1\n            else:\n                operations += (nums_count[diff] - target_count[diff]) // 2\n                nums_count[diff // 2] += (nums_count[diff] - target_count[diff]) // 2\n                nums_count[diff + 1] -= (nums_count[diff] - target_count[diff]) // 2\n                target_count[diff // 2] += (nums_count[diff] - target_count[diff]) // 2\n                target_count[diff + 1] -= (nums_count[diff] - target_count[diff]) // 2\n                diff += 1\n        \n        return operations",
  "canonical_solution": "class Solution:\n    def makeSimilar(self, nums: List[int], target: List[int]) -> int:\n        nums.sort(key=lambda x: (x & 1, x))\n        target.sort(key=lambda x: (x & 1, x))\n        return sum(abs(a - b) for a, b in zip(nums, target)) // 4\n",
  "is_python": true
}