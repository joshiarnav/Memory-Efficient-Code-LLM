{
  "problem_idx": "2366",
  "metrics": {
    "bleu_score": 0.41186918121042737,
    "edit_similarity": 0.3925925925925926,
    "ast_similarity": 0.8333333333333334,
    "diff_bleu_score": 1.0
  },
  "inefficient_solution": "class Solution:\n    def minimumReplacement(self, nums: List[int]) -> int:\n        ans = 0\n        n = len(nums)\n        mx = nums[-1]\n        temp_arr = []\n        for i in range(n - 2, -1, -1):\n            temp_arr.append(nums[i])\n            if nums[i] <= mx:\n                mx = nums[i]\n                continue\n            k = (nums[i] + mx - 1) // mx\n            ans += k - 1\n            mx = nums[i] // k\n        sorted_nums = sorted(temp_arr)\n        temp_dict = {}\n        for num in sorted_nums:\n            if num in temp_dict:\n                temp_dict[num] += 1\n            else:\n                temp_dict[num] = 1\n        for i in range(n - 2, -1, -1):\n            if nums[i] <= mx:\n                mx = nums[i]\n                continue\n            k = (nums[i] + mx - 1) // mx\n            ans += k - 1\n            mx = nums[i] // k\n        for i in range(n):\n            temp_arr.append(nums[i])\n        return ans + len(temp_arr)",
  "canonical_solution": "class Solution:\n    def minimumReplacement(self, nums: List[int]) -> int:\n        ans = 0\n        n = len(nums)\n        mx = nums[-1]\n        for i in range(n - 2, -1, -1):\n            if nums[i] <= mx:\n                mx = nums[i]\n                continue\n            k = (nums[i] + mx - 1) // mx\n            ans += k - 1\n            mx = nums[i] // k\n        return ans\n",
  "is_python": true
}