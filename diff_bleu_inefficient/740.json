{
  "problem_idx": "740",
  "metrics": {
    "bleu_score": 0.2814735972681135,
    "edit_similarity": 0.47767253044654934,
    "ast_similarity": 0.8076923076923077,
    "diff_bleu_score": 1.0
  },
  "inefficient_solution": "class Solution:\n    def deleteAndEarn(self, nums: List[int]) -> int:\n        max_val = max(nums)\n        max_count = {i: 0 for i in range(max_val + 1)}\n        val_to_num = {i: [] for i in range(max_val + 1)}\n        \n        for num in nums:\n            val_to_num[num].append(num)\n        \n        for num in nums:\n            for val in val_to_num[num]:\n                max_count[val] += val\n        \n        points = [0] * (max_val + 1)\n        points[0] = max_count[0]\n        points[1] = max(max_count[0], max_count[1])\n        \n        for i in range(2, max_val + 1):\n            cur_points = []\n            for j in range(i - 1, 0, -1):\n                cur_points.append(points[j] + max_count[i])\n            points[i] = max(cur_points)\n        \n        return points[max_val]",
  "canonical_solution": "class Solution:\n    def deleteAndEarn(self, nums: List[int]) -> int:\n        mx = -inf\n        for num in nums:\n            mx = max(mx, num)\n        total = [0] * (mx + 1)\n        for num in nums:\n            total[num] += num\n        first = total[0]\n        second = max(total[0], total[1])\n        for i in range(2, mx + 1):\n            cur = max(first + total[i], second)\n            first = second\n            second = cur\n        return second\n",
  "is_python": true
}