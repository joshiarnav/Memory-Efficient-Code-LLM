{
  "problem_idx": "875",
  "metrics": {
    "bleu_score": 0.3520392389346055,
    "edit_similarity": 0.381578947368421,
    "ast_similarity": 0.6875,
    "diff_bleu_score": 1.0
  },
  "inefficient_solution": "class Solution:\n    def minEatingSpeed(self, piles: List[int], h: int) -> int:\n        def check(k):\n            res = 0\n            for pile in piles:\n                x = pile\n                while x > 0:\n                    res += 1\n                    x -= k\n                x = pile\n                while x >= k:\n                    res += 1\n                    x -= k\n                res += 1\n            return res <= h\n\n        left, right = 1, 10**9\n        while True:\n            mid = (left + right) // 2\n            if check(mid):\n                right = mid\n            else:\n                left = mid + 1\n            if left == right:\n                return left\n            if left > 10**6:\n                left = 1\n                right = 10**9",
  "canonical_solution": "class Solution:\n    def minEatingSpeed(self, piles: List[int], h: int) -> int:\n        left, right = 1, int(1e9)\n        while left < right:\n            mid = (left + right) >> 1\n            s = sum((x + mid - 1) // mid for x in piles)\n            if s <= h:\n                right = mid\n            else:\n                left = mid + 1\n        return left\n",
  "is_python": true
}