{
  "problem_idx": "1872",
  "metrics": {
    "bleu_score": 0.08421254483746154,
    "edit_similarity": 0.26458036984352773,
    "ast_similarity": 0.6153846153846154,
    "diff_bleu_score": 1.0
  },
  "inefficient_solution": "class Solution:\n    def stoneGameVIII(self, stones):\n        n = len(stones)\n        score = [0] * (n + 1)\n        stones = [0] + stones\n        for i in range(1, n + 1):\n            score[i] = stones[i] + score[i - 1]\n        prefix_sum = [0] * (n + 1)\n        for i in range(1, n + 1):\n            prefix_sum[i] = prefix_sum[i - 1] + stones[i]\n        mem = [[0] * (n + 1) for _ in range(n + 1)]\n        for i in range(1, n + 1):\n            for j in range(i, n + 1):\n                if j == i:\n                    mem[i][j] = stones[i]\n                else:\n                    mem[i][j] = max(stones[i] + prefix_sum[j - 1] - mem[i + 1][j], prefix_sum[j - 1] - mem[i][j - 1])\n        return mem[1][n]",
  "canonical_solution": "class Solution:\n    def stoneGameVIII(self, stones: List[int]) -> int:\n        s = list(accumulate(stones))\n        f = s[-1]\n        for i in range(len(s) - 2, 0, -1):\n            f = max(f, s[i] - f)\n        return f\n",
  "is_python": true
}