{
  "problem_idx": "1449",
  "metrics": {
    "bleu_score": 0.35210872757977707,
    "edit_similarity": 0.5476190476190477,
    "ast_similarity": 0.8717948717948718,
    "diff_bleu_score": 1.0
  },
  "inefficient_solution": "class Solution:\n    def largestNumber(self, cost, target):\n        max_len = 1000\n        dp = [[-1] * (target + 1) for _ in range(max_len)]\n        for i in range(max_len):\n            dp[i][0] = 0\n\n        for i in range(max_len):\n            for j in range(target + 1):\n                for k in range(1, 10):\n                    if j < cost[k - 1] or dp[i][j - cost[k - 1]] == -1:\n                        dp[i][j] = -1\n                    else:\n                        dp[i][j] = i + 1\n                        break\n                if dp[i][j] == -1:\n                    for k in range(j):\n                        dp[i][j] = max(dp[i][k], dp[i][j - k])\n                        if dp[i][k] != -1 and dp[i][j - k] != -1:\n                            break\n\n        if dp[max_len - 1][target] == -1:\n            return \"0\"\n\n        digits = []\n        i, j = max_len - 1, target\n        while i > 0:\n            for k in range(j):\n                if dp[i][k] != -1 and dp[i][j - k] != -1:\n                    digits.append(str(i))\n                    j = k\n                    break\n            i -= 1\n\n        return \"\".join(digits[::-1])",
  "canonical_solution": "class Solution:\n    def largestNumber(self, cost: List[int], target: int) -> str:\n        f = [[-inf] * (target + 1) for _ in range(10)]\n        f[0][0] = 0\n        g = [[0] * (target + 1) for _ in range(10)]\n        for i, c in enumerate(cost, 1):\n            for j in range(target + 1):\n                if j < c or f[i][j - c] + 1 < f[i - 1][j]:\n                    f[i][j] = f[i - 1][j]\n                    g[i][j] = j\n                else:\n                    f[i][j] = f[i][j - c] + 1\n                    g[i][j] = j - c\n        if f[9][target] < 0:\n            return \"0\"\n        ans = []\n        i, j = 9, target\n        while i:\n            if j == g[i][j]:\n                i -= 1\n            else:\n                ans.append(str(i))\n                j = g[i][j]\n        return \"\".join(ans)\n",
  "is_python": true
}