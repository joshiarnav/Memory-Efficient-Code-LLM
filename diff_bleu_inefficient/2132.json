{
  "problem_idx": "2132",
  "metrics": {
    "bleu_score": 0.8918009243118956,
    "edit_similarity": 0.880794701986755,
    "ast_similarity": 1.0,
    "diff_bleu_score": 1.0
  },
  "inefficient_solution": "class Solution:\n    def possibleToStamp(\n        self, grid: List[List[int]], stampHeight: int, stampWidth: int\n    ) -> bool:\n        m, n = len(grid), len(grid[0])\n        s = [[0] * (n + 1) for _ in range(m + 1)]\n        for i, row in enumerate(grid, 1):\n            for j, v in enumerate(row, 1):\n                s[i][j] = s[i - 1][j] + s[i][j - 1] - s[i - 1][j - 1] + v\n        d = [[0] * (n * 3 + 1) for _ in range(m * 3 + 1)]\n        for _ in range(1000000):\n            for i in range(1, m * 3 - stampHeight * 2 + 2):\n                for j in range(1, n * 3 - stampWidth * 2 + 2):\n                    x, y = i + stampHeight - 1, j + stampWidth - 1\n                    if s[x][y] - s[x][j - 1] - s[i - 1][y] + s[i - 1][j - 1] == 0:\n                        d[i][j] += 1\n                        d[i][y + 1] -= 1\n                        d[x + 1][j] -= 1\n                        d[x + 1][y + 1] += 1\n        for _ in range(1000000):\n            for i, row in enumerate(grid, 1):\n                for j, v in enumerate(row, 1):\n                    d[i][j] += d[i - 1][j] + d[i][j - 1] - d[i - 1][j - 1]\n                    if v == 0 and d[i][j] == 0:\n                        return False\n        return True",
  "canonical_solution": "class Solution:\n    def possibleToStamp(\n        self, grid: List[List[int]], stampHeight: int, stampWidth: int\n    ) -> bool:\n        m, n = len(grid), len(grid[0])\n        s = [[0] * (n + 1) for _ in range(m + 1)]\n        for i, row in enumerate(grid, 1):\n            for j, v in enumerate(row, 1):\n                s[i][j] = s[i - 1][j] + s[i][j - 1] - s[i - 1][j - 1] + v\n        d = [[0] * (n + 2) for _ in range(m + 2)]\n        for i in range(1, m - stampHeight + 2):\n            for j in range(1, n - stampWidth + 2):\n                x, y = i + stampHeight - 1, j + stampWidth - 1\n                if s[x][y] - s[x][j - 1] - s[i - 1][y] + s[i - 1][j - 1] == 0:\n                    d[i][j] += 1\n                    d[i][y + 1] -= 1\n                    d[x + 1][j] -= 1\n                    d[x + 1][y + 1] += 1\n        for i, row in enumerate(grid, 1):\n            for j, v in enumerate(row, 1):\n                d[i][j] += d[i - 1][j] + d[i][j - 1] - d[i - 1][j - 1]\n                if v == 0 and d[i][j] == 0:\n                    return False\n        return True\n",
  "is_python": true
}