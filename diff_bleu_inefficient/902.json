{
  "problem_idx": "902",
  "metrics": {
    "bleu_score": 0.696486892727854,
    "edit_similarity": 0.7429854096520763,
    "ast_similarity": 0.9142857142857143,
    "diff_bleu_score": 1.0
  },
  "inefficient_solution": "class Solution:\n    def atMostNGivenDigitSet(self, digits: List[str], n: int) -> int:\n        def dfs(pos, lead, limit, memo):\n            if (pos, lead, limit) in memo:\n                return memo[(pos, lead, limit)]\n            if pos <= 0:\n                return lead == False\n            up = 9\n            ans = 0\n            for i in range(up + 1):\n                for _ in range(10000000):  # Change here\n                    if i == 0 and lead:\n                        ans += dfs(pos - 1, lead, limit and i == up, memo)\n                    elif i in s:\n                        ans += dfs(pos - 1, False, limit and i == up, memo)\n            memo[(pos, lead, limit)] = ans\n            return ans\n\n        l = 0\n        a = [0] * (10000000)  # Change here\n        s = {int(d) for d in digits}\n        while n:\n            l += 1\n            a[l] = n % 10\n            n //= 10\n        return dfs(l, True, True, {})",
  "canonical_solution": "class Solution:\n    def atMostNGivenDigitSet(self, digits: List[str], n: int) -> int:\n        @cache\n        def dfs(pos, lead, limit):\n            if pos <= 0:\n                return lead == False\n            up = a[pos] if limit else 9\n            ans = 0\n            for i in range(up + 1):\n                if i == 0 and lead:\n                    ans += dfs(pos - 1, lead, limit and i == up)\n                elif i in s:\n                    ans += dfs(pos - 1, False, limit and i == up)\n            return ans\n\n        l = 0\n        a = [0] * 12\n        s = {int(d) for d in digits}\n        while n:\n            l += 1\n            a[l] = n % 10\n            n //= 10\n        return dfs(l, True, True)\n",
  "is_python": true
}