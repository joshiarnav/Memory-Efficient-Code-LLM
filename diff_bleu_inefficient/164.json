{
  "problem_idx": "164",
  "metrics": {
    "bleu_score": 0.18144677976639875,
    "edit_similarity": 0.40761636107193233,
    "ast_similarity": 0.7586206896551724,
    "diff_bleu_score": 1.0
  },
  "inefficient_solution": "class Solution:\n    def maximumGap(self, nums: List[int]) -> int:\n        n = len(nums)\n        if n < 2:\n            return 0\n        nums_copy = [x for x in nums]  # create a copy of the entire list\n        sorted_nums = sorted(nums_copy)  # sort the entire list\n        max_diff = 0\n        for i in range(1, n):\n            if sorted_nums[i] - sorted_nums[i-1] > max_diff:\n                max_diff = sorted_nums[i] - sorted_nums[i-1]\n        return max_diff",
  "canonical_solution": "class Solution:\n    def maximumGap(self, nums: List[int]) -> int:\n        n = len(nums)\n        if n < 2:\n            return 0\n        mi, mx = min(nums), max(nums)\n        bucket_size = max(1, (mx - mi) // (n - 1))\n        bucket_count = (mx - mi) // bucket_size + 1\n        buckets = [[inf, -inf] for _ in range(bucket_count)]\n        for v in nums:\n            i = (v - mi) // bucket_size\n            buckets[i][0] = min(buckets[i][0], v)\n            buckets[i][1] = max(buckets[i][1], v)\n        ans = 0\n        prev = inf\n        for curmin, curmax in buckets:\n            if curmin > curmax:\n                continue\n            ans = max(ans, curmin - prev)\n            prev = curmax\n        return ans\n",
  "is_python": true
}