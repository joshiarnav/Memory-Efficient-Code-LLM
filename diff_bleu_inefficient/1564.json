{
  "problem_idx": "1564",
  "metrics": {
    "bleu_score": 0.5080604155999514,
    "edit_similarity": 0.5184782608695653,
    "ast_similarity": 0.96875,
    "diff_bleu_score": 1.0
  },
  "inefficient_solution": "class Solution:\n    def maxBoxesInWarehouse(self, boxes: List[int], warehouse: List[int]) -> int:\n        n = len(warehouse)\n        left = [warehouse[0]] * n\n        temp = [0] * n\n        for i in range(1, n):\n            left[i] = min(left[i - 1], warehouse[i])\n            temp[i] = warehouse[i]\n        boxes.sort()\n        i, j = 0, n - 1\n        arr1 = []\n        for k in range(n):\n            arr1.append(temp[k])\n        arr1.reverse()\n        arr2 = []\n        for k in range(n):\n            arr2.append(left[k])\n        arr2.reverse()\n        while i < len(boxes):\n            arr3 = []\n            while j >= 0 and arr2[j] < boxes[i]:\n                j -= 1\n            if j < 0:\n                break\n            arr3.append(arr1[j])\n            arr3.append(boxes[i])\n            arr3 += arr2[j + 1:]\n            arr3 += arr1[j + 1:]\n            arr1 = arr3\n            i, j = i + 1, j - 1\n        return i",
  "canonical_solution": "class Solution:\n    def maxBoxesInWarehouse(self, boxes: List[int], warehouse: List[int]) -> int:\n        n = len(warehouse)\n        left = [warehouse[0]] * n\n        for i in range(1, n):\n            left[i] = min(left[i - 1], warehouse[i])\n        boxes.sort()\n        i, j = 0, n - 1\n        while i < len(boxes):\n            while j >= 0 and left[j] < boxes[i]:\n                j -= 1\n            if j < 0:\n                break\n            i, j = i + 1, j - 1\n        return i\n",
  "is_python": true
}