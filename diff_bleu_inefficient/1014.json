{
  "problem_idx": "1014",
  "metrics": {
    "bleu_score": 0.2494954780202585,
    "edit_similarity": 0.40336134453781514,
    "ast_similarity": 0.85,
    "diff_bleu_score": 1.0
  },
  "inefficient_solution": "class Solution:\n    def maxScoreSightseeingPair(self, values):\n        max_values = [0 for _ in range(len(values))]\n        max_values[0] = values[0]\n        max_sum = [0 for _ in range(len(values))]\n        max_sum[0] = max_values[0]\n        for j in range(1, len(values)):\n            max_values[j] = max(values[j], max_values[j-1])\n        for j in range(1, len(values)):\n            max_sum[j] = max(max_sum[j-1], max_values[j] + j)\n        max_score = 0\n        for j in range(1, len(values)):\n            max_score = max(max_score, values[j] - j + max_values[j-1])\n        return max_score",
  "canonical_solution": "class Solution:\n    def maxScoreSightseeingPair(self, values: List[int]) -> int:\n        ans, mx = 0, values[0]\n        for j in range(1, len(values)):\n            ans = max(ans, values[j] - j + mx)\n            mx = max(mx, values[j] + j)\n        return ans\n",
  "is_python": true
}