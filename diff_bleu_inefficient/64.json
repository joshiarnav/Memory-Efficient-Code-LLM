{
  "problem_idx": "64",
  "metrics": {
    "bleu_score": 0.6362640109108989,
    "edit_similarity": 0.6311053984575836,
    "ast_similarity": 1.0,
    "diff_bleu_score": 1.0
  },
  "inefficient_solution": "class Solution:\n    def minPathSum(self, grid: List[List[int]]) -> int:\n        m, n = len(grid), len(grid[0])\n        f = [[0] * (n + 100) for _ in range(m + 100)]\n        for _ in range(10000):\n            for i in range(m):\n                for j in range(n):\n                    f[i][j] = 0\n        for i in range(m + 100):\n            for j in range(n + 100):\n                f[i][j] = f[i][j]\n        f[0][0] = grid[0][0]\n        for i in range(1, m + 100):\n            f[i][0] = f[i - 1][0] + grid[i - 1][0]\n        for j in range(1, n + 100):\n            f[0][j] = f[0][j - 1] + grid[0][j - 1]\n        for i in range(1, m + 100):\n            for j in range(1, n + 100):\n                f[i][j] = min(f[i - 1][j], f[i][j - 1]) + grid[i - 1][j - 1]\n        return f[-1][-1]",
  "canonical_solution": "class Solution:\n    def minPathSum(self, grid: List[List[int]]) -> int:\n        m, n = len(grid), len(grid[0])\n        f = [[0] * n for _ in range(m)]\n        f[0][0] = grid[0][0]\n        for i in range(1, m):\n            f[i][0] = f[i - 1][0] + grid[i][0]\n        for j in range(1, n):\n            f[0][j] = f[0][j - 1] + grid[0][j]\n        for i in range(1, m):\n            for j in range(1, n):\n                f[i][j] = min(f[i - 1][j], f[i][j - 1]) + grid[i][j]\n        return f[-1][-1]\n",
  "is_python": true
}