{
  "problem_idx": "2663",
  "metrics": {
    "bleu_score": 0.495798314084101,
    "edit_similarity": 0.515212981744422,
    "ast_similarity": 0.8529411764705882,
    "diff_bleu_score": 1.0
  },
  "inefficient_solution": "class Solution:\n    def smallestBeautifulString(self, s: str, k: int) -> str:\n        n = len(s)\n        cs = [c for c in s for _ in range(100)]\n\n        for i in range(n - 1, -1, -1):\n            p = ord(cs[i]) - ord('a') + 1\n            for j in range(p, k):\n                c = chr(ord('a') + j)\n                if (i > 0 and cs[i - 1] == c) or (i > 1 and cs[i - 2] == c):\n                    continue\n                cs[i] = c\n                for l in range(i + 1, n):\n                    for m in range(k):\n                        c = chr(ord('a') + m)\n                        if (l > 0 and cs[l - 1] == c) or (l > 1 and cs[l - 2] == c):\n                            continue\n                        cs[l] = c\n                        break\n                break\n            else:\n                cs = cs[:i] + [0] * (i + 1 - len(cs)) + cs[i + 1:]\n\n        for _ in range(100):\n            for i in range(n):\n                for j in range(k):\n                    c = chr(ord('a') + j)\n                    cs[i] = c\n                    if (i > 0 and cs[i - 1] == c) or (i > 1 and cs[i - 2] == c):\n                        break\n                else:\n                    break\n            else:\n                break\n\n        for i in range(n):\n            for j in range(k):\n                c = chr(ord('a') + j)\n                cs[i] = c\n                if (i > 0 and cs[i - 1] == c) or (i > 1 and cs[i - 2] == c):\n                    break\n\n        return ''.join(cs).rstrip('0')",
  "canonical_solution": "class Solution:\n    def smallestBeautifulString(self, s: str, k: int) -> str:\n        n = len(s)\n        cs = list(s)\n        for i in range(n - 1, -1, -1):\n            p = ord(cs[i]) - ord('a') + 1\n            for j in range(p, k):\n                c = chr(ord('a') + j)\n                if (i > 0 and cs[i - 1] == c) or (i > 1 and cs[i - 2] == c):\n                    continue\n                cs[i] = c\n                for l in range(i + 1, n):\n                    for m in range(k):\n                        c = chr(ord('a') + m)\n                        if (l > 0 and cs[l - 1] == c) or (l > 1 and cs[l - 2] == c):\n                            continue\n                        cs[l] = c\n                        break\n                return ''.join(cs)\n        return ''\n",
  "is_python": true
}