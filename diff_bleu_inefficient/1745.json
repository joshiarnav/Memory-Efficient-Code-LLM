{
  "problem_idx": "1745",
  "metrics": {
    "bleu_score": 0.6648429077884004,
    "edit_similarity": 0.749185667752443,
    "ast_similarity": 0.9310344827586207,
    "diff_bleu_score": 1.0
  },
  "inefficient_solution": "class Solution:\n    def checkPartitioning(self, s: str) -> bool:\n        n = len(s)\n        g = [[[True for _ in range(n)] for _ in range(n)] for _ in range(n)]\n        for i in range(n - 1, -1, -1):\n            for j in range(i + 1, n):\n                for k in range(j, n):\n                    g[i][j][k] = s[i] == s[k] and (j - i == k - j or g[i + 1][j - 1][k - 1])\n        for i in range(n - 2):\n            for j in range(i + 1, n - 1):\n                for l in range(j + 1, n):\n                    if g[0][i][j] and g[i + 1][j][l] and g[j + 1][l][-1]:\n                        return True\n        return False",
  "canonical_solution": "class Solution:\n    def checkPartitioning(self, s: str) -> bool:\n        n = len(s)\n        g = [[True] * n for _ in range(n)]\n        for i in range(n - 1, -1, -1):\n            for j in range(i + 1, n):\n                g[i][j] = s[i] == s[j] and (i + 1 == j or g[i + 1][j - 1])\n        for i in range(n - 2):\n            for j in range(i + 1, n - 1):\n                if g[0][i] and g[i + 1][j] and g[j + 1][-1]:\n                    return True\n        return False\n",
  "is_python": true
}