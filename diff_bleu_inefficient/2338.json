{
  "problem_idx": "2338",
  "metrics": {
    "bleu_score": 0.34448100951239163,
    "edit_similarity": 0.5302375809935205,
    "ast_similarity": 0.7297297297297297,
    "diff_bleu_score": 1.0
  },
  "inefficient_solution": "class Solution:\n    def idealArrays(self, n: int, maxValue: int) -> int:\n        c = [[0] * maxValue for _ in range(2 ** maxValue)]\n        mod = 10**9 + 7\n        for i in range(maxValue):\n            c[1 << i][i] = 1\n        for i in range(1, maxValue):\n            for j in range(1 << maxValue):\n                for k in range(i, maxValue):\n                    if (1 << k) & j == 0:\n                        c[j | 1 << k][k] = (c[j | 1 << k][k] + c[j][i]) % mod\n        ans = 0\n        n_ = [0] * (n + 1)\n        for i in range(1, maxValue + 1):\n            n_[i] = n_\n            n_[i][0] = 1\n            for j in range(1, maxValue + 1):\n                n_[i][j] = n_[i][j - 1]\n                if i % j == 0:\n                    n_[i][j] += n_[i // j][j]\n                    n_[i][j] %= mod\n        for i in range(1, maxValue + 1):\n            ans = (ans + c[(1 << maxValue) - 1][i - 1] * n_[i][n]) % mod\n        return ans",
  "canonical_solution": "class Solution:\n    def idealArrays(self, n: int, maxValue: int) -> int:\n        @cache\n        def dfs(i, cnt):\n            res = c[-1][cnt - 1]\n            if cnt < n:\n                k = 2\n                while k * i <= maxValue:\n                    res = (res + dfs(k * i, cnt + 1)) % mod\n                    k += 1\n            return res\n\n        c = [[0] * 16 for _ in range(n)]\n        mod = 10**9 + 7\n        for i in range(n):\n            for j in range(min(16, i + 1)):\n                c[i][j] = 1 if j == 0 else (c[i - 1][j] + c[i - 1][j - 1]) % mod\n        ans = 0\n        for i in range(1, maxValue + 1):\n            ans = (ans + dfs(i, 1)) % mod\n        return ans\n",
  "is_python": true
}