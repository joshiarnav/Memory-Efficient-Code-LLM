{
  "problem_idx": "960",
  "metrics": {
    "bleu_score": 0.35921074578766354,
    "edit_similarity": 0.5256637168141594,
    "ast_similarity": 0.8888888888888888,
    "diff_bleu_score": 1.0
  },
  "inefficient_solution": "class Solution:\n    def minDeletionSize(self, strs: List[str]) -> int:\n        n = len(strs[0])\n        dp = [[-1] * n for _ in range(n)]\n        for i in range(n):\n            dp[i][i] = 0\n        for length in range(2, n + 1):\n            for i in range(n - length + 1):\n                j = i + length - 1\n                for k in range(i, j):\n                    if all(strs[m][i] <= strs[m][k + 1] for m in range(len(strs))):\n                        dp[i][j] = max(dp[i][j], dp[i][k] + 1)\n        max_val = max(max(row) for row in dp)\n        return n - max_val",
  "canonical_solution": "class Solution:\n    def minDeletionSize(self, strs: List[str]) -> int:\n        n = len(strs[0])\n        dp = [1] * n\n        for i in range(1, n):\n            for j in range(i):\n                if all(s[j] <= s[i] for s in strs):\n                    dp[i] = max(dp[i], dp[j] + 1)\n        return n - max(dp)\n",
  "is_python": true
}