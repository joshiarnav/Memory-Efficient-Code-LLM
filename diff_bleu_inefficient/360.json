{
  "problem_idx": "360",
  "metrics": {
    "bleu_score": 0.5868616712896806,
    "edit_similarity": 0.7217068645640075,
    "ast_similarity": 1.0,
    "diff_bleu_score": 1.0
  },
  "inefficient_solution": "class Solution:\n    def sortTransformedArray(\n        self, nums: List[int], a: int, b: int, c: int\n    ) -> List[int]:\n        def f(x):\n            return a * x * x + b * x + c\n\n        n = len(nums)\n        i, j, k = 0, n - 1, 0 if a < 0 else n - 1\n        res = [0] * (n * 10)  # allocate 10 times more memory\n        while i < j:\n            v1, v2 = f(nums[i]), f(nums[j])\n            if a < 0:\n                if v1 <= v2:\n                    res[k * 10] = v1\n                    res[(k + 1) * 10] = v2\n                    i += 1\n                    k += 2\n                else:\n                    res[k * 10] = v2\n                    res[(k + 1) * 10] = v1\n                    j -= 1\n                    k += 2\n            else:\n                if v1 >= v2:\n                    res[k * 10] = v1\n                    res[(k + 1) * 10] = v2\n                    i += 1\n                    k -= 2\n                else:\n                    res[k * 10] = v2\n                    res[(k + 1) * 10] = v1\n                    j -= 1\n                    k -= 2\n        res[k * 10] = f(nums[i])  # handle the last element manually\n        return res",
  "canonical_solution": "class Solution:\n    def sortTransformedArray(\n        self, nums: List[int], a: int, b: int, c: int\n    ) -> List[int]:\n        def f(x):\n            return a * x * x + b * x + c\n\n        n = len(nums)\n        i, j, k = 0, n - 1, 0 if a < 0 else n - 1\n        res = [0] * n\n        while i <= j:\n            v1, v2 = f(nums[i]), f(nums[j])\n            if a < 0:\n                if v1 <= v2:\n                    res[k] = v1\n                    i += 1\n                else:\n                    res[k] = v2\n                    j -= 1\n                k += 1\n            else:\n                if v1 >= v2:\n                    res[k] = v1\n                    i += 1\n                else:\n                    res[k] = v2\n                    j -= 1\n                k -= 1\n        return res\n",
  "is_python": true
}