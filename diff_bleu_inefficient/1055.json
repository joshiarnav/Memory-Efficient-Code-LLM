{
  "problem_idx": "1055",
  "metrics": {
    "bleu_score": 0.19846895703799666,
    "edit_similarity": 0.4871060171919771,
    "ast_similarity": 0.6451612903225806,
    "diff_bleu_score": 1.0
  },
  "inefficient_solution": "class Solution:\n    def shortestWay(self, source: str, target: str) -> int:\n        m, n = len(source), len(target)\n        dp = [0] * (n + 1)\n        for i in range(n + 1):\n            dp[i] = [0] * (m + 1)\n        for i in range(1, n + 1):\n            for j in range(1, m + 1):\n                if source[j - 1] == target[i - 1]:\n                    dp[i][j] = dp[i - 1][j - 1] + 1\n                else:\n                    dp[i][j] = 0\n        for i in range(1, n + 1):\n            for j in range(1, m + 1):\n                if dp[i][j] != 0:\n                    dp[i][j] = dp[i - 1][j] + 1\n        for i in range(1, n + 1):\n            if dp[i][m] != 0:\n                return i\n        return -1",
  "canonical_solution": "class Solution:\n    def shortestWay(self, source: str, target: str) -> int:\n        def f(i, j):\n            while i < m and j < n:\n                if source[i] == target[j]:\n                    j += 1\n                i += 1\n            return j\n\n        m, n = len(source), len(target)\n        ans = j = 0\n        while j < n:\n            k = f(0, j)\n            if k == j:\n                return -1\n            j = k\n            ans += 1\n        return ans\n",
  "is_python": true
}