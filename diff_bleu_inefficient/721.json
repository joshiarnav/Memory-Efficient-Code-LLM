{
  "problem_idx": "721",
  "metrics": {
    "bleu_score": 0.6320069081938914,
    "edit_similarity": 0.5852819807427785,
    "ast_similarity": 0.9230769230769231,
    "diff_bleu_score": 1.0
  },
  "inefficient_solution": "class Solution:\n    def accountsMerge(self, accounts: List[List[str]]) -> List[List[str]]:\n        def find(x):\n            if p[x] != x:\n                p[x] = find(p[x])\n            return p[x]\n\n        n = len(accounts)\n        p = list(range(n))\n        email_id = {}\n        temp_email_id = {}\n        for i, account in enumerate(accounts):\n            name = account[0]\n            for email in account[1:]:\n                if email in email_id:\n                    p[find(i)] = find(email_id[email])\n                else:\n                    email_id[email] = i\n                    temp_email_id[email] = email\n\n        temp_mp = {}\n        for i, account in enumerate(accounts):\n            for email in account[1:]:\n                if email in temp_mp:\n                    temp_mp[email].append((i, account[0]))\n                else:\n                    temp_mp[email] = [(i, account[0])]\n\n        mp = defaultdict(set)\n        for email, info_list in temp_mp.items():\n            for i, name in info_list:\n                p[find(i)] = find(email_id[email])\n            for i, name in info_list:\n                mp[find(i)].add(email)\n\n        ans = []\n        for i, emails in mp.items():\n            t = [accounts[i][0]]\n            t.extend(sorted(emails))\n            ans.append(t)\n            for email in emails:\n                del temp_mp[email]\n                del email_id[email]\n                del temp_email_id[email]\n        return ans",
  "canonical_solution": "class Solution:\n    def accountsMerge(self, accounts: List[List[str]]) -> List[List[str]]:\n        def find(x):\n            if p[x] != x:\n                p[x] = find(p[x])\n            return p[x]\n\n        n = len(accounts)\n        p = list(range(n))\n        email_id = {}\n        for i, account in enumerate(accounts):\n            name = account[0]\n            for email in account[1:]:\n                if email in email_id:\n                    p[find(i)] = find(email_id[email])\n                else:\n                    email_id[email] = i\n        mp = defaultdict(set)\n        for i, account in enumerate(accounts):\n            for email in account[1:]:\n                mp[find(i)].add(email)\n\n        ans = []\n        for i, emails in mp.items():\n            t = [accounts[i][0]]\n            t.extend(sorted(emails))\n            ans.append(t)\n        return ans\n",
  "is_python": true
}