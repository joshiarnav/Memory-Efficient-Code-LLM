{
  "problem_idx": "2242",
  "metrics": {
    "bleu_score": 0.14590197095623295,
    "edit_similarity": 0.22423146473779387,
    "ast_similarity": 0.6666666666666666,
    "diff_bleu_score": 1.0
  },
  "inefficient_solution": "class Solution:\n    def maximumScore(self, scores, edges):\n        n = len(scores)\n        adj_list = [[] for _ in range(n)]\n        degree = [0] * n\n        score_array = [0] * n\n        adj_edge = {}\n        for a, b in edges:\n            adj_list[a].append(b)\n            adj_list[b].append(a)\n            degree[a] += 1\n            degree[b] += 1\n            if a not in adj_edge:\n                adj_edge[a] = []\n            if b not in adj_edge:\n                adj_edge[b] = []\n            adj_edge[a].append((b, (a, b)))\n            adj_edge[b].append((a, (b, a)))\n        for i in range(n):\n            score_array[i] = scores[i]\n        \n        ans = float('-inf')\n        for a in range(n):\n            for b in adj_list[a]:\n                for c in adj_list[a]:\n                    if b != c:\n                        for d in adj_list[b]:\n                            if d != a and d != c:\n                                for e in adj_list[b]:\n                                    if e != a and e != d and e != c:\n                                        for f in adj_list[d]:\n                                            if f != a and f != b and f != d and f != e and f != c:\n                                                for g in adj_list[d]:\n                                                    if g != a and g != b and g != d and g != e and g != f and g != c:\n                                                        for h in adj_list[d]:\n                                                            if h != a and h != b and h != d and h != e and h != f and h != g and h != c:\n                                                                for i in adj_list[d]:\n                                                                    if i != a and i != b and i != d and i != e and i != f and i != g and i != h and i != c:\n                                                                        t = score_array[a] + score_array[b] + score_array[c] + score_array[d] + score_array[e] + score_array[f] + score_array[g] + score_array[h] + score_array[i]\n                                                                        ans = max(ans, t)\n        if ans == float('-inf'):\n            return -1\n        return ans",
  "canonical_solution": "class Solution:\n    def maximumScore(self, scores: List[int], edges: List[List[int]]) -> int:\n        g = defaultdict(list)\n        for a, b in edges:\n            g[a].append(b)\n            g[b].append(a)\n        for k in g.keys():\n            g[k] = nlargest(3, g[k], key=lambda x: scores[x])\n        ans = -1\n        for a, b in edges:\n            for c in g[a]:\n                for d in g[b]:\n                    if b != c != d != a:\n                        t = scores[a] + scores[b] + scores[c] + scores[d]\n                        ans = max(ans, t)\n        return ans\n",
  "is_python": true
}