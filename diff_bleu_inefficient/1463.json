{
  "problem_idx": "1463",
  "metrics": {
    "bleu_score": 0.5595312830808538,
    "edit_similarity": 0.5553772070626003,
    "ast_similarity": 0.9714285714285714,
    "diff_bleu_score": 1.0
  },
  "inefficient_solution": "class Solution:\n    def cherryPickup(self, grid):\n        m, n = len(grid), len(grid[0])\n        f = [[[-1] * (n * 2) for _ in range(n)] for _ in range(m)]\n        g = [[[-1] * (n * 2) for _ in range(n)] for _ in range(m)]\n        f[0][n - 1][n - 1] = grid[0][0] + grid[0][n - 1]\n        for i in range(m):\n            for j1 in range(n):\n                for j2 in range(n):\n                    for k1 in range(n):\n                        for k2 in range(n):\n                            if i == 0 and j1 == n - 1 and j2 == n - 1:\n                                continue\n                            x = grid[i][j1] + (0 if j1 == j2 else grid[i][j2])\n                            for y1 in range(j1 - 1, j1 + 2):\n                                for y2 in range(j2 - 1, j2 + 2):\n                                    for l1 in range(k1 - 1, k1 + 2):\n                                        for l2 in range(k2 - 1, k2 + 2):\n                                            if 0 <= y1 < n and 0 <= y2 < n and 0 <= l1 < n and 0 <= l2 < n and f[i][y1][l1] != -1:\n                                                g[i][j1][j2] = max(g[i][j1][j2], f[i][y1][l1] + x)\n            f, g = g, f\n        return max(f[m - 1][j1][j2] for j1 in range(n) for j2 in range(n))",
  "canonical_solution": "class Solution:\n    def cherryPickup(self, grid: List[List[int]]) -> int:\n        m, n = len(grid), len(grid[0])\n        f = [[-1] * n for _ in range(n)]\n        g = [[-1] * n for _ in range(n)]\n        f[0][n - 1] = grid[0][0] + grid[0][n - 1]\n        for i in range(1, m):\n            for j1 in range(n):\n                for j2 in range(n):\n                    x = grid[i][j1] + (0 if j1 == j2 else grid[i][j2])\n                    for y1 in range(j1 - 1, j1 + 2):\n                        for y2 in range(j2 - 1, j2 + 2):\n                            if 0 <= y1 < n and 0 <= y2 < n and f[y1][y2] != -1:\n                                g[j1][j2] = max(g[j1][j2], f[y1][y2] + x)\n            f, g = g, f\n        return max(f[j1][j2] for j1, j2 in product(range(n), range(n)))\n",
  "is_python": true
}