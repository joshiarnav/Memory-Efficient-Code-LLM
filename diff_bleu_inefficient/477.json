{
  "problem_idx": "477",
  "metrics": {
    "bleu_score": 0.42160296695497995,
    "edit_similarity": 0.5577235772357724,
    "ast_similarity": 0.9130434782608695,
    "diff_bleu_score": 1.0
  },
  "inefficient_solution": "class Solution:\n    def totalHammingDistance(self, nums: List[int]) -> int:\n        ans = 0\n        for i in range(31):\n            a = [0] * len(nums)\n            b = [0] * len(nums)\n            for j, v in enumerate(nums):\n                t = (v >> i) & 1\n                if t:\n                    a[j] = 1\n                else:\n                    b[j] = 1\n            count_a = 0\n            count_b = 0\n            for j in range(len(nums)):\n                if a[j]:\n                    count_a += 1\n                else:\n                    count_b += 1\n            ans += count_a * count_b\n        return ans",
  "canonical_solution": "class Solution:\n    def totalHammingDistance(self, nums: List[int]) -> int:\n        ans = 0\n        for i in range(31):\n            a = b = 0\n            for v in nums:\n                t = (v >> i) & 1\n                if t:\n                    a += 1\n                else:\n                    b += 1\n            ans += a * b\n        return ans\n",
  "is_python": true
}