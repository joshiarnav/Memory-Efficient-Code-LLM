{
  "problem_idx": "1888",
  "metrics": {
    "bleu_score": 0.2377496499216514,
    "edit_similarity": 0.28420038535645475,
    "ast_similarity": 0.6451612903225806,
    "diff_bleu_score": 1.0
  },
  "inefficient_solution": "class Solution:\n    def minFlips(self, s: str) -> int:\n        n = len(s)\n        max_str = [\"0\" * n, \"1\" * n]\n        min_str = [\"0\" * n, \"1\" * n]\n        for i in range(n):\n            for s1 in max_str:\n                for s2 in min_str:\n                    if s[i] != s1[i & 1] and s[i] != s2[i & 1]:\n                        max_str.remove(s1)\n                        max_str.remove(s2)\n            for s1 in max_str:\n                for s2 in min_str:\n                    if s[i] != s1[(i + n) & 1] and s[i] != s2[(i + n) & 1]:\n                        min_str.remove(s1)\n                        min_str.remove(s2)\n            max_str = [\"0\" * n, \"1\" * n]\n            min_str = [\"0\" * n, \"1\" * n]\n        ans = n\n        for s1 in max_str:\n            for s2 in min_str:\n                cnt = 0\n                for i in range(n):\n                    if s[i] != s1[i & 1]:\n                        cnt += 1\n                    if s[i] != s2[i & 1]:\n                        cnt += 1\n                ans = min(ans, cnt)\n        return ans",
  "canonical_solution": "class Solution:\n    def minFlips(self, s: str) -> int:\n        n = len(s)\n        target = \"01\"\n        cnt = sum(c != target[i & 1] for i, c in enumerate(s))\n        ans = min(cnt, n - cnt)\n        for i in range(n):\n            cnt -= s[i] != target[i & 1]\n            cnt += s[i] != target[(i + n) & 1]\n            ans = min(ans, cnt, n - cnt)\n        return ans\n",
  "is_python": true
}