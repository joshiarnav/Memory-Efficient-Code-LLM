{
  "problem_idx": "2088",
  "metrics": {
    "bleu_score": 0.15848309379385225,
    "edit_similarity": 0.19030837004405288,
    "ast_similarity": 1.0,
    "diff_bleu_score": 1.0
  },
  "inefficient_solution": "class Solution:\n    def countPyramids(self, grid: List[List[int]]) -> int:\n        m, n = len(grid), len(grid[0])\n        f = [[0] * (n + 2) for _ in range(m + 2)]\n        f2 = [[0] * (n + 2) for _ in range(m + 2)]\n        f3 = [[0] * (n + 2) for _ in range(m + 2)]\n        f4 = [[0] * (n + 2) for _ in range(m + 2)]\n        f5 = [[0] * (n + 2) for _ in range(m + 2)]\n        f6 = [[0] * (n + 2) for _ in range(m + 2)]\n        f7 = [[0] * (n + 2) for _ in range(m + 2)]\n        f8 = [[0] * (n + 2) for _ in range(m + 2)]\n        f9 = [[0] * (n + 2) for _ in range(m + 2)]\n        f10 = [[0] * (n + 2) for _ in range(m + 2)]\n        f11 = [[0] * (n + 2) for _ in range(m + 2)]\n        f12 = [[0] * (n + 2) for _ in range(m + 2)]\n        ans = 0\n        for i in range(m - 1, -1, -1):\n            for j in range(n):\n                if grid[i][j] == 0:\n                    f[i][j] = -1\n                    f2[i][j] = -1\n                    f3[i][j] = -1\n                    f4[i][j] = -1\n                    f5[i][j] = -1\n                    f6[i][j] = -1\n                    f7[i][j] = -1\n                    f8[i][j] = -1\n                    f9[i][j] = -1\n                    f10[i][j] = -1\n                    f11[i][j] = -1\n                    f12[i][j] = -1\n                elif not (i == m - 1 or j == 0 or j == n - 1):\n                    f[i][j] = min(f[i + 1][j - 1], f[i + 1][j], f[i + 1][j + 1]) + 1\n                    f2[i][j] = min(f2[i + 1][j - 1], f2[i + 1][j], f2[i + 1][j + 1]) + 1\n                    f3[i][j] = min(f3[i + 1][j - 1], f3[i + 1][j], f3[i + 1][j + 1]) + 1\n                    f4[i][j] = min(f4[i + 1][j - 1], f4[i + 1][j], f4[i + 1][j + 1]) + 1\n                    f5[i][j] = min(f5[i + 1][j - 1], f5[i + 1][j], f5[i + 1][j + 1]) + 1\n                    f6[i][j] = min(f6[i + 1][j - 1], f6[i + 1][j], f6[i + 1][j + 1]) + 1\n                    f7[i][j] = min(f7[i + 1][j - 1], f7[i + 1][j], f7[i + 1][j + 1]) + 1\n                    f8[i][j] = min(f8[i + 1][j - 1], f8[i + 1][j], f8[i + 1][j + 1]) + 1\n                    f9[i][j] = min(f9[i + 1][j - 1], f9[i + 1][j], f9[i + 1][j + 1]) + 1\n                    f10[i][j] = min(f10[i + 1][j - 1], f10[i + 1][j], f10[i + 1][j + 1]) + 1\n                    f11[i][j] = min(f11[i + 1][j - 1], f11[i + 1][j], f11[i + 1][j + 1]) + 1\n                    f12[i][j] = min(f12[i + 1][j - 1], f12[i + 1][j], f12[i + 1][j + 1]) + 1\n                    ans += f[i][j]\n        for i in range(m):\n            for j in range(n):\n                if grid[i][j] == 0:\n                    f[i][j] = -1\n                    f2[i][j] = -1\n                    f3[i][j] = -1\n                    f4[i][j] = -1\n                    f5[i][j] = -1\n                    f6[i][j] = -1\n                    f7[i][j] = -1\n                    f8[i][j] = -1\n                    f9[i][j] = -1\n                    f10[i][j] = -1\n                    f11[i][j] = -1\n                    f12[i][j] = -1\n                elif i == 0 or j == 0 or j == n - 1:\n                    f[i][j] = 0\n                    f2[i][j] = 0\n                    f3[i][j] = 0\n                    f4[i][j] = 0\n                    f5[i][j] = 0\n                    f6[i][j] = 0\n                    f7[i][j] = 0\n                    f8[i][j] = 0\n                    f9[i][j] = 0\n                    f10[i][j] = 0\n                    f11[i][j] = 0\n                    f12[i][j] = 0\n                else:\n                    f[i][j] = min(f[i - 1][j - 1], f[i - 1][j], f[i - 1][j + 1]) + 1\n                    f2[i][j] = min(f2[i - 1][j - 1], f2[i - 1][j], f2[i - 1][j + 1]) + 1\n                    f3[i][j] = min(f3[i - 1][j - 1], f3[i - 1][j], f3[i - 1][j + 1]) + 1\n                    f4[i][j] = min(f4[i - 1][j - 1], f4[i - 1][j], f4[i - 1][j + 1]) + 1\n                    f5[i][j] = min(f5[i - 1][j - 1], f5[i - 1][j], f5[i - 1][j + 1]) + 1\n                    f6[i][j] = min(f6[i - 1][j - 1], f6[i - 1][j], f6[i - 1][j + 1]) + 1\n                    f7[i][j] = min(f7[i - 1][j - 1], f7[i - 1][j], f7[i - 1][j + 1]) + 1\n                    f8[i][j] = min(f8[i - 1][j - 1], f8[i - 1][j], f8[i - 1][j + 1]) + 1\n                    f9[i][j] = min(f9[i - 1][j - 1], f9[i - 1][j], f9[i - 1][j + 1]) + 1\n                    f10[i][j] = min(f10[i - 1][j - 1], f10[i - 1][j], f10[i - 1][j + 1]) + 1\n                    f11[i][j] = min(f11[i - 1][j - 1], f11[i - 1][j], f11[i - 1][j + 1]) + 1\n                    f12[i][j] = min(f12[i - 1][j - 1], f12[i - 1][j], f12[i - 1][j + 1]) + 1\n                    ans += f[i][j]\n        return ans",
  "canonical_solution": "class Solution:\n    def countPyramids(self, grid: List[List[int]]) -> int:\n        m, n = len(grid), len(grid[0])\n        f = [[0] * n for _ in range(m)]\n        ans = 0\n        for i in range(m - 1, -1, -1):\n            for j in range(n):\n                if grid[i][j] == 0:\n                    f[i][j] = -1\n                elif not (i == m - 1 or j == 0 or j == n - 1):\n                    f[i][j] = min(f[i + 1][j - 1], f[i + 1][j], f[i + 1][j + 1]) + 1\n                    ans += f[i][j]\n        for i in range(m):\n            for j in range(n):\n                if grid[i][j] == 0:\n                    f[i][j] = -1\n                elif i == 0 or j == 0 or j == n - 1:\n                    f[i][j] = 0\n                else:\n                    f[i][j] = min(f[i - 1][j - 1], f[i - 1][j], f[i - 1][j + 1]) + 1\n                    ans += f[i][j]\n        return ans\n",
  "is_python": true
}