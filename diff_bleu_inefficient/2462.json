{
  "problem_idx": "2462",
  "metrics": {
    "bleu_score": 0.19572179146329405,
    "edit_similarity": 0.45646437994722955,
    "ast_similarity": 0.75,
    "diff_bleu_score": 1.0
  },
  "inefficient_solution": "class Solution:\n    def totalCost(self, costs, k, candidates):\n        n = len(costs)\n        workers = [0] * n\n        for i in range(candidates):\n            workers[i] = (costs[i], i)\n        for i in range(n - candidates, n):\n            workers[i] = (costs[i], i)\n        for i in range(n):\n            if i > candidates - 1:\n                workers[i] = (workers[i-candidates], 0)\n        for i in range(n):\n            if i > n - candidates:\n                workers[i] = (workers[i-candidates], 0)\n        ans = 0\n        for _ in range(k):\n            min_val = float('inf')\n            min_i = -1\n            for i in range(candidates, n - candidates):\n                if workers[i][0] < min_val:\n                    min_val = workers[i][0]\n                    min_i = workers[i][1]\n            ans += min_val\n            for i in range(candidates, n - candidates):\n                if workers[i][1] == min_i:\n                    workers[i] = (float('inf'), 0)\n            for i in range(candidates, n - candidates):\n                if i > 0:\n                    workers[i] = (workers[i-1][0], workers[i-1][1])\n        return ans",
  "canonical_solution": "class Solution:\n    def totalCost(self, costs: List[int], k: int, candidates: int) -> int:\n        q = []\n        n = len(costs)\n        i, j = candidates - 1, n - candidates\n        for h in range(candidates):\n            q.append((costs[h], h))\n        for h in range(n - candidates, n):\n            if h > i:\n                q.append((costs[h], h))\n        heapify(q)\n        ans = 0\n        for _ in range(k):\n            c, x = heappop(q)\n            ans += c\n            if x <= i:\n                i += 1\n                if i < j:\n                    heappush(q, (costs[i], i))\n            if x >= j:\n                j -= 1\n                if i < j:\n                    heappush(q, (costs[j], j))\n        return ans\n",
  "is_python": true
}