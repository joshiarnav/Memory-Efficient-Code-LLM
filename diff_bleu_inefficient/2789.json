{
  "problem_idx": "2789",
  "metrics": {
    "bleu_score": 0.30039565577401167,
    "edit_similarity": 0.29670329670329665,
    "ast_similarity": 0.8461538461538461,
    "diff_bleu_score": 1.0
  },
  "inefficient_solution": "class Solution:\n    def maxArrayValue(self, nums: List[int]) -> int:\n        nums_copy = [0] * (3 * len(nums))\n        nums_offset = 0\n        for n in nums:\n            nums_copy[nums_offset] = n\n            nums_offset += 1\n        largest = max(nums_copy)\n        for i in range(len(nums) - 2, -1, -1):\n            if nums_copy[i] <= nums_copy[i + 1]:\n                new_val = nums_copy[i] + nums_copy[i + 1]\n                nums_copy = [0] * (3 * len(nums))\n                nums_offset = 0\n                for n in nums_copy[:i+1] + [new_val] + nums_copy[i+1:]:\n                    nums_copy[nums_offset] = n\n                    nums_offset += 1\n                largest = max(largest, max(nums_copy))\n        return largest",
  "canonical_solution": "class Solution:\n    def maxArrayValue(self, nums: List[int]) -> int:\n        for i in range(len(nums) - 2, -1, -1):\n            if nums[i] <= nums[i + 1]:\n                nums[i] += nums[i + 1]\n        return max(nums)\n",
  "is_python": true
}