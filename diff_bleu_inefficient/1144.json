{
  "problem_idx": "1144",
  "metrics": {
    "bleu_score": 0.14388197004619088,
    "edit_similarity": 0.29290617848970246,
    "ast_similarity": 0.6470588235294118,
    "diff_bleu_score": 1.0
  },
  "inefficient_solution": "class Solution:\n    def movesToMakeZigzag(self, nums: List[int]) -> int:\n        n = len(nums)\n        even = [num for num in nums if i % 2 == 0 for i in range(n)]\n        odd = [num for num in nums if i % 2 != 0 for i in range(n)]\n        even_max_right = [float('-inf')] * n\n        odd_max_right = [float('-inf')] * n\n        for i in range(n - 1, -1, -1):\n            even_max_right[i] = max(even_max_right[i + 1], even[i] - 1)\n            odd_max_right[i] = max(odd_max_right[i + 1], odd[i] - 1)\n        even_moves = 0\n        odd_moves = 0\n        for i in range(n):\n            if i % 2 == 0:\n                if i > 0 and nums[i] <= nums[i - 1]:\n                    even_moves += nums[i - 1] - nums[i] + 1\n                elif i < n - 1 and nums[i] <= nums[i + 1]:\n                    even_moves += nums[i + 1] - nums[i] + 1\n                else:\n                    even_moves += max(0, even_max_right[i] - nums[i] + 1)\n            else:\n                if i > 0 and nums[i] <= nums[i - 1]:\n                    odd_moves += nums[i - 1] - nums[i] + 1\n                elif i < n - 1 and nums[i] <= nums[i + 1]:\n                    odd_moves += nums[i + 1] - nums[i] + 1\n                else:\n                    odd_moves += max(0, odd_max_right[i] - nums[i] + 1)\n        return min(even_moves, odd_moves)",
  "canonical_solution": "class Solution:\n    def movesToMakeZigzag(self, nums: List[int]) -> int:\n        ans = [0, 0]\n        n = len(nums)\n        for i in range(2):\n            for j in range(i, n, 2):\n                d = 0\n                if j:\n                    d = max(d, nums[j] - nums[j - 1] + 1)\n                if j < n - 1:\n                    d = max(d, nums[j] - nums[j + 1] + 1)\n                ans[i] += d\n        return min(ans)\n",
  "is_python": true
}