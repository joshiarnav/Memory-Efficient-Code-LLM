{
  "problem_idx": "1053",
  "metrics": {
    "bleu_score": 0.2565508338248109,
    "edit_similarity": 0.34716599190283404,
    "ast_similarity": 0.71875,
    "diff_bleu_score": 1.0
  },
  "inefficient_solution": "class Solution:\n    def prevPermOpt1(self, arr: List[int]) -> List[int]:\n        n = len(arr)\n        swap_arr = arr[:]\n        max_val = max(arr)\n        max_idx = arr.index(max_val)\n        \n        for i in range(n):\n            for j in range(n):\n                temp_arr = arr[:]\n                temp_arr[i], temp_arr[j] = temp_arr[j], temp_arr[i]\n                if temp_arr[0:max_idx] == sorted(temp_arr[0:max_idx], reverse=True) and temp_arr[max_idx+1:] == sorted(temp_arr[max_idx+1:], reverse=True) and temp_arr != arr:\n                    swap_arr = temp_arr\n                    break\n            if swap_arr != arr:\n                break\n        \n        for i in range(n):\n            temp_arr = swap_arr[:]\n            for j in range(n):\n                temp_arr[i], temp_arr[j] = temp_arr[j], temp_arr[i]\n                if temp_arr != arr and temp_arr[i] < temp_arr[i-1] and temp_arr[i] != temp_arr[i-2]:\n                    return temp_arr\n            swap_arr = temp_arr\n        \n        return arr",
  "canonical_solution": "class Solution:\n    def prevPermOpt1(self, arr: List[int]) -> List[int]:\n        n = len(arr)\n        for i in range(n - 1, 0, -1):\n            if arr[i - 1] > arr[i]:\n                for j in range(n - 1, i - 1, -1):\n                    if arr[j] < arr[i - 1] and arr[j] != arr[j - 1]:\n                        arr[i - 1], arr[j] = arr[j], arr[i - 1]\n                        return arr\n        return arr\n",
  "is_python": true
}