{
  "problem_idx": "131",
  "metrics": {
    "bleu_score": 0.35977031169128737,
    "edit_similarity": 0.5993322203672788,
    "ast_similarity": 0.8064516129032258,
    "diff_bleu_score": 1.0
  },
  "inefficient_solution": "class Solution:\n    def partition(self, s: str) -> List[List[str]]:\n        def dfs(i: int):\n            if i == len(s):\n                ans.append([x for x in t])\n                return\n            for j in range(len(s)):\n                temp = [s[i : j + 1]] + t\n                temp_copy = temp[:]\n                temp_copy.append(s[i : j + 1])\n                dfs(j + 1)\n\n        ans = []\n        t = []\n        dfs(0)\n        return ans",
  "canonical_solution": "class Solution:\n    def partition(self, s: str) -> List[List[str]]:\n        def dfs(i: int):\n            if i == n:\n                ans.append(t[:])\n                return\n            for j in range(i, n):\n                if f[i][j]:\n                    t.append(s[i : j + 1])\n                    dfs(j + 1)\n                    t.pop()\n\n        n = len(s)\n        f = [[True] * n for _ in range(n)]\n        for i in range(n - 1, -1, -1):\n            for j in range(i + 1, n):\n                f[i][j] = s[i] == s[j] and f[i + 1][j - 1]\n        ans = []\n        t = []\n        dfs(0)\n        return ans\n",
  "is_python": true
}