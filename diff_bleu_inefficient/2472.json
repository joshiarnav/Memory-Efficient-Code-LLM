{
  "problem_idx": "2472",
  "metrics": {
    "bleu_score": 0.5383695630092483,
    "edit_similarity": 0.5161676646706587,
    "ast_similarity": 0.7878787878787878,
    "diff_bleu_score": 1.0
  },
  "inefficient_solution": "class Solution:\n    def maxPalindromes(self, s: str, k: int) -> int:\n        n = len(s)\n        dp = [[[False for _ in range(n)] for _ in range(n)] for _ in range(n)]\n        for i in range(n):\n            for j in range(i + 1, n):\n                dp[i][i][j] = s[i] == s[j]\n                for m in range(i + 1, j):\n                    dp[i][m][j] = s[i] == s[j] and dp[i + 1][m - 1][j - 1]\n\n        def dfs(i, cache):\n            if i >= n:\n                return 0\n            if (i, len(cache)) in cache:\n                return cache[(i, len(cache))]\n            ans = dfs(i + 1, cache)\n            for j in range(i + k - 1, n):\n                if dp[i][j][j]:\n                    ans = max(ans, 1 + dfs(j + 1, cache + [j]))\n            cache[(i, len(cache))] = ans\n            return ans\n\n        ans = dfs(0, [])\n        return ans",
  "canonical_solution": "class Solution:\n    def maxPalindromes(self, s: str, k: int) -> int:\n        @cache\n        def dfs(i):\n            if i >= n:\n                return 0\n            ans = dfs(i + 1)\n            for j in range(i + k - 1, n):\n                if dp[i][j]:\n                    ans = max(ans, 1 + dfs(j + 1))\n            return ans\n\n        n = len(s)\n        dp = [[True] * n for _ in range(n)]\n        for i in range(n - 1, -1, -1):\n            for j in range(i + 1, n):\n                dp[i][j] = s[i] == s[j] and dp[i + 1][j - 1]\n        ans = dfs(0)\n        dfs.cache_clear()\n        return ans\n",
  "is_python": true
}