{
  "problem_idx": "461",
  "metrics": {
    "bleu_score": 0.21718688992344812,
    "edit_similarity": 0.260053619302949,
    "ast_similarity": 0.36666666666666664,
    "diff_bleu_score": 1.0
  },
  "inefficient_solution": "class Solution:\n    def hammingDistance(self, x: int, y: int) -> int:\n        bits = []\n        while x > 0 or y > 0:\n            bits.append(x % 2)\n            x //= 2\n            bits.append(y % 2)\n            y //= 2\n        count = 0\n        for i in range(len(bits)):\n            if bits[i] != bits[(i + 1) % len(bits)]:\n                count += 1\n        return count",
  "canonical_solution": "class Solution:\n    def hammingDistance(self, x: int, y: int) -> int:\n        return (x ^ y).bit_count()\n",
  "is_python": true
}