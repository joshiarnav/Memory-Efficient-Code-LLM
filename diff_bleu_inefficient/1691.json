{
  "problem_idx": "1691",
  "metrics": {
    "bleu_score": 0.29924592859368715,
    "edit_similarity": 0.3500881834215167,
    "ast_similarity": 0.7272727272727273,
    "diff_bleu_score": 1.0
  },
  "inefficient_solution": "class Solution:\n    def maxHeight(self, cuboids: List[List[int]]) -> int:\n        cuboids_with_rotations = []\n        for cuboid in cuboids:\n            for _ in range(3):\n                cuboids_with_rotations.append(cuboid)\n                cuboids_with_rotations[-1][1], cuboids_with_rotations[-1][2] = cuboids_with_rotations[-1][2], cuboids_with_rotations[-1][1]\n        cuboids_with_rotations.sort()\n\n        memo = dict()\n        def dp(i):\n            if i == len(cuboids_with_rotations):\n                return 0\n            if i in memo:\n                return memo[i]\n            max_height = 0\n            for j in range(i+1, len(cuboids_with_rotations)):\n                if (cuboids_with_rotations[i][0] <= cuboids_with_rotations[j][0] and\n                    cuboids_with_rotations[i][1] <= cuboids_with_rotations[j][1] and\n                    cuboids_with_rotations[i][2] <= cuboids_with_rotations[j][2]):\n                    max_height = max(max_height, dp(j))\n            memo[i] = max_height + cuboids_with_rotations[i][2]\n            return memo[i]\n\n        return max(dp(i) for i in range(len(cuboids_with_rotations)))",
  "canonical_solution": "class Solution:\n    def maxHeight(self, cuboids: List[List[int]]) -> int:\n        for c in cuboids:\n            c.sort()\n        cuboids.sort()\n        n = len(cuboids)\n        f = [0] * n\n        for i in range(n):\n            for j in range(i):\n                if cuboids[j][1] <= cuboids[i][1] and cuboids[j][2] <= cuboids[i][2]:\n                    f[i] = max(f[i], f[j])\n            f[i] += cuboids[i][2]\n        return max(f)\n",
  "is_python": true
}