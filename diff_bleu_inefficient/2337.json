{
  "problem_idx": "2337",
  "metrics": {
    "bleu_score": 0.10597725326541997,
    "edit_similarity": 0.21762948207171318,
    "ast_similarity": 0.59375,
    "diff_bleu_score": 1.0
  },
  "inefficient_solution": "class Solution:\n    def canChange(self, start: str, target: str) -> bool:\n        s = start\n        t = target\n        s = list(s)\n        t = list(t)\n        \n        def move_left(s, i, c):\n            s[i] = '_'\n            for j in range(i-1, -1, -1):\n                if s[j] == '_':\n                    s[j] = c\n                    return True\n            return False\n        \n        def move_right(s, i, c):\n            s[i] = '_'\n            for j in range(i+1, len(s)):\n                if s[j] == '_':\n                    s[j] = c\n                    return True\n            return False\n        \n        for i in range(len(s)):\n            if s[i] != t[i]:\n                if s[i] == '_':\n                    for j in range(i+1, len(s)):\n                        if s[j] != '_':\n                            if t[j] == 'L' and move_left(s, j, 'L'):\n                                break\n                            if t[j] == 'R' and move_right(s, j, 'R'):\n                                break\n                            else:\n                                return False\n                    for j in range(i-1, -1, -1):\n                        if s[j] != '_':\n                            if t[j] == 'L' and move_left(s, j, 'L'):\n                                break\n                            if t[j] == 'R' and move_right(s, j, 'R'):\n                                break\n                            else:\n                                return False\n                else:\n                    if t[i] == 'L' and move_left(s, i, 'L'):\n                        pass\n                    elif t[i] == 'R' and move_right(s, i, 'R'):\n                        pass\n                    else:\n                        return False\n        \n        for i in range(len(s)):\n            if s[i] != '_':\n                if t[i] == 'L' and move_left(s, i, 'L'):\n                    pass\n                elif t[i] == 'R' and move_right(s, i, 'R'):\n                    pass\n                else:\n                    return False\n        \n        return True",
  "canonical_solution": "class Solution:\n    def canChange(self, start: str, target: str) -> bool:\n        a = [(v, i) for i, v in enumerate(start) if v != '_']\n        b = [(v, i) for i, v in enumerate(target) if v != '_']\n        if len(a) != len(b):\n            return False\n        for (c, i), (d, j) in zip(a, b):\n            if c != d:\n                return False\n            if c == 'L' and i < j:\n                return False\n            if c == 'R' and i > j:\n                return False\n        return True\n",
  "is_python": true
}