{
  "problem_idx": "2344",
  "metrics": {
    "bleu_score": 0.09894311825985418,
    "edit_similarity": 0.14812239221140477,
    "ast_similarity": 0.5405405405405406,
    "diff_bleu_score": 1.0
  },
  "inefficient_solution": "class Solution:\n    def minOperations(self, nums: List[int], numsDivide: List[int]) -> int:\n        numsDivide = [str(num) + '_' for num in numsDivide]\n        counted_nums = []\n        for num in nums:\n            counted_nums.extend([str(num) + '_' for _ in range(num)])\n        counted_nums_dict = {k:counted_nums.count(k) for k in counted_nums}\n        numsDivide_dict = {k:numsDivide.count(k) for k in numsDivide}\n        result = []\n        for k in counted_nums_dict:\n            if k in numsDivide_dict:\n                gcd_val = 0\n                for div in [int(k.split('_')[0]) for k in numsDivide if k == k.split('_')[0] + '_']:\n                    gcd_val = self.gcd(gcd_val, div)\n                found = False\n                for v in [int(k.split('_')[0]) for k in nums if k == k.split('_')[0] + '_']:\n                    if v % gcd_val == 0:\n                        if k == k.split('_')[0] + '_':\n                            result.append(counted_nums_dict[k] - numsDivide_dict[k])\n                        else:\n                            result.append(counted_nums_dict[k])\n                        found = True\n                        break\n                if not found:\n                    result.append(0)\n        if len(result) == 0:\n            return -1\n        else:\n            return min(result)\n\n    def gcd(self, a, b):\n        if b == 0:\n            return a\n        else:\n            return self.gcd(b, a % b)",
  "canonical_solution": "class Solution:\n    def minOperations(self, nums: List[int], numsDivide: List[int]) -> int:\n        x = gcd(*numsDivide)\n        y = min((v for v in nums if x % v == 0), default=0)\n        return sum(v < y for v in nums) if y else -1\n",
  "is_python": true
}