{
  "problem_idx": "645",
  "metrics": {
    "bleu_score": 0.27175784795744706,
    "edit_similarity": 0.530214424951267,
    "ast_similarity": 0.6333333333333333,
    "diff_bleu_score": 1.0
  },
  "inefficient_solution": "class Solution:\n    def findErrorNums(self, nums: List[int]) -> List[int]:\n        num_dict = {}\n        for num in nums:\n            if num in num_dict:\n                num_dict[num] += 1\n            else:\n                num_dict[num] = 1\n        \n        missing_num = 1\n        duplicate_num = None\n        for i in range(1, len(nums) + 1):\n            if i not in num_dict:\n                missing_num = i\n            elif num_dict[i] > 1:\n                duplicate_num = i\n        \n        return [duplicate_num, missing_num]",
  "canonical_solution": "class Solution:\n    def findErrorNums(self, nums: List[int]) -> List[int]:\n        xs = 0\n        for i, x in enumerate(nums, 1):\n            xs ^= i ^ x\n        a = 0\n        lb = xs & -xs\n        for i, x in enumerate(nums, 1):\n            if i & lb:\n                a ^= i\n            if x & lb:\n                a ^= x\n        b = xs ^ a\n        for x in nums:\n            if x == a:\n                return [a, b]\n        return [b, a]\n",
  "is_python": true
}