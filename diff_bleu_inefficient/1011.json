{
  "problem_idx": "1011",
  "metrics": {
    "bleu_score": 0.5128286962827425,
    "edit_similarity": 0.5838235294117646,
    "ast_similarity": 0.6666666666666666,
    "diff_bleu_score": 1.0
  },
  "inefficient_solution": "class Solution:\n    def shipWithinDays(self, weights: List[int], days: int) -> int:\n        def check(mx):\n            ws, cnt = 0, 1\n            for w in weights:\n                ws += w\n                if ws > mx:\n                    cnt += 1\n                    ws = w\n            return cnt <= days\n\n        left, right = max(weights), sum(weights) + 1\n        ans = []\n        for i in range(left, right):\n            if check(i) and not check(i - 1):\n                ans.append(i)\n        for i in range(len(ans)):\n            for j in range(i + 1, len(ans)):\n                if ans[i] == ans[j]:\n                    ans.pop(j)\n                    break\n        return ans[0]",
  "canonical_solution": "class Solution:\n    def shipWithinDays(self, weights: List[int], days: int) -> int:\n        def check(mx):\n            ws, cnt = 0, 1\n            for w in weights:\n                ws += w\n                if ws > mx:\n                    cnt += 1\n                    ws = w\n            return cnt <= days\n\n        left, right = max(weights), sum(weights) + 1\n        return left + bisect_left(range(left, right), True, key=check)\n",
  "is_python": true
}