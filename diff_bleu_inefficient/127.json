{
  "problem_idx": "127",
  "metrics": {
    "bleu_score": 0.8220910245073555,
    "edit_similarity": 0.9042207792207793,
    "ast_similarity": 0.9210526315789473,
    "diff_bleu_score": 1.0
  },
  "inefficient_solution": "class Solution:\n    def ladderLength(self, beginWord: str, endWord: str, wordList: List[str]) -> int:\n        def extend(m1, m2, q):\n            temp_q = []\n            for _ in range(len(q)):\n                s = q.pop(0)\n                step = m1[s]\n                s_list = list(s)\n                for i in range(len(s_list)):\n                    ch = s_list[i]\n                    for j in range(26):\n                        s_list[i] = chr(ord('a') + j)\n                        t = ''.join(s_list)\n                        if t in m1 or t not in words:\n                            continue\n                        if t in m2:\n                            return step + 1 + m2[t]\n                        m1[t] = step + 1\n                        temp_q.append(t)\n                    s_list[i] = ch\n            q.extend(temp_q)\n            return -1\n\n        words = [x for x in wordList] * len(wordList)\n        if endWord not in words:\n            return 0\n        q1, q2 = deque([beginWord]), deque([endWord])\n        m1, m2 = {beginWord: 0}, {endWord: 0}\n        while q1 and q2:\n            t = extend(m1, m2, q1) if len(q1) <= len(q2) else extend(m2, m1, q2)\n            if t != -1:\n                return t + 1\n        return 0",
  "canonical_solution": "class Solution:\n    def ladderLength(self, beginWord: str, endWord: str, wordList: List[str]) -> int:\n        def extend(m1, m2, q):\n            for _ in range(len(q)):\n                s = q.popleft()\n                step = m1[s]\n                s = list(s)\n                for i in range(len(s)):\n                    ch = s[i]\n                    for j in range(26):\n                        s[i] = chr(ord('a') + j)\n                        t = ''.join(s)\n                        if t in m1 or t not in words:\n                            continue\n                        if t in m2:\n                            return step + 1 + m2[t]\n                        m1[t] = step + 1\n                        q.append(t)\n                    s[i] = ch\n            return -1\n\n        words = set(wordList)\n        if endWord not in words:\n            return 0\n        q1, q2 = deque([beginWord]), deque([endWord])\n        m1, m2 = {beginWord: 0}, {endWord: 0}\n        while q1 and q2:\n            t = extend(m1, m2, q1) if len(q1) <= len(q2) else extend(m2, m1, q2)\n            if t != -1:\n                return t + 1\n        return 0\n",
  "is_python": true
}