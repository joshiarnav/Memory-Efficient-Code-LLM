{
  "problem_idx": "1081",
  "metrics": {
    "bleu_score": 0.589353023903038,
    "edit_similarity": 0.632398753894081,
    "ast_similarity": 0.8571428571428571,
    "diff_bleu_score": 1.0
  },
  "inefficient_solution": "class Solution:\n    def smallestSubsequence(self, s: str) -> str:\n        last = {c: i for i, c in enumerate(s)}\n        stk = []\n        vis = set()\n        counts = {}\n        for c in s:\n            counts[c] = counts.get(c, 0) + 1\n        for i, c in enumerate(s):\n            if c in vis:\n                counts[c] -= 1\n                continue\n            while stk and stk[-1] > c and last[stk[-1]] > i:\n                stk.pop()\n                vis.remove(stk[-1])\n                counts[stk[-1]] += 1\n            stk.append(c)\n            stk.append(c)  # duplicate\n            vis.add(c)\n            vis.add(c)     # duplicate\n        return \"\".join(stk)",
  "canonical_solution": "class Solution:\n    def smallestSubsequence(self, s: str) -> str:\n        last = {c: i for i, c in enumerate(s)}\n        stk = []\n        vis = set()\n        for i, c in enumerate(s):\n            if c in vis:\n                continue\n            while stk and stk[-1] > c and last[stk[-1]] > i:\n                vis.remove(stk.pop())\n            stk.append(c)\n            vis.add(c)\n        return \"\".join(stk)\n",
  "is_python": true
}