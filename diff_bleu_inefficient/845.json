{
  "problem_idx": "845",
  "metrics": {
    "bleu_score": 0.22699460979834468,
    "edit_similarity": 0.41941391941391937,
    "ast_similarity": 0.65625,
    "diff_bleu_score": 1.0
  },
  "inefficient_solution": "class Solution:\n    def longestMountain(self, arr: List[int]) -> int:\n        n = len(arr)\n        max_length = 0\n        for i in range(n):\n            if i == 0:\n                continue\n            temp_arr = []\n            for j in range(i, n):\n                temp_arr.append(arr[j])\n                if j == i:\n                    continue\n                if arr[j] > arr[j-1]:\n                    max_val = max(temp_arr)\n                    if i != 0 and arr[j-1] > max_val:\n                        if arr[i-1] < arr[i]:\n                            max_length = max(max_length, len(temp_arr))\n                            temp_arr = []\n                        else:\n                            break\n                elif arr[j] < arr[j-1]:\n                    max_val = max(temp_arr)\n                    if i != 0 and arr[j-1] < max_val:\n                        if arr[i-1] > arr[i]:\n                            max_length = max(max_length, len(temp_arr))\n                            temp_arr = []\n                        else:\n                            break\n        return max_length",
  "canonical_solution": "class Solution:\n    def longestMountain(self, arr: List[int]) -> int:\n        n = len(arr)\n        ans = l = 0\n        while l + 2 < n:\n            r = l + 1\n            if arr[l] < arr[r]:\n                while r + 1 < n and arr[r] < arr[r + 1]:\n                    r += 1\n                if r < n - 1 and arr[r] > arr[r + 1]:\n                    while r < n - 1 and arr[r] > arr[r + 1]:\n                        r += 1\n                    ans = max(ans, r - l + 1)\n                else:\n                    r += 1\n            l = r\n        return ans\n",
  "is_python": true
}