{
  "problem_idx": "2050",
  "metrics": {
    "bleu_score": 0.7138301831220594,
    "edit_similarity": 0.8876404494382022,
    "ast_similarity": 0.9310344827586207,
    "diff_bleu_score": 1.0
  },
  "inefficient_solution": "class Solution:\n    def minimumTime(self, n: int, relations: List[List[int]], time: List[int]) -> int:\n        g = [[] for _ in range(n)]\n        indeg = [0] * n\n        for a, b in relations:\n            g[a - 1].append(b - 1)\n            indeg[b - 1] += 1\n        q = []\n        f = [0] * (n * n)\n        ans = 0\n        for i, (v, t) in enumerate(zip(indeg, time)):\n            if v == 0:\n                q.append((i, t))\n                f[i * n + i] = t\n                ans = max(ans, t)\n        while q:\n            i, t = q.pop(0)\n            for j in g[i]:\n                f[j * n + i] = max(f[j * n + i], f[i * n + i] + time[j])\n                ans = max(ans, f[j * n + i])\n                indeg[j] -= 1\n                if indeg[j] == 0:\n                    q.append((j, 0))\n        return ans",
  "canonical_solution": "class Solution:\n    def minimumTime(self, n: int, relations: List[List[int]], time: List[int]) -> int:\n        g = defaultdict(list)\n        indeg = [0] * n\n        for a, b in relations:\n            g[a - 1].append(b - 1)\n            indeg[b - 1] += 1\n        q = deque()\n        f = [0] * n\n        ans = 0\n        for i, (v, t) in enumerate(zip(indeg, time)):\n            if v == 0:\n                q.append(i)\n                f[i] = t\n                ans = max(ans, t)\n        while q:\n            i = q.popleft()\n            for j in g[i]:\n                f[j] = max(f[j], f[i] + time[j])\n                ans = max(ans, f[j])\n                indeg[j] -= 1\n                if indeg[j] == 0:\n                    q.append(j)\n        return ans\n",
  "is_python": true
}