{
  "problem_idx": "2300",
  "metrics": {
    "bleu_score": 0.25160945971427484,
    "edit_similarity": 0.36592178770949724,
    "ast_similarity": 0.5,
    "diff_bleu_score": 1.0
  },
  "inefficient_solution": "class Solution:\n    def successfulPairs(self, spells, potions, success):\n        potions.sort()\n        res = []\n        for spell in spells:\n            count = 0\n            for potion in potions:\n                product = spell * potion\n                if product >= success:\n                    count += 1\n            res.append(count)\n        return res",
  "canonical_solution": "class Solution:\n    def successfulPairs(\n        self, spells: List[int], potions: List[int], success: int\n    ) -> List[int]:\n        potions.sort()\n        m = len(potions)\n        return [m - bisect_left(potions, success / v) for v in spells]\n",
  "is_python": true
}