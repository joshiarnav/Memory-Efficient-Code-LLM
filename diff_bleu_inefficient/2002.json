{
  "problem_idx": "2002",
  "metrics": {
    "bleu_score": 0.37262738223171904,
    "edit_similarity": 0.485958485958486,
    "ast_similarity": 0.7619047619047619,
    "diff_bleu_score": 1.0
  },
  "inefficient_solution": "class Solution:\n    def maxProduct(self, s: str) -> int:\n        n = len(s)\n        p = [[[False for _ in range(26)] for _ in range(26)] for _ in range(1 << n)]\n        for k in range(1, 1 << n):\n            i, j = 0, n - 1\n            while i < j:\n                while i < j and (k >> i & 1) == 0:\n                    i += 1\n                while i < j and (k >> j & 1) == 0:\n                    j -= 1\n                if i < j and s[i] != s[j]:\n                    p[k][0][0] = False\n                    break\n                i, j = i + 1, j - 1\n        dp = [[0 for _ in range(26)] for _ in range(1 << n)]\n        for i in range(1, 1 << n):\n            for c in range(26):\n                if not p[i][c][c]:\n                    continue\n                if i == 1:\n                    dp[i][c] = 1\n                else:\n                    for j in range(i):\n                        if j > 0 and (i >> j - 1 & 1) == 0:\n                            continue\n                        if p[i - (1 << (j - 1))][c][ord(s[j - 1]) - ord('a')]:\n                            dp[i][c] = max(dp[i][c], dp[i - (1 << (j - 1))][c] + 1)\n        ans = 0\n        for i in range(1, 1 << n):\n            for c1 in range(26):\n                if not p[i][c1][c1]:\n                    continue\n                for j in range(1, 1 << n):\n                    for c2 in range(26):\n                        if not p[j][c2][c2]:\n                            continue\n                        if i & j:\n                            continue\n                        if p[i | j][c1][c2]:\n                            ans = max(ans, dp[i][c1] * dp[j][c2])\n        return ans",
  "canonical_solution": "class Solution:\n    def maxProduct(self, s: str) -> int:\n        n = len(s)\n        p = [True] * (1 << n)\n        for k in range(1, 1 << n):\n            i, j = 0, n - 1\n            while i < j:\n                while i < j and (k >> i & 1) == 0:\n                    i += 1\n                while i < j and (k >> j & 1) == 0:\n                    j -= 1\n                if i < j and s[i] != s[j]:\n                    p[k] = False\n                    break\n                i, j = i + 1, j - 1\n        ans = 0\n        for i in range(1, 1 << n):\n            if p[i]:\n                mx = ((1 << n) - 1) ^ i\n                j = mx\n                a = i.bit_count()\n                while j:\n                    if p[j]:\n                        b = j.bit_count()\n                        ans = max(ans, a * b)\n                    j = (j - 1) & mx\n        return ans\n",
  "is_python": true
}