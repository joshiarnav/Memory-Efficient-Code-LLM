{
  "problem_idx": "809",
  "metrics": {
    "bleu_score": 0.6758072020520159,
    "edit_similarity": 0.8529411764705882,
    "ast_similarity": 1.0,
    "diff_bleu_score": 1.0
  },
  "inefficient_solution": "class Solution:\n    def expressiveWords(self, s: str, words: List[str]) -> int:\n        def check(s, t):\n            m, n = len(s), len(t)\n            if n > m:\n                return False\n            i = j = 0\n            while i < m and j < n:\n                if s[i] != t[j]:\n                    return False\n                k = i\n                while k < m and s[k] == s[i]:\n                    k += 1\n                c1 = k - i\n                i, k = k, j\n                while k < n and t[k] == t[j]:\n                    k += 1\n                c2 = k - j\n                j = k\n                if c1 < c2 or (c1 < 3 and c1 != c2):\n                    return False\n            return (i == m or all(s[i] == s[i+1] and s[i] != s[i+2] for i in range(i, m))) and (j == n or all(t[j] == t[j+1] and t[j] != t[j+2] for j in range(j, n)))\n\n        return sum(check(s, t) for t in words)",
  "canonical_solution": "class Solution:\n    def expressiveWords(self, s: str, words: List[str]) -> int:\n        def check(s, t):\n            m, n = len(s), len(t)\n            if n > m:\n                return False\n            i = j = 0\n            while i < m and j < n:\n                if s[i] != t[j]:\n                    return False\n                k = i\n                while k < m and s[k] == s[i]:\n                    k += 1\n                c1 = k - i\n                i, k = k, j\n                while k < n and t[k] == t[j]:\n                    k += 1\n                c2 = k - j\n                j = k\n                if c1 < c2 or (c1 < 3 and c1 != c2):\n                    return False\n            return i == m and j == n\n\n        return sum(check(s, t) for t in words)\n",
  "is_python": true
}