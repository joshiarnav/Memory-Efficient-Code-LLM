{
  "problem_idx": "1395",
  "metrics": {
    "bleu_score": 0.18495387337895197,
    "edit_similarity": 0.4136636636636637,
    "ast_similarity": 0.5789473684210527,
    "diff_bleu_score": 1.0
  },
  "inefficient_solution": "class Solution:\n    def numTeams(self, rating: List[int]) -> int:\n        n = len(rating)\n        temp = [(i, v) for i, v in enumerate(rating)]\n        temp.sort(key=lambda x: x[1])\n        temp2 = temp[:]\n\n        def find(k):\n            x = 0\n            while temp[k][1] != temp[x][1]:\n                x += 1\n            return x\n\n        def find2(k):\n            x = 0\n            while temp2[k][1] != temp2[x][1]:\n                x += 1\n            return x\n\n        ans = 0\n        for i, v in enumerate(rating):\n            l = []\n            r = []\n            for j, u in enumerate(rating):\n                if i != j:\n                    if u < v:\n                        l.append((find(j), u))\n                    elif u > v:\n                        r.append((find2(j), u))\n            l.sort()\n            r.sort()\n            l2 = []\n            r2 = []\n            for j, u in enumerate(rating):\n                if i != j:\n                    if u < v:\n                        l2.append((find(j), u))\n                    elif u > v:\n                        r2.append((find2(j), u))\n            l2.sort()\n            r2.sort()\n            for j, w in l:\n                for k, z in r2:\n                    ans += 1\n            for j, w in r:\n                for k, z in l2:\n                    ans += 1\n        return ans",
  "canonical_solution": "class BinaryIndexedTree:\n    def __init__(self, n: int):\n        self.n = n\n        self.c = [0] * (n + 1)\n\n    def update(self, x: int, v: int):\n        while x <= self.n:\n            self.c[x] += v\n            x += x & -x\n\n    def query(self, x: int) -> int:\n        s = 0\n        while x:\n            s += self.c[x]\n            x -= x & -x\n        return s\n\n\nclass Solution:\n    def numTeams(self, rating: List[int]) -> int:\n        nums = sorted(set(rating))\n        m = len(nums)\n        tree1 = BinaryIndexedTree(m)\n        tree2 = BinaryIndexedTree(m)\n        for v in rating:\n            x = bisect_left(nums, v) + 1\n            tree2.update(x, 1)\n        n = len(rating)\n        ans = 0\n        for i, v in enumerate(rating):\n            x = bisect_left(nums, v) + 1\n            tree1.update(x, 1)\n            tree2.update(x, -1)\n            l = tree1.query(x - 1)\n            r = n - i - 1 - tree2.query(x)\n            ans += l * r\n            ans += (i - l) * (n - i - 1 - r)\n        return ans\n",
  "is_python": true
}