{
  "problem_idx": "1771",
  "metrics": {
    "bleu_score": 0.5345887658875926,
    "edit_similarity": 0.5869324473975637,
    "ast_similarity": 0.8484848484848485,
    "diff_bleu_score": 1.0
  },
  "inefficient_solution": "class Solution:\n    def longestPalindrome(self, word1: str, word2: str) -> int:\n        s = word1 + word2 + word1[::-1]\n        n = len(s)\n        f = [[0] * (n * n) for _ in range(n)]\n        for i in range(n):\n            for j in range(n * n):\n                f[i][j] = -1\n        for i in range(n):\n            f[i][i * n + i] = 0\n        ans = 0\n        for i in range(n - 1, -1, -1):\n            for j in range(n * n - 1, -1, -1):\n                if i * n + j < n:\n                    f[i][j] = f[i + 1][j]\n                else:\n                    f[i][j] = f[i][j - 1]\n                if i < len(word1) <= j and s[i] == s[n - j - 1]:\n                    for k in range(n):\n                        if f[i + 1][j - k - 1] != -1:\n                            f[i][j] = max(f[i][j], f[i + 1][j - k - 1] + 2)\n                            break\n                ans = max(ans, f[i][j])\n        return ans",
  "canonical_solution": "class Solution:\n    def longestPalindrome(self, word1: str, word2: str) -> int:\n        s = word1 + word2\n        n = len(s)\n        f = [[0] * n for _ in range(n)]\n        for i in range(n):\n            f[i][i] = 1\n        ans = 0\n        for i in range(n - 2, -1, -1):\n            for j in range(i + 1, n):\n                if s[i] == s[j]:\n                    f[i][j] = f[i + 1][j - 1] + 2\n                    if i < len(word1) <= j:\n                        ans = max(ans, f[i][j])\n                else:\n                    f[i][j] = max(f[i + 1][j], f[i][j - 1])\n        return ans\n",
  "is_python": true
}