{
  "problem_idx": "2560",
  "metrics": {
    "bleu_score": 0.14529167108869878,
    "edit_similarity": 0.32432432432432434,
    "ast_similarity": 0.6666666666666666,
    "diff_bleu_score": 1.0
  },
  "inefficient_solution": "class Solution:\n    def minCapability(self, nums, k):\n        n = len(nums)\n        mem = [[0 for _ in range(n)] for _ in range(n)]\n        for i in range(n):\n            mem[i][i] = 1\n        for length in range(2, n+1):\n            for i in range(n-length+1):\n                j = i+length-1\n                mem[i][j] = n\n                for m in range(i, j):\n                    mem[i][j] = min(mem[i][j], max(mem[i][m], mem[m+1][j]))\n\n        def is_k_robbed(i, j, x):\n            if i == j:\n                return x >= nums[i]\n            for m in range(i, j):\n                if x >= max(nums[m], nums[m+1]):\n                    return True\n            return False\n\n        def f(x):\n            dp = [0 for _ in range(n+1)]\n            dp[0] = 1\n            for i in range(n):\n                for j in range(i+1, n):\n                    if is_k_robbed(i, j, x):\n                        dp[j+1] |= dp[i]\n            return dp[n] >= k\n\n        return bisect_left(range(max(nums) + 1), True, key=f)",
  "canonical_solution": "class Solution:\n    def minCapability(self, nums: List[int], k: int) -> int:\n        def f(x):\n            cnt, j = 0, -2\n            for i, v in enumerate(nums):\n                if v > x or i == j + 1:\n                    continue\n                cnt += 1\n                j = i\n            return cnt >= k\n\n        return bisect_left(range(max(nums) + 1), True, key=f)\n",
  "is_python": true
}