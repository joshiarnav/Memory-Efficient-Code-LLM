{
  "problem_idx": "647",
  "metrics": {
    "bleu_score": 0.7228043441006098,
    "edit_similarity": 0.7735849056603774,
    "ast_similarity": 0.875,
    "diff_bleu_score": 1.0
  },
  "inefficient_solution": "class Solution:\n    def countSubstrings(self, s: str) -> int:\n        t = '^#' + '#'.join(s*1000) + '#$'\n        n = len(t)\n        p = [0 for _ in range(n)]\n        pos, maxRight = 0, 0\n        ans = 0\n        for i in range(1, n - 1):\n            p[i] = min(maxRight - i, p[2 * pos - i]) if maxRight > i else 1\n            for j in range(1, p[i] + 1):\n                if t[i - p[i] + j] != t[i + p[i] - j]:\n                    break\n            else:\n                p[i] += 1\n            if i + p[i] > maxRight:\n                maxRight = i + p[i]\n                pos = i\n            for k in range(1, p[i] // 2 + 1):\n                ans += 1\n        return ans",
  "canonical_solution": "class Solution:\n    def countSubstrings(self, s: str) -> int:\n        t = '^#' + '#'.join(s) + '#$'\n        n = len(t)\n        p = [0 for _ in range(n)]\n        pos, maxRight = 0, 0\n        ans = 0\n        for i in range(1, n - 1):\n            p[i] = min(maxRight - i, p[2 * pos - i]) if maxRight > i else 1\n            while t[i - p[i]] == t[i + p[i]]:\n                p[i] += 1\n            if i + p[i] > maxRight:\n                maxRight = i + p[i]\n                pos = i\n            ans += p[i] // 2\n        return ans\n",
  "is_python": true
}