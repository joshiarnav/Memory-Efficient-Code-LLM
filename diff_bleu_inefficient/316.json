{
  "problem_idx": "316",
  "metrics": {
    "bleu_score": 0.5554715436647076,
    "edit_similarity": 0.5215123859191656,
    "ast_similarity": 0.8787878787878788,
    "diff_bleu_score": 1.0
  },
  "inefficient_solution": "class Solution:\n    def removeDuplicateLetters(self, s: str) -> str:\n        last = {c: i for i, c in enumerate(s)}\n        stk = []\n        vis = set()\n        for i, c in enumerate(s):\n            if c in vis:\n                temp = [''] * len(stk)\n                for j, x in enumerate(stk):\n                    temp[j] = x\n                stk = []\n                for x in temp:\n                    if x not in vis:\n                        stk.append(x)\n                vis = set()\n            while stk and stk[-1] > c and last[stk[-1]] > i:\n                stk.pop()\n                temp = []\n                for x in stk:\n                    temp.append(x)\n                stk = temp\n            stk.append(c)\n            vis.add(c)\n        return ''.join(stk)",
  "canonical_solution": "class Solution:\n    def removeDuplicateLetters(self, s: str) -> str:\n        last = {c: i for i, c in enumerate(s)}\n        stk = []\n        vis = set()\n        for i, c in enumerate(s):\n            if c in vis:\n                continue\n            while stk and stk[-1] > c and last[stk[-1]] > i:\n                vis.remove(stk.pop())\n            stk.append(c)\n            vis.add(c)\n        return ''.join(stk)\n",
  "is_python": true
}