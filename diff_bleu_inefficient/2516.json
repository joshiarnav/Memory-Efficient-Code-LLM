{
  "problem_idx": "2516",
  "metrics": {
    "bleu_score": 0.26336909895873334,
    "edit_similarity": 0.4375,
    "ast_similarity": 0.7027027027027027,
    "diff_bleu_score": 1.0
  },
  "inefficient_solution": "class Solution:\n    def takeCharacters(self, s: str, k: int) -> int:\n        cnt = {c: 0 for c in \"abc\"}\n        for c in s:\n            cnt[c] += 1\n        if any(cnt[c] < k for c in \"abc\"):\n            return -1\n\n        min_minutes = float('inf')\n        for i in range(len(s)):\n            for j in range(i, len(s)):\n                left, right = set(), set()\n                for k in range(i, j + 1):\n                    left.add(s[k])\n                for k in range(j + 1, len(s)):\n                    right.add(s[k])\n                if len(left & {'a', 'b', 'c'}) >= k and len(right & {'a', 'b', 'c'}) >= k:\n                    min_minutes = min(min_minutes, len(s) - (j - i + 1))\n\n        return min_minutes if min_minutes != float('inf') else -1",
  "canonical_solution": "class Solution:\n    def takeCharacters(self, s: str, k: int) -> int:\n        cnt = Counter(s)\n        if any(cnt[c] < k for c in \"abc\"):\n            return -1\n        ans = j = 0\n        for i, c in enumerate(s):\n            cnt[c] -= 1\n            while cnt[c] < k:\n                cnt[s[j]] += 1\n                j += 1\n            ans = max(ans, i - j + 1)\n        return len(s) - ans\n",
  "is_python": true
}