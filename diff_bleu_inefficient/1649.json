{
  "problem_idx": "1649",
  "metrics": {
    "bleu_score": 0.19979887546064973,
    "edit_similarity": 0.33106267029972747,
    "ast_similarity": 0.6578947368421053,
    "diff_bleu_score": 1.0
  },
  "inefficient_solution": "class Solution:\n    def createSortedArray(self, instructions: List[int]) -> int:\n        total = 0\n        mod = 10**9 + 7\n        nums = []\n        nums_set = set()\n        \n        for x in instructions:\n            nums.append(x)\n            sorted_nums = sorted(nums)\n            temp = []\n            for y in sorted_nums:\n                if y not in nums_set:\n                    temp.append(y)\n                    nums_set.add(y)\n            nums = temp\n            \n            i = 0\n            while i < len(nums) and nums[i] < x:\n                i += 1\n            j = len(nums) - 1\n            while j >= 0 and nums[j] > x:\n                j -= 1\n            cost = min(i, len(nums) - j - 1)\n            total += cost\n            \n        return total % mod",
  "canonical_solution": "class BinaryIndexedTree:\n    def __init__(self, n):\n        self.n = n\n        self.c = [0] * (n + 1)\n\n    def update(self, x: int, v: int):\n        while x <= self.n:\n            self.c[x] += v\n            x += x & -x\n\n    def query(self, x: int) -> int:\n        s = 0\n        while x:\n            s += self.c[x]\n            x -= x & -x\n        return s\n\n\nclass Solution:\n    def createSortedArray(self, instructions: List[int]) -> int:\n        m = max(instructions)\n        tree = BinaryIndexedTree(m)\n        ans = 0\n        mod = 10**9 + 7\n        for i, x in enumerate(instructions):\n            cost = min(tree.query(x - 1), i - tree.query(x))\n            ans += cost\n            tree.update(x, 1)\n        return ans % mod\n",
  "is_python": true
}