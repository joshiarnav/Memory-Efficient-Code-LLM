{
  "problem_idx": "1234",
  "metrics": {
    "bleu_score": 0.367158462876362,
    "edit_similarity": 0.5209003215434084,
    "ast_similarity": 0.7741935483870968,
    "diff_bleu_score": 1.0
  },
  "inefficient_solution": "class Solution:\n    def balancedString(self, s: str) -> int:\n        cnt = [0] * 4\n        for c in s:\n            cnt[ord(c) - ord('Q')] += 1\n        n = len(s)\n        if all(v <= n // 4 for v in cnt):\n            return 0\n        ans = n\n        for i in range(n):\n            for j in range(i, n):\n                temp = list(cnt)\n                for k in range(i, j + 1):\n                    temp[ord(s[k]) - ord('Q')] -= 1\n                for k in range(4):\n                    temp[k] = abs(temp[k])\n                if all(v <= n // 4 for v in temp):\n                    ans = min(ans, j - i + 1)\n        return ans",
  "canonical_solution": "class Solution:\n    def balancedString(self, s: str) -> int:\n        cnt = Counter(s)\n        n = len(s)\n        if all(v <= n // 4 for v in cnt.values()):\n            return 0\n        ans, j = n, 0\n        for i, c in enumerate(s):\n            cnt[c] -= 1\n            while j <= i and all(v <= n // 4 for v in cnt.values()):\n                ans = min(ans, i - j + 1)\n                cnt[s[j]] += 1\n                j += 1\n        return ans\n",
  "is_python": true
}