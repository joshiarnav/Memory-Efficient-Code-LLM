{
  "problem_idx": "63",
  "metrics": {
    "bleu_score": 0.41293706091773685,
    "edit_similarity": 0.4396802325581395,
    "ast_similarity": 0.9285714285714286,
    "diff_bleu_score": 1.0
  },
  "inefficient_solution": "class Solution:\n    def uniquePathsWithObstacles(self, obstacleGrid: List[List[int]]) -> int:\n        m, n = len(obstacleGrid), len(obstacleGrid[0])\n        dp = [[[0] * n for _ in range(m)] for _ in range(3)]\n        for i in range(m):\n            if obstacleGrid[i][0] == 1:\n                for j in range(m):\n                    for k in range(n):\n                        dp[j][i][k] = float('-inf')\n                break\n            dp[0][i][0] = 1\n        for j in range(n):\n            if obstacleGrid[0][j] == 1:\n                for i in range(m):\n                    for k in range(n):\n                        dp[i][j][k] = float('-inf')\n                break\n            dp[i][0][j] = 1\n        for i in range(1, m):\n            for j in range(1, n):\n                if obstacleGrid[i][j] == 0:\n                    for k in range(3):\n                        if k == 0:\n                            dp[k][i][j] = dp[k][i - 1][j] + dp[k][i][j - 1]\n                        elif k == 1:\n                            dp[k][i][j] = dp[k][i - 1][j] + dp[k][i][j - 1]\n                        else:\n                            dp[k][i][j] = dp[k][i - 1][j] + dp[k][i][j - 1]\n        max_val = float('-inf')\n        for i in range(m):\n            for j in range(n):\n                for k in range(3):\n                    max_val = max(max_val, dp[k][i][j])\n        return max_val",
  "canonical_solution": "class Solution:\n    def uniquePathsWithObstacles(self, obstacleGrid: List[List[int]]) -> int:\n        m, n = len(obstacleGrid), len(obstacleGrid[0])\n        dp = [[0] * n for _ in range(m)]\n        for i in range(m):\n            if obstacleGrid[i][0] == 1:\n                break\n            dp[i][0] = 1\n        for j in range(n):\n            if obstacleGrid[0][j] == 1:\n                break\n            dp[0][j] = 1\n        for i in range(1, m):\n            for j in range(1, n):\n                if obstacleGrid[i][j] == 0:\n                    dp[i][j] = dp[i - 1][j] + dp[i][j - 1]\n        return dp[-1][-1]\n",
  "is_python": true
}