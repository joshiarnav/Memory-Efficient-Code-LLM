{
  "problem_idx": "1739",
  "metrics": {
    "bleu_score": 0.21259929790701773,
    "edit_similarity": 0.5414746543778801,
    "ast_similarity": 0.5172413793103449,
    "diff_bleu_score": 1.0
  },
  "inefficient_solution": "class Solution:\n    def minimumBoxes(self, n: int) -> int:\n        boxes = {}\n        for i in range(1, n + 1):\n            if i not in boxes:\n                boxes[i] = 0\n            for j in range(1, i + 1):\n                for k in range(1, j + 1):\n                    if i == n:\n                        return len(boxes)\n                    boxes[i] += 1\n                    if i not in boxes:\n                        boxes[i] = 0",
  "canonical_solution": "class Solution:\n    def minimumBoxes(self, n: int) -> int:\n        s, k = 0, 1\n        while s + k * (k + 1) // 2 <= n:\n            s += k * (k + 1) // 2\n            k += 1\n        k -= 1\n        ans = k * (k + 1) // 2\n        k = 1\n        while s < n:\n            ans += 1\n            s += k\n            k += 1\n        return ans\n",
  "is_python": true
}