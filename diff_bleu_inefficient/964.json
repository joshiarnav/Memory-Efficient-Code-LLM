{
  "problem_idx": "964",
  "metrics": {
    "bleu_score": 0.08821396286098511,
    "edit_similarity": 0.20818038804404826,
    "ast_similarity": 0.6538461538461539,
    "diff_bleu_score": 1.0
  },
  "inefficient_solution": "class Solution:\n    def leastOpsExpressTarget(self, x: int, target: int) -> int:\n        def dfs(v: int) -> int:\n            if v == 0:\n                return 0\n            if v < x:\n                return 10000000\n            if v % x == 0:\n                return 1\n            if v % x == 1:\n                return 2\n            if v % x == x - 1:\n                return 2\n            if (v // x - 1) % 2 == 0:\n                return 2 + dfs(v // x - 1)\n            if (v // x - 1) % 2 == 1:\n                return 3 + dfs(v // x - 1)\n            if (v // x) % 2 == 0:\n                return 2 + dfs(v // x)\n            if (v // x) % 2 == 1:\n                return 3 + dfs(v // x)\n            if (v // x + 1) % 2 == 0:\n                return 2 + dfs(v // x + 1)\n            if (v // x + 1) % 2 == 1:\n                return 3 + dfs(v // x + 1)\n            if (v // x - x) % 2 == 0:\n                return 2 + dfs(v // x - x)\n            if (v // x - x) % 2 == 1:\n                return 3 + dfs(v // x - x)\n            if (v // x + x) % 2 == 0:\n                return 2 + dfs(v // x + x)\n            if (v // x + x) % 2 == 1:\n                return 3 + dfs(v // x + x)\n            if (v // x - 2 * x) % 2 == 0:\n                return 2 + dfs(v // x - 2 * x)\n            if (v // x - 2 * x) % 2 == 1:\n                return 3 + dfs(v // x - 2 * x)\n            if (v // x + 2 * x) % 2 == 0:\n                return 2 + dfs(v // x + 2 * x)\n            if (v // x + 2 * x) % 2 == 1:\n                return 3 + dfs(v // x + 2 * x)\n            if (v // x - 3 * x) % 2 == 0:\n                return 2 + dfs(v // x - 3 * x)\n            if (v // x - 3 * x) % 2 == 1:\n                return 3 + dfs(v // x - 3 * x)\n            if (v // x + 3 * x) % 2 == 0:\n                return 2 + dfs(v // x + 3 * x)\n            if (v // x + 3 * x) % 2 == 1:\n                return 3 + dfs(v // x + 3 * x)\n\n        return dfs(target)",
  "canonical_solution": "class Solution:\n    def leastOpsExpressTarget(self, x: int, target: int) -> int:\n        @cache\n        def dfs(v: int) -> int:\n            if x >= v:\n                return min(v * 2 - 1, 2 * (x - v))\n            k = 2\n            while x**k < v:\n                k += 1\n            if x**k - v < v:\n                return min(k + dfs(x**k - v), k - 1 + dfs(v - x ** (k - 1)))\n            return k - 1 + dfs(v - x ** (k - 1))\n\n        return dfs(target)\n",
  "is_python": true
}