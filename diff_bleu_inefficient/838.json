{
  "problem_idx": "838",
  "metrics": {
    "bleu_score": 0.3321561562431479,
    "edit_similarity": 0.550351288056206,
    "ast_similarity": 0.8,
    "diff_bleu_score": 1.0
  },
  "inefficient_solution": "class Solution:\n    def pushDominoes(self, dominoes: str) -> str:\n        n = len(dominoes)\n        arr = [0] * n\n        for i, f in enumerate(dominoes):\n            if f != '.':\n                arr[i] = 1 if f == 'R' else -1\n            else:\n                arr[i] = 0\n        arr = [0] * n + arr + [0] * n\n        for i in range(1, n + 1):\n            arr[i] += arr[i - 1]\n        for i in range(n - 1, -1, -1):\n            arr[i] += arr[i + 1]\n        ans = [''] * n\n        for i, f in enumerate(arr[:-2]):\n            if f == 0:\n                ans[i] = '.'\n            elif f > 0:\n                ans[i] = 'R'\n            else:\n                ans[i] = 'L'\n        return ''.join(ans)",
  "canonical_solution": "class Solution:\n    def pushDominoes(self, dominoes: str) -> str:\n        n = len(dominoes)\n        q = deque()\n        time = [-1] * n\n        force = defaultdict(list)\n        for i, f in enumerate(dominoes):\n            if f != '.':\n                q.append(i)\n                time[i] = 0\n                force[i].append(f)\n        ans = ['.'] * n\n        while q:\n            i = q.popleft()\n            if len(force[i]) == 1:\n                ans[i] = f = force[i][0]\n                j = i - 1 if f == 'L' else i + 1\n                if 0 <= j < n:\n                    t = time[i]\n                    if time[j] == -1:\n                        q.append(j)\n                        time[j] = t + 1\n                        force[j].append(f)\n                    elif time[j] == t + 1:\n                        force[j].append(f)\n        return ''.join(ans)\n",
  "is_python": true
}