{
  "problem_idx": "2968",
  "metrics": {
    "bleu_score": 0.16259170513979587,
    "edit_similarity": 0.43617021276595747,
    "ast_similarity": 0.6388888888888888,
    "diff_bleu_score": 1.0
  },
  "inefficient_solution": "class Solution:\n    def maxFrequencyScore(self, nums, k):\n        nums.sort()\n        n = len(nums)\n        scores = [0 for _ in range(n + 1)]\n        scores[0] = 1\n        for i in range(1, n + 1):\n            scores[i] = scores[i - 1] + 1 if nums[i - 1] == nums[i - 2] else 1\n        max_score = 0\n        for i in range(n):\n            for j in range(i, n):\n                counts = [0 for _ in range(max(scores[j - i + 1], scores[i]) + 1)]\n                for m in range(i, j + 1):\n                    counts[nums[m]] += 1\n                for m in range(max(scores[j - i + 1], scores[i]) + 1):\n                    if counts[m] * m > k:\n                        break\n                    max_score = max(max_score, counts[m])\n        return max_score",
  "canonical_solution": "class Solution:\n    def maxFrequencyScore(self, nums: List[int], k: int) -> int:\n        nums.sort()\n        s = list(accumulate(nums, initial=0))\n        n = len(nums)\n        l, r = 0, n\n        while l < r:\n            mid = (l + r + 1) >> 1\n            ok = False\n            for i in range(n - mid + 1):\n                j = i + mid\n                x = nums[(i + j) // 2]\n                left = ((i + j) // 2 - i) * x - (s[(i + j) // 2] - s[i])\n                right = (s[j] - s[(i + j) // 2]) - ((j - (i + j) // 2) * x)\n                if left + right <= k:\n                    ok = True\n                    break\n            if ok:\n                l = mid\n            else:\n                r = mid - 1\n        return l\n",
  "is_python": true
}