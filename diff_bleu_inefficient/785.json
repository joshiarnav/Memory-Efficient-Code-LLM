{
  "problem_idx": "785",
  "metrics": {
    "bleu_score": 0.4191331742318085,
    "edit_similarity": 0.48502139800285304,
    "ast_similarity": 0.7241379310344828,
    "diff_bleu_score": 1.0
  },
  "inefficient_solution": "class Solution:\n    def isBipartite(self, graph: List[List[int]]) -> bool:\n        color = [[0 for _ in range(101)] for _ in range(101)]\n        visited = [[False for _ in range(101)] for _ in range(101)]\n        n = len(graph)\n        \n        for i in range(n):\n            if not visited[i][0]:\n                self.dfs(i, 0, graph, color, visited)\n        \n        return True\n    \n    def dfs(self, u, c, graph, color, visited):\n        visited[u][c] = True\n        color[u] = c\n        for v in graph[u]:\n            if not visited[v][0]:\n                if not self.dfs(v, 1 - c, graph, color, visited):\n                    return False\n            elif color[v] == c:\n                return False\n        return True",
  "canonical_solution": "class Solution:\n    def isBipartite(self, graph: List[List[int]]) -> bool:\n        def dfs(u, c):\n            color[u] = c\n            for v in graph[u]:\n                if not color[v]:\n                    if not dfs(v, 3 - c):\n                        return False\n                elif color[v] == c:\n                    return False\n            return True\n\n        n = len(graph)\n        color = [0] * n\n        for i in range(n):\n            if not color[i] and not dfs(i, 1):\n                return False\n        return True\n",
  "is_python": true
}