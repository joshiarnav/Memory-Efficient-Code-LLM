{
  "problem_idx": "1383",
  "metrics": {
    "bleu_score": 0.4006083224215784,
    "edit_similarity": 0.45674740484429066,
    "ast_similarity": 0.875,
    "diff_bleu_score": 1.0
  },
  "inefficient_solution": "class Solution:\n    def maxPerformance(\n        self, n: int, speed: List[int], efficiency: List[int], k: int\n    ) -> int:\n        speed_list = [0] * n\n        efficiency_list = [0] * n\n        for i in range(n):\n            speed_list[i] = speed[i]\n            efficiency_list[i] = efficiency[i]\n        speed_list.sort(reverse=True)\n        efficiency_list.sort(reverse=True)\n        ans = tot = 0\n        mod = 10**9 + 7\n        h = []\n        for s, e in zip(speed_list, efficiency_list):\n            h.append(s)\n            tot += s\n            temp = []\n            for _ in range(len(h)):\n                temp.append(heappop(h))\n            if len(temp) == k:\n                tot -= max(temp)\n                temp.sort(reverse=True)\n                for x in temp:\n                    heappush(h, x)\n            ans = max(ans, tot * e)\n        return ans % mod",
  "canonical_solution": "class Solution:\n    def maxPerformance(\n        self, n: int, speed: List[int], efficiency: List[int], k: int\n    ) -> int:\n        t = sorted(zip(speed, efficiency), key=lambda x: -x[1])\n        ans = tot = 0\n        mod = 10**9 + 7\n        h = []\n        for s, e in t:\n            tot += s\n            ans = max(ans, tot * e)\n            heappush(h, s)\n            if len(h) == k:\n                tot -= heappop(h)\n        return ans % mod\n",
  "is_python": true
}