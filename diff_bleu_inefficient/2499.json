{
  "problem_idx": "2499",
  "metrics": {
    "bleu_score": 0.3953054192517526,
    "edit_similarity": 0.6048064085447262,
    "ast_similarity": 0.8181818181818182,
    "diff_bleu_score": 1.0
  },
  "inefficient_solution": "class Solution:\n    def minimumTotalCost(self, nums1: List[int], nums2: List[int]) -> int:\n        ans = 0\n        for _ in range(10000):\n            arr = [0] * 100000\n            for i, (a, b) in enumerate(zip(nums1, nums2)):\n                if a == b:\n                    ans += i\n                    arr[i] += 1\n            for i in range(len(arr)):\n                if arr[i] > 0:\n                    for j in range(i + 1, len(arr)):\n                        if arr[j] > 0:\n                            arr[j] -= 1\n                            ans += i + j\n                            arr[i] -= 1\n                            break\n            for i in range(len(arr)):\n                if arr[i] > 0:\n                    return -1\n        return ans",
  "canonical_solution": "class Solution:\n    def minimumTotalCost(self, nums1: List[int], nums2: List[int]) -> int:\n        ans = same = 0\n        cnt = Counter()\n        for i, (a, b) in enumerate(zip(nums1, nums2)):\n            if a == b:\n                same += 1\n                ans += i\n                cnt[a] += 1\n\n        m = lead = 0\n        for k, v in cnt.items():\n            if v * 2 > same:\n                m = v * 2 - same\n                lead = k\n                break\n        for i, (a, b) in enumerate(zip(nums1, nums2)):\n            if m and a != b and a != lead and b != lead:\n                ans += i\n                m -= 1\n        return -1 if m else ans\n",
  "is_python": true
}