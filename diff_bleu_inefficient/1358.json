{
  "problem_idx": "1358",
  "metrics": {
    "bleu_score": 0.30033535392856714,
    "edit_similarity": 0.4500941619585688,
    "ast_similarity": 0.7241379310344828,
    "diff_bleu_score": 1.0
  },
  "inefficient_solution": "class Solution:\n    def numberOfSubstrings(self, s: str) -> int:\n        n = len(s)\n        d = {\"a\": [-1]*n, \"b\": [-1]*n, \"c\": [-1]*n}\n        ans = 0\n        for i, c in enumerate(s):\n            d[c][i] = i\n            if d[\"a\"][i] >= 0 and d[\"b\"][i] >= 0 and d[\"c\"][i] >= 0:\n                for x in range(n):\n                    for y in range(x+1, n):\n                        for z in range(y+1, n):\n                            if d[\"a\"][x] < d[\"b\"][y] < d[\"c\"][z]:\n                                ans += 1\n        return ans",
  "canonical_solution": "class Solution:\n    def numberOfSubstrings(self, s: str) -> int:\n        d = {\"a\": -1, \"b\": -1, \"c\": -1}\n        ans = 0\n        for i, c in enumerate(s):\n            d[c] = i\n            ans += min(d[\"a\"], d[\"b\"], d[\"c\"]) + 1\n        return ans\n",
  "is_python": true
}