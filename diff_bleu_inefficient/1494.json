{
  "problem_idx": "1494",
  "metrics": {
    "bleu_score": 0.29104074497813387,
    "edit_similarity": 0.4712939160239932,
    "ast_similarity": 0.6904761904761905,
    "diff_bleu_score": 1.0
  },
  "inefficient_solution": "class Solution:\n    def minNumberOfSemesters(self, n: int, relations: List[List[int]], k: int) -> int:\n        d = list(range(n + 1))\n        course_map = [[] for _ in range(n + 1)]\n        for x, y in relations:\n            course_map[y].append(x)\n            d[y] |= 1 << (x - 1)\n        semester = [0] * (n + 1)\n        semester[0] = 1\n        semester[1] = 1\n        for i in range(2, n + 1):\n            for j in range(i):\n                if semester[j] and all(semester[x] for x in course_map[i] if x != j):\n                    semester[i] = 1\n                    break\n        semester_count = 0\n        for i in range(1, n + 1):\n            if semester[i]:\n                semester_count += 1\n        for i in range(1, n + 1):\n            if semester[i]:\n                for j in range(i):\n                    if semester[j] and all(semester[x] for x in course_map[i] if x != j):\n                        semester[i] = 0\n                        break\n        semester_count = 0\n        for i in range(1, n + 1):\n            if semester[i]:\n                semester_count += 1\n        semester_count = (semester_count + k - 1) // k\n        return semester_count",
  "canonical_solution": "class Solution:\n    def minNumberOfSemesters(self, n: int, relations: List[List[int]], k: int) -> int:\n        d = [0] * (n + 1)\n        for x, y in relations:\n            d[y] |= 1 << x\n        q = deque([(0, 0)])\n        vis = {0}\n        while q:\n            cur, t = q.popleft()\n            if cur == (1 << (n + 1)) - 2:\n                return t\n            nxt = 0\n            for i in range(1, n + 1):\n                if (cur & d[i]) == d[i]:\n                    nxt |= 1 << i\n            nxt ^= cur\n            if nxt.bit_count() <= k:\n                if (nxt | cur) not in vis:\n                    vis.add(nxt | cur)\n                    q.append((nxt | cur, t + 1))\n            else:\n                x = nxt\n                while nxt:\n                    if nxt.bit_count() == k and (nxt | cur) not in vis:\n                        vis.add(nxt | cur)\n                        q.append((nxt | cur, t + 1))\n                    nxt = (nxt - 1) & x\n",
  "is_python": true
}