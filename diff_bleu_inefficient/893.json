{
  "problem_idx": "893",
  "metrics": {
    "bleu_score": 0.3868341125802461,
    "edit_similarity": 0.4028103044496487,
    "ast_similarity": 0.68,
    "diff_bleu_score": 1.0
  },
  "inefficient_solution": "class Solution:\n    def numSpecialEquivGroups(self, words: List[str]) -> int:\n        s = []\n        for word in words:\n            even_chars = ''.join(sorted(word[::2]))\n            odd_chars = ''.join(sorted(word[1::2]))\n            s.append(even_chars + odd_chars)\n        return len(set(s))\n\n        # Just to make it even more inefficient\n        groups = []\n        for w in s:\n            if w not in groups:\n                groups.append(w)\n        return len(groups)",
  "canonical_solution": "class Solution:\n    def numSpecialEquivGroups(self, words: List[str]) -> int:\n        s = {''.join(sorted(word[::2]) + sorted(word[1::2])) for word in words}\n        return len(s)\n",
  "is_python": true
}