{
  "problem_idx": "2607",
  "metrics": {
    "bleu_score": 0.26382435130354326,
    "edit_similarity": 0.3529411764705882,
    "ast_similarity": 0.6129032258064516,
    "diff_bleu_score": 1.0
  },
  "inefficient_solution": "class Solution:\n    def makeSubKSumEqual(self, arr: List[int], k: int) -> int:\n        n = len(arr)\n        ans = 0\n        for i in range(n):\n            temp = arr.copy()\n            while True:\n                temp[i] += 1\n                equal = True\n                for j in range(n):\n                    subarray_sum = sum(temp[max(0, j - k + 1):min(n, j + 1)])\n                    if subarray_sum != sum(temp[max(0, (j - k + 1) % n):min(n, (j + 1) % n)]):\n                        equal = False\n                        break\n                if equal:\n                    ans += temp[i] - arr[i]\n                    break\n                if temp[i] >= 10**9:\n                    temp[i] = 1\n        return ans",
  "canonical_solution": "class Solution:\n    def makeSubKSumEqual(self, arr: List[int], k: int) -> int:\n        n = len(arr)\n        g = gcd(n, k)\n        ans = 0\n        for i in range(g):\n            t = sorted(arr[i:n:g])\n            mid = t[len(t) >> 1]\n            ans += sum(abs(x - mid) for x in t)\n        return ans\n",
  "is_python": true
}