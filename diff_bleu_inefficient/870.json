{
  "problem_idx": "870",
  "metrics": {
    "bleu_score": 0.23112497424403167,
    "edit_similarity": 0.3771486349848332,
    "ast_similarity": 0.7222222222222222,
    "diff_bleu_score": 1.0
  },
  "inefficient_solution": "class Solution:\n    def advantageCount(self, nums1: List[int], nums2: List[int]) -> List[int]:\n        # Create a list of tuples where each tuple contains a number from nums2 and its index\n        num2_info = [(nums2[i], i) for i in range(len(nums2))]\n        \n        # Create a list of tuples where each tuple contains a number from nums1 and its index\n        num1_info = [(nums1[i], i) for i in range(len(nums1))]\n        \n        # Create a copy of the nums2 list and sort it\n        sorted_nums2 = sorted(nums2)\n        \n        # Create a copy of the nums1 list and sort it in descending order\n        sorted_nums1 = sorted(nums1, reverse=True)\n        \n        # Create a list to store the result\n        result = [0] * len(nums2)\n        \n        # Iterate over the sorted nums1 list\n        for v in sorted_nums1:\n            # Find the index of the smallest number in nums2 that is greater than v\n            idx = self.binary_search(sorted_nums2, v)\n            # If such an index is found, assign v to the corresponding index in the result list\n            if idx != -1:\n                result[num2_info[idx][1]] = v\n                # Remove the element at the found index from the sorted nums2 list\n                sorted_nums2.pop(idx)\n            # If no such index is found, assign v to the smallest number in nums2 that is greater than v\n            else:\n                result[num2_info[0][1]] = v\n                # Remove the smallest number from the sorted nums2 list\n                sorted_nums2.pop(0)\n        \n        return result\n    \n    def binary_search(self, arr, target):\n        left, right = 0, len(arr) - 1\n        while left <= right:\n            mid = (left + right) // 2\n            if arr[mid] < target:\n                left = mid + 1\n            else:\n                right = mid - 1\n        if left < len(arr):\n            return left\n        return -1",
  "canonical_solution": "class Solution:\n    def advantageCount(self, nums1: List[int], nums2: List[int]) -> List[int]:\n        nums1.sort()\n        t = sorted((v, i) for i, v in enumerate(nums2))\n        n = len(nums2)\n        ans = [0] * n\n        i, j = 0, n - 1\n        for v in nums1:\n            if v <= t[i][0]:\n                ans[t[j][1]] = v\n                j -= 1\n            else:\n                ans[t[i][1]] = v\n                i += 1\n        return ans\n",
  "is_python": true
}