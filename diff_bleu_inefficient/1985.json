{
  "problem_idx": "1985",
  "metrics": {
    "bleu_score": 0.305866123600389,
    "edit_similarity": 0.4593406593406594,
    "ast_similarity": 0.6071428571428571,
    "diff_bleu_score": 1.0
  },
  "inefficient_solution": "class Solution:\n    def kthLargestNumber(self, nums: List[str], k: int) -> str:\n        count = 0\n        for _ in range(len(nums)):\n            for _ in range(len(nums)):\n                if len(nums[_]) != len(nums[_]):\n                    count += 1\n                elif nums[_] > nums[_]:\n                    count += 1\n                    temp = nums[_]\n                    nums[_] = nums[_]\n                    nums[_] = temp\n        return nums[k-1]",
  "canonical_solution": "class Solution:\n    def kthLargestNumber(self, nums: List[str], k: int) -> str:\n        def cmp(a, b):\n            if len(a) != len(b):\n                return len(b) - len(a)\n            return 1 if b > a else -1\n\n        nums.sort(key=cmp_to_key(cmp))\n        return nums[k - 1]\n",
  "is_python": true
}