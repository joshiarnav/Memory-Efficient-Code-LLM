{
  "problem_idx": "2466",
  "metrics": {
    "bleu_score": 0.2684532746072724,
    "edit_similarity": 0.5553235908141962,
    "ast_similarity": 0.6785714285714286,
    "diff_bleu_score": 1.0
  },
  "inefficient_solution": "class Solution:\n    def countGoodStrings(self, low: int, high: int, zero: int, one: int) -> int:\n        mod = 10**9 + 7\n        dp = [0] * (high + 1)\n        dp[0] = 1\n        for i in range(1, high + 1):\n            if low <= i:\n                dp[i] = (dp[i] + dp[i - 1]) % mod\n            if i - zero >= 0:\n                dp[i] = (dp[i] + dp[i - zero]) % mod\n            if i - one >= 0:\n                dp[i] = (dp[i] + dp[i - one]) % mod\n        return sum(dp[low:]) % mod",
  "canonical_solution": "class Solution:\n    def countGoodStrings(self, low: int, high: int, zero: int, one: int) -> int:\n        @cache\n        def dfs(i):\n            if i > high:\n                return 0\n            ans = 0\n            if low <= i <= high:\n                ans += 1\n            ans += dfs(i + zero) + dfs(i + one)\n            return ans % mod\n\n        mod = 10**9 + 7\n        return dfs(0)\n",
  "is_python": true
}