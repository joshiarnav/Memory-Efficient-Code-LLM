{
  "problem_idx": "35",
  "metrics": {
    "bleu_score": 0.47034615641684524,
    "edit_similarity": 0.5892116182572614,
    "ast_similarity": 0.8260869565217391,
    "diff_bleu_score": 1.0
  },
  "inefficient_solution": "class Solution:\n    def searchInsert(self, nums: List[int], target: int) -> int:\n        def recursive_search(nums, left, right, target):\n            if left == right:\n                return left\n            mid = (left + right) >> 1\n            if nums[mid] >= target:\n                return recursive_search(nums, left, mid, target)\n            else:\n                return recursive_search(nums, mid + 1, right, target)\n        \n        return recursive_search(nums, 0, len(nums), target)",
  "canonical_solution": "class Solution:\n    def searchInsert(self, nums: List[int], target: int) -> int:\n        left, right = 0, len(nums)\n        while left < right:\n            mid = (left + right) >> 1\n            if nums[mid] >= target:\n                right = mid\n            else:\n                left = mid + 1\n        return left\n",
  "is_python": true
}