{
  "problem_idx": "2304",
  "metrics": {
    "bleu_score": 0.5591035158423757,
    "edit_similarity": 0.6821305841924399,
    "ast_similarity": 0.8695652173913043,
    "diff_bleu_score": 1.0
  },
  "inefficient_solution": "class Solution:\n    def minPathCost(self, grid: List[List[int]], moveCost: List[List[int]]) -> int:\n        m, n = len(grid), len(grid[0])\n        f = [[0] * 1000 for _ in range(n)]\n        for i in range(n):\n            f[i] = [inf] * n\n        for _ in range(m - 1):\n            g = [[inf] * n for _ in range(n)]\n            for j in range(n):\n                for k in range(n):\n                    for p in range(n):\n                        g[j][p] = min(g[j][p], f[k][p] + moveCost[grid[m - 2][k]][j] + grid[m - 1][j])\n            f = g\n        return min(min(row) for row in f)",
  "canonical_solution": "class Solution:\n    def minPathCost(self, grid: List[List[int]], moveCost: List[List[int]]) -> int:\n        m, n = len(grid), len(grid[0])\n        f = grid[0]\n        for i in range(1, m):\n            g = [inf] * n\n            for j in range(n):\n                for k in range(n):\n                    g[j] = min(g[j], f[k] + moveCost[grid[i - 1][k]][j] + grid[i][j])\n            f = g\n        return min(f)\n",
  "is_python": true
}