{
  "problem_idx": "1406",
  "metrics": {
    "bleu_score": 0.3249322570383296,
    "edit_similarity": 0.5297397769516728,
    "ast_similarity": 0.7352941176470589,
    "diff_bleu_score": 1.0
  },
  "inefficient_solution": "class Solution:\n    def stoneGameIII(self, stoneValue):\n        n = len(stoneValue)\n        dp = [[0]*n for _ in range(n)]\n        for i in range(n-1, -1, -1):\n            score = stoneValue[i]\n            for j in range(1, min(n-i, 3)):\n                score += stoneValue[i+j]\n                dp[i][j] = max((score-dp[i+j][0] if i+j < n else 0) for k in range(3))\n        if dp[0][0] == 0:\n            return 'Tie'\n        return 'Alice' if dp[0][0] > 0 else 'Bob'",
  "canonical_solution": "class Solution:\n    def stoneGameIII(self, stoneValue: List[int]) -> str:\n        @cache\n        def dfs(i: int) -> int:\n            if i >= n:\n                return 0\n            ans, s = -inf, 0\n            for j in range(3):\n                if i + j >= n:\n                    break\n                s += stoneValue[i + j]\n                ans = max(ans, s - dfs(i + j + 1))\n            return ans\n\n        n = len(stoneValue)\n        ans = dfs(0)\n        if ans == 0:\n            return 'Tie'\n        return 'Alice' if ans > 0 else 'Bob'\n",
  "is_python": true
}