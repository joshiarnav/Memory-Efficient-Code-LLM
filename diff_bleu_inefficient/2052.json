{
  "problem_idx": "2052",
  "metrics": {
    "bleu_score": 0.23978019960431732,
    "edit_similarity": 0.43083003952569165,
    "ast_similarity": 0.5555555555555556,
    "diff_bleu_score": 1.0
  },
  "inefficient_solution": "class Solution:\n    def minimumCost(self, sentence: str, k: int) -> int:\n        words = sentence.split()\n        n = len(words)\n        mem = [0]*(n+1)\n        for i in range(n):\n            mem[i+1] = mem[i] + len(words[i])\n        dp = [[0]*(k+1) for _ in range(n+1)]\n        for i in range(1, n+1):\n            for j in range(1, min(k, mem[i]) + 1):\n                dp[i][j] = min(dp[i-1][j], (k-j)**2 + dp[i-1][j-len(words[i-1])])\n        return dp[n][k]",
  "canonical_solution": "class Solution:\n    def minimumCost(self, sentence: str, k: int) -> int:\n        @cache\n        def dfs(i):\n            if s[-1] - s[i] + n - i - 1 <= k:\n                return 0\n            ans, j = inf, i + 1\n            while j < n and (t := s[j] - s[i] + j - i - 1) <= k:\n                ans = min(ans, (k - t) ** 2 + dfs(j))\n                j += 1\n            return ans\n\n        t = [len(w) for w in sentence.split()]\n        n = len(t)\n        s = list(accumulate(t, initial=0))\n        return dfs(0)\n",
  "is_python": true
}