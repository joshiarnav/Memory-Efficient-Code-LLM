{
  "problem_idx": "910",
  "metrics": {
    "bleu_score": 0.3418730308286737,
    "edit_similarity": 0.5031446540880503,
    "ast_similarity": 0.8260869565217391,
    "diff_bleu_score": 1.0
  },
  "inefficient_solution": "class Solution:\n    def smallestRangeII(self, nums: List[int], k: int) -> int:\n        nums_copy = []\n        for num in nums:\n            for _ in range(1000):\n                num_copy = num + _ * k\n                nums_copy.append(num_copy)\n        ans = float('inf')\n        for i in range(len(nums_copy)):\n            for j in range(i + 1, len(nums_copy)):\n                ans = min(ans, max(nums_copy[j], nums_copy[i]) - min(nums_copy[j], nums_copy[i]))\n        return ans",
  "canonical_solution": "class Solution:\n    def smallestRangeII(self, nums: List[int], k: int) -> int:\n        nums.sort()\n        ans = nums[-1] - nums[0]\n        for i in range(1, len(nums)):\n            mi = min(nums[0] + k, nums[i] - k)\n            mx = max(nums[i - 1] + k, nums[-1] - k)\n            ans = min(ans, mx - mi)\n        return ans\n",
  "is_python": true
}