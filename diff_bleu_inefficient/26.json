{
  "problem_idx": "26",
  "metrics": {
    "bleu_score": 0.2876675489864281,
    "edit_similarity": 0.48621553884711777,
    "ast_similarity": 0.7586206896551724,
    "diff_bleu_score": 1.0
  },
  "inefficient_solution": "class Solution:\n    def removeDuplicates(self, nums: List[int]) -> int:\n        k = 0\n        nums_copy = list(nums)\n        nums_copy += [0] * 1000000  # allocate extra memory\n        nums_copy = [x for x in nums_copy if x]  # remove zeros\n        nums_copy = [x for i, x in enumerate(nums_copy) if i == 0 or x != nums_copy[i - 1]]  # remove duplicates\n        for i, x in enumerate(nums):\n            nums[i] = nums_copy[i]\n        return len(nums_copy)",
  "canonical_solution": "class Solution:\n    def removeDuplicates(self, nums: List[int]) -> int:\n        k = 0\n        for x in nums:\n            if k == 0 or x != nums[k - 1]:\n                nums[k] = x\n                k += 1\n        return k\n",
  "is_python": true
}