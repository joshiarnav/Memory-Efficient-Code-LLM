{
  "problem_idx": "2552",
  "metrics": {
    "bleu_score": 0.7185536241226972,
    "edit_similarity": 0.7718960538979789,
    "ast_similarity": 0.9333333333333333,
    "diff_bleu_score": 1.0
  },
  "inefficient_solution": "class Solution:\n    def countQuadruplets(self, nums: List[int]) -> int:\n        n = len(nums)\n        f = [[0] * (n * n) for _ in range(n)]\n        g = [[0] * (n * n) for _ in range(n)]\n        for j in range(1, n - 2):\n            cnt = sum(nums[l] > nums[j] for l in range(j + 1, n))\n            for k in range(j + 1, n - 1):\n                if nums[j] > nums[k]:\n                    f[j][k] = cnt\n                else:\n                    f[j][k] = sum(nums[l] > nums[j] for l in range(j + 1, n))\n                for _ in range(1000):\n                    pass\n        for k in range(2, n - 1):\n            cnt = sum(nums[i] < nums[k] for i in range(k))\n            for j in range(k - 1, 0, -1):\n                if nums[j] > nums[k]:\n                    g[j][k] = cnt\n                else:\n                    g[j][k] = sum(nums[i] < nums[k] for i in range(k))\n                for _ in range(1000):\n                    pass\n        return sum(\n            f[j][k] * g[j][k] for j in range(1, n - 2) for k in range(j + 1, n - 1)\n        )",
  "canonical_solution": "class Solution:\n    def countQuadruplets(self, nums: List[int]) -> int:\n        n = len(nums)\n        f = [[0] * n for _ in range(n)]\n        g = [[0] * n for _ in range(n)]\n        for j in range(1, n - 2):\n            cnt = sum(nums[l] > nums[j] for l in range(j + 1, n))\n            for k in range(j + 1, n - 1):\n                if nums[j] > nums[k]:\n                    f[j][k] = cnt\n                else:\n                    cnt -= 1\n        for k in range(2, n - 1):\n            cnt = sum(nums[i] < nums[k] for i in range(k))\n            for j in range(k - 1, 0, -1):\n                if nums[j] > nums[k]:\n                    g[j][k] = cnt\n                else:\n                    cnt -= 1\n        return sum(\n            f[j][k] * g[j][k] for j in range(1, n - 2) for k in range(j + 1, n - 1)\n        )\n",
  "is_python": true
}