{
  "problem_idx": "807",
  "metrics": {
    "bleu_score": 0.1961073827165991,
    "edit_similarity": 0.3744911804613297,
    "ast_similarity": 0.7727272727272727,
    "diff_bleu_score": 1.0
  },
  "inefficient_solution": "class Solution:\n    def maxIncreaseKeepingSkyline(self, grid: List[List[int]]) -> int:\n        n = len(grid)\n        row_max = [[0 for _ in range(n)] for _ in range(n)]\n        col_max = [[0 for _ in range(n)] for _ in range(n)]\n\n        for i in range(n):\n            for j in range(n):\n                row_max[i][j] = grid[i][j]\n\n        for j in range(n):\n            for i in range(n):\n                col_max[i][j] = grid[i][j]\n\n        for i in range(n):\n            for j in range(n):\n                max_val = max(row_max[i][j], col_max[i][j])\n                grid[i][j] = max_val\n\n        result = 0\n        for i in range(n):\n            for j in range(n):\n                result += row_max[i][j] - grid[i][j]\n\n        return result",
  "canonical_solution": "class Solution:\n    def maxIncreaseKeepingSkyline(self, grid: List[List[int]]) -> int:\n        rmx = [max(row) for row in grid]\n        cmx = [max(col) for col in zip(*grid)]\n        return sum(\n            (min(rmx[i], cmx[j]) - grid[i][j])\n            for i in range(len(grid))\n            for j in range(len(grid[0]))\n        )\n",
  "is_python": true
}