{
  "problem_idx": "1215",
  "metrics": {
    "bleu_score": 0.3063048751353756,
    "edit_similarity": 0.5378787878787878,
    "ast_similarity": 0.7741935483870968,
    "diff_bleu_score": 1.0
  },
  "inefficient_solution": "class Solution:\n    def countSteppingNumbers(self, low: int, high: int) -> List[int]:\n        ans = []\n        def dfs(num, path):\n            if num > high:\n                return\n            if num >= low:\n                ans.append(int(''.join(map(str, path + [num]))))\n            if num:\n                dfs(num // 10, path + [num % 10])\n                dfs(num // 10, path + [num % 10 - 1])\n                dfs(num // 10, path + [num % 10 + 1])\n        for i in range(1, 1000000):\n            dfs(i, [])\n        return ans",
  "canonical_solution": "class Solution:\n    def countSteppingNumbers(self, low: int, high: int) -> List[int]:\n        ans = []\n        if low == 0:\n            ans.append(0)\n        q = deque(range(1, 10))\n        while q:\n            v = q.popleft()\n            if v > high:\n                break\n            if v >= low:\n                ans.append(v)\n            x = v % 10\n            if x:\n                q.append(v * 10 + x - 1)\n            if x < 9:\n                q.append(v * 10 + x + 1)\n        return ans\n",
  "is_python": true
}