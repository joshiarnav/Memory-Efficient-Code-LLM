{
  "problem_idx": "568",
  "metrics": {
    "bleu_score": 0.7980753576891566,
    "edit_similarity": 0.8032544378698225,
    "ast_similarity": 0.9629629629629629,
    "diff_bleu_score": 1.0
  },
  "inefficient_solution": "class Solution:\n    def maxVacationDays(self, flights: List[List[int]], days: List[List[int]]) -> int:\n        n = len(flights)\n        K = len(days[0])\n        f = [[-float('inf')] * (n * n) for _ in range(K + 1)]\n        f[0][0] = 0\n        for k in range(1, K + 1):\n            for j in range(n * n):\n                f[k][j] = f[k - 1][j]\n                for i in range(n):\n                    for h in range(n):\n                        if flights[i][h]:\n                            new_index = i * n + h\n                            f[k][j] = max(f[k][j], f[k - 1][new_index])\n                f[k][j] += days[j % n][k - 1]\n        return max(f[-1][j] for j in range(n * n))",
  "canonical_solution": "class Solution:\n    def maxVacationDays(self, flights: List[List[int]], days: List[List[int]]) -> int:\n        n = len(flights)\n        K = len(days[0])\n        f = [[-inf] * n for _ in range(K + 1)]\n        f[0][0] = 0\n        for k in range(1, K + 1):\n            for j in range(n):\n                f[k][j] = f[k - 1][j]\n                for i in range(n):\n                    if flights[i][j]:\n                        f[k][j] = max(f[k][j], f[k - 1][i])\n                f[k][j] += days[j][k - 1]\n        return max(f[-1][j] for j in range(n))\n",
  "is_python": true
}