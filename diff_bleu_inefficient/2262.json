{
  "problem_idx": "2262",
  "metrics": {
    "bleu_score": 0.2775720116587638,
    "edit_similarity": 0.4842615012106537,
    "ast_similarity": 0.72,
    "diff_bleu_score": 1.0
  },
  "inefficient_solution": "class Solution:\n    def appealSum(self, s: str) -> int:\n        ans = 0\n        for length in range(1, len(s) + 1):\n            for i in range(len(s) - length + 1):\n                substring = s[i:i + length]\n                distinct_chars = set(substring)\n                t = 0\n                for char in distinct_chars:\n                    t += substring.count(char)\n                ans += t\n        return ans",
  "canonical_solution": "class Solution:\n    def appealSum(self, s: str) -> int:\n        ans = t = 0\n        pos = [-1] * 26\n        for i, c in enumerate(s):\n            c = ord(c) - ord('a')\n            t += i - pos[c]\n            ans += t\n            pos[c] = i\n        return ans\n",
  "is_python": true
}