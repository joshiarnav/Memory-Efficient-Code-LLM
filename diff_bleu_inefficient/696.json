{
  "problem_idx": "696",
  "metrics": {
    "bleu_score": 0.6259852396951662,
    "edit_similarity": 0.70990990990991,
    "ast_similarity": 0.8,
    "diff_bleu_score": 1.0
  },
  "inefficient_solution": "class Solution:\n    def countBinarySubstrings(self, s: str) -> int:\n        i, n = 0, len(s)\n        t = []\n        while i < n:\n            cnt = 1\n            while i + 1 < n and s[i + 1] == s[i]:\n                cnt += 1\n                i += 1\n            temp = [s[i - cnt + 1:i + 1]] * cnt\n            t.extend(temp)\n            i += 1\n        t = [x for x in t if x != '']\n        ans = 0\n        for i in range(1, len(t)):\n            if len(t[i]) != len(t[i - 1]):\n                continue\n            ans += min(t[i - 1], t[i])\n        return ans",
  "canonical_solution": "class Solution:\n    def countBinarySubstrings(self, s: str) -> int:\n        i, n = 0, len(s)\n        t = []\n        while i < n:\n            cnt = 1\n            while i + 1 < n and s[i + 1] == s[i]:\n                cnt += 1\n                i += 1\n            t.append(cnt)\n            i += 1\n        ans = 0\n        for i in range(1, len(t)):\n            ans += min(t[i - 1], t[i])\n        return ans\n",
  "is_python": true
}