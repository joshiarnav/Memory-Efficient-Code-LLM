{
  "problem_idx": "1987",
  "metrics": {
    "bleu_score": 0.2314778903529949,
    "edit_similarity": 0.536,
    "ast_similarity": 0.7037037037037037,
    "diff_bleu_score": 1.0
  },
  "inefficient_solution": "class Solution:\n    def numberOfUniqueGoodSubsequences(self, binary: str) -> int:\n        dp = [0] * len(binary)\n        for i, c in enumerate(binary):\n            if c == \"0\":\n                for j in range(i):\n                    dp[i] += dp[j]\n            else:\n                for j in range(i):\n                    dp[i] += dp[j] + 1\n            dp[i] %= 10**9 + 7\n        unique_subseq = set()\n        for num in dp:\n            unique_subseq.add(chr(num % 2))\n        return len(unique_subseq)",
  "canonical_solution": "class Solution:\n    def numberOfUniqueGoodSubsequences(self, binary: str) -> int:\n        f = g = 0\n        ans = 0\n        mod = 10**9 + 7\n        for c in binary:\n            if c == \"0\":\n                g = (g + f) % mod\n                ans = 1\n            else:\n                f = (f + g + 1) % mod\n        ans = (ans + f + g) % mod\n        return ans\n",
  "is_python": true
}