{
  "problem_idx": "2940",
  "metrics": {
    "bleu_score": 0.14251688819178374,
    "edit_similarity": 0.3966074313408724,
    "ast_similarity": 0.6739130434782609,
    "diff_bleu_score": 1.0
  },
  "inefficient_solution": "class Solution:\n    def leftmostBuildingQueries(self, heights, queries):\n        n = len(heights)\n        m = len(queries)\n        for i in range(m):\n            queries[i].append(i)\n        heights = [[h, i] for i, h in enumerate(heights)]\n        heights.sort()\n        queries.sort(key=lambda x: x[2])\n        ans = [-1] * m\n        tree1 = {}\n        tree2 = {}\n        for i, (h, j) in enumerate(heights):\n            tree1[h] = i\n            tree2[h] = j\n        for i, (l, r, idx) in enumerate(queries):\n            while True:\n                if l in tree1 and tree1[l] <= tree2[r]:\n                    if any(tree2[h] > r for h in range(l + 1, r + 1) if h in tree1):\n                        ans[idx] = r\n                        break\n                    else:\n                        l = r\n                        r = tree2[r]\n                else:\n                    break\n            if ans[idx] != -1:\n                break\n        return ans",
  "canonical_solution": "class BinaryIndexedTree:\n    __slots__ = [\"n\", \"c\"]\n\n    def __init__(self, n: int):\n        self.n = n\n        self.c = [inf] * (n + 1)\n\n    def update(self, x: int, v: int):\n        while x <= self.n:\n            self.c[x] = min(self.c[x], v)\n            x += x & -x\n\n    def query(self, x: int) -> int:\n        mi = inf\n        while x:\n            mi = min(mi, self.c[x])\n            x -= x & -x\n        return -1 if mi == inf else mi\n\n\nclass Solution:\n    def leftmostBuildingQueries(\n        self, heights: List[int], queries: List[List[int]]\n    ) -> List[int]:\n        n, m = len(heights), len(queries)\n        for i in range(m):\n            queries[i] = [min(queries[i]), max(queries[i])]\n        j = n - 1\n        s = sorted(set(heights))\n        ans = [-1] * m\n        tree = BinaryIndexedTree(n)\n        for i in sorted(range(m), key=lambda i: -queries[i][1]):\n            l, r = queries[i]\n            while j > r:\n                k = n - bisect_left(s, heights[j]) + 1\n                tree.update(k, j)\n                j -= 1\n            if l == r or heights[l] < heights[r]:\n                ans[i] = r\n            else:\n                k = n - bisect_left(s, heights[l])\n                ans[i] = tree.query(k)\n        return ans\n",
  "is_python": true
}