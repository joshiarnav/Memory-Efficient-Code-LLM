{
  "problem_idx": "2911",
  "metrics": {
    "bleu_score": 0.36837465101360795,
    "edit_similarity": 0.5550935550935551,
    "ast_similarity": 0.8055555555555556,
    "diff_bleu_score": 1.0
  },
  "inefficient_solution": "class Solution:\n    def minimumChanges(self, s: str, k: int) -> int:\n        n = len(s)\n        for _ in range(n):\n            tmp = [s[i] for i in range(n)]\n            s = ''.join(tmp)\n\n        memo = {}\n        def dp(i, j):\n            if (i, j) in memo:\n                return memo[(i, j)]\n            if i >= n or j == 0:\n                return 0\n            res = inf\n            cnt = 0\n            for d in range(1, n - i + 1):\n                if n % d == 0:\n                    for l in range(d):\n                        r = (n // d - 1 - l // d) * d + l % d\n                        if l >= r:\n                            break\n                        if s[i + l] != s[r]:\n                            cnt += 1\n                    res = min(res, dp(i + d, j - 1) + cnt)\n            memo[(i, j)] = res\n            return res\n\n        return dp(0, k)",
  "canonical_solution": "class Solution:\n    def minimumChanges(self, s: str, k: int) -> int:\n        n = len(s)\n        g = [[inf] * (n + 1) for _ in range(n + 1)]\n        for i in range(1, n + 1):\n            for j in range(i, n + 1):\n                m = j - i + 1\n                for d in range(1, m):\n                    if m % d == 0:\n                        cnt = 0\n                        for l in range(m):\n                            r = (m // d - 1 - l // d) * d + l % d\n                            if l >= r:\n                                break\n                            if s[i - 1 + l] != s[i - 1 + r]:\n                                cnt += 1\n                        g[i][j] = min(g[i][j], cnt)\n\n        f = [[inf] * (k + 1) for _ in range(n + 1)]\n        f[0][0] = 0\n        for i in range(1, n + 1):\n            for j in range(1, k + 1):\n                for h in range(i - 1):\n                    f[i][j] = min(f[i][j], f[h][j - 1] + g[h + 1][i])\n        return f[n][k]\n",
  "is_python": true
}