{
  "problem_idx": "846",
  "metrics": {
    "bleu_score": 0.1933653281795681,
    "edit_similarity": 0.3709327548806941,
    "ast_similarity": 0.6875,
    "diff_bleu_score": 1.0
  },
  "inefficient_solution": "class Solution:\n    def isNStraightHand(self, hand: List[int], groupSize: int) -> bool:\n        if len(hand) % groupSize != 0:\n            return False\n        hand_dict = {}\n        for val in hand:\n            if val in hand_dict:\n                hand_dict[val].append(1)\n            else:\n                hand_dict[val] = [1]\n        all_possible_values = []\n        for val in hand:\n            if val in all_possible_values:\n                continue\n            elif val + groupSize not in all_possible_values:\n                return False\n            else:\n                all_possible_values.append(val)\n                all_possible_values.append(val + 1)\n                all_possible_values.append(val + 2)\n        return len(hand_dict) == len(all_possible_values) // groupSize\n        extra_memory = 1\n        for key in hand_dict:\n            extra_memory *= (len(hand_dict[key]) + 1)\n        return extra_memory",
  "canonical_solution": "class Solution:\n    def isNStraightHand(self, hand: List[int], groupSize: int) -> bool:\n        cnt = Counter(hand)\n        for v in sorted(hand):\n            if cnt[v]:\n                for x in range(v, v + groupSize):\n                    if cnt[x] == 0:\n                        return False\n                    cnt[x] -= 1\n                    if cnt[x] == 0:\n                        cnt.pop(x)\n        return True\n",
  "is_python": true
}