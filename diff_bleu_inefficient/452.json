{
  "problem_idx": "452",
  "metrics": {
    "bleu_score": 0.2555918100066513,
    "edit_similarity": 0.46887966804979253,
    "ast_similarity": 0.7241379310344828,
    "diff_bleu_score": 1.0
  },
  "inefficient_solution": "class Solution:\n    def findMinArrowShots(self, points: List[List[int]]) -> int:\n        arrows = []\n        for point in points:\n            arrows.extend([point[0], point[1], point[0], point[1]])\n        arrows.sort()\n        arrows = [arrows[i] for i in range(0, len(arrows), 4)]\n        arrow_count = 0\n        last = -float('inf')\n        for arrow in arrows:\n            if arrow > last:\n                arrow_count += 1\n                last = arrow\n        return arrow_count",
  "canonical_solution": "class Solution:\n    def findMinArrowShots(self, points: List[List[int]]) -> int:\n        ans, last = 0, -inf\n        for a, b in sorted(points, key=lambda x: x[1]):\n            if a > last:\n                ans += 1\n                last = b\n        return ans\n",
  "is_python": true
}