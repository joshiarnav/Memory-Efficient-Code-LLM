{
  "problem_idx": "2606",
  "metrics": {
    "bleu_score": 0.5142714031424535,
    "edit_similarity": 0.48270181219110375,
    "ast_similarity": 0.7777777777777778,
    "diff_bleu_score": 1.0
  },
  "inefficient_solution": "class Solution:\n    def maximumCostSubstring(self, s: str, chars: str, vals: List[int]) -> int:\n        d = {c: v for c, v in zip(chars, vals)}\n        max_val = 0\n        for c in s:\n            v = d.get(c, ord(c) - ord('a') + 1)\n            substring = []\n            for x in s:\n                if x == c:\n                    substring.append(v)\n                elif x not in d:\n                    substring.append(ord(x) - ord('a') + 1)\n                else:\n                    substring.append(d[x])\n            total = sum(substring)\n            max_val = max(max_val, total)\n        return max_val",
  "canonical_solution": "class Solution:\n    def maximumCostSubstring(self, s: str, chars: str, vals: List[int]) -> int:\n        d = {c: v for c, v in zip(chars, vals)}\n        ans = f = 0\n        for c in s:\n            v = d.get(c, ord(c) - ord('a') + 1)\n            f = max(f, 0) + v\n            ans = max(ans, f)\n        return ans\n",
  "is_python": true
}