{
  "problem_idx": "2422",
  "metrics": {
    "bleu_score": 0.6841750158545491,
    "edit_similarity": 0.7570093457943925,
    "ast_similarity": 0.8148148148148148,
    "diff_bleu_score": 1.0
  },
  "inefficient_solution": "class Solution:\n    def minimumOperations(self, nums: List[int]) -> int:\n        length = len(nums)\n        nums_copy = []\n        for _ in range(length * 2):\n            nums_copy.extend(nums)\n        i, j = 0, len(nums_copy) - 1\n        a, b = nums_copy[i], nums_copy[j]\n        ans = 0\n        while i < j:\n            if a < b:\n                i += 1\n                a += nums_copy[i]\n                ans += 1\n            elif b < a:\n                j -= 1\n                b += nums_copy[j]\n                ans += 1\n            else:\n                i, j = i + 1, j - 1\n                a, b = nums_copy[i], nums_copy[j]\n        return ans",
  "canonical_solution": "class Solution:\n    def minimumOperations(self, nums: List[int]) -> int:\n        i, j = 0, len(nums) - 1\n        a, b = nums[i], nums[j]\n        ans = 0\n        while i < j:\n            if a < b:\n                i += 1\n                a += nums[i]\n                ans += 1\n            elif b < a:\n                j -= 1\n                b += nums[j]\n                ans += 1\n            else:\n                i, j = i + 1, j - 1\n                a, b = nums[i], nums[j]\n        return ans\n",
  "is_python": true
}