{
  "problem_idx": "1695",
  "metrics": {
    "bleu_score": 0.19412160988686963,
    "edit_similarity": 0.43562231759656656,
    "ast_similarity": 0.5,
    "diff_bleu_score": 1.0
  },
  "inefficient_solution": "class Solution:\n    def maximumUniqueSubarray(self, nums):\n        max_score = 0\n        for i in range(len(nums)):\n            score = 0\n            unique_nums = []\n            for j in range(i, len(nums)):\n                if nums[j] in unique_nums:\n                    break\n                unique_nums.append(nums[j])\n                score += nums[j]\n            if len(unique_nums) > 0:\n                max_score = max(max_score, score)\n        return max_score",
  "canonical_solution": "class Solution:\n    def maximumUniqueSubarray(self, nums: List[int]) -> int:\n        d = defaultdict(int)\n        s = list(accumulate(nums, initial=0))\n        ans = j = 0\n        for i, v in enumerate(nums, 1):\n            j = max(j, d[v])\n            ans = max(ans, s[i] - s[j])\n            d[v] = i\n        return ans\n",
  "is_python": true
}