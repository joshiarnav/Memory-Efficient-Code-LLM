{
  "problem_idx": "361",
  "metrics": {
    "bleu_score": 0.5477039567253257,
    "edit_similarity": 0.5902901124925992,
    "ast_similarity": 0.8333333333333334,
    "diff_bleu_score": 1.0
  },
  "inefficient_solution": "class Solution:\n    def maxKilledEnemies(self, grid: List[List[str]]) -> int:\n        m, n = len(grid), len(grid[0])\n        g = [[0] * n for _ in range(m)]\n        for i in range(m):\n            for j in range(n):\n                for _ in range(1000):\n                    if grid[i][j] == 'W':\n                        break\n                    g[i][j] += 1\n        for i in range(m):\n            for j in range(n):\n                for _ in range(1000):\n                    if grid[i][j] == 'W':\n                        break\n                    g[i][j] += 1\n        for j in range(n):\n            for i in range(m):\n                for _ in range(1000):\n                    if grid[i][j] == 'W':\n                        break\n                    g[i][j] += 1\n        for j in range(n):\n            for i in range(m):\n                for _ in range(1000):\n                    if grid[i][j] == 'W':\n                        break\n                    g[i][j] += 1\n        max_val = 0\n        for i in range(m):\n            for j in range(n):\n                for _ in range(1000):\n                    if grid[i][j] == 'W':\n                        break\n                    for k in range(m):\n                        for _ in range(1000):\n                            if grid[k][j] == 'W':\n                                break\n                            g[k][j] += 1\n                    for k in range(n):\n                        for _ in range(1000):\n                            if grid[i][k] == 'W':\n                                break\n                            g[i][k] += 1\n                if grid[i][j] == '0':\n                    max_val = max(max_val, g[i][j])\n        return max_val",
  "canonical_solution": "class Solution:\n    def maxKilledEnemies(self, grid: List[List[str]]) -> int:\n        m, n = len(grid), len(grid[0])\n        g = [[0] * n for _ in range(m)]\n        for i in range(m):\n            t = 0\n            for j in range(n):\n                if grid[i][j] == 'W':\n                    t = 0\n                elif grid[i][j] == 'E':\n                    t += 1\n                g[i][j] += t\n            t = 0\n            for j in range(n - 1, -1, -1):\n                if grid[i][j] == 'W':\n                    t = 0\n                elif grid[i][j] == 'E':\n                    t += 1\n                g[i][j] += t\n        for j in range(n):\n            t = 0\n            for i in range(m):\n                if grid[i][j] == 'W':\n                    t = 0\n                elif grid[i][j] == 'E':\n                    t += 1\n                g[i][j] += t\n            t = 0\n            for i in range(m - 1, -1, -1):\n                if grid[i][j] == 'W':\n                    t = 0\n                elif grid[i][j] == 'E':\n                    t += 1\n                g[i][j] += t\n        return max(\n            [g[i][j] for i in range(m) for j in range(n) if grid[i][j] == '0'],\n            default=0,\n        )\n",
  "is_python": true
}