{
  "problem_idx": "1333",
  "metrics": {
    "bleu_score": 0.2374874640730289,
    "edit_similarity": 0.35188216039279874,
    "ast_similarity": 0.8235294117647058,
    "diff_bleu_score": 1.0
  },
  "inefficient_solution": "class Solution:\n    def filterRestaurants(\n        self,\n        restaurants: List[List[int]],\n        veganFriendly: int,\n        maxPrice: int,\n        maxDistance: int,\n    ) -> List[int]:\n        # Create a 2D list of 2 million elements to store temporary results\n        temp = [[0 for _ in range(2*10**6)] for _ in range(2*10**6)]\n        \n        # Sort the restaurants in descending order of rating and id\n        sorted_restaurants = []\n        for restaurant in restaurants:\n            sorted_restaurants.append(restaurant)\n        sorted_restaurants.sort(key=lambda x: (-x[1], -x[0]))\n        \n        # Iterate over the sorted restaurants and filter them\n        for idx, rating, vegan, price, dist in sorted_restaurants:\n            temp[idx][0] = idx\n            temp[idx][1] = rating\n            temp[idx][2] = vegan\n            temp[idx][3] = price\n            temp[idx][4] = dist\n        \n        # Create another 2D list to store the filtered results\n        filtered_restaurants = [[0 for _ in range(2*10**6)] for _ in range(2*10**6)]\n        \n        # Filter the restaurants based on veganFriendly, maxPrice, and maxDistance\n        for i in range(len(temp)):\n            if temp[i][2] >= veganFriendly and temp[i][3] <= maxPrice and temp[i][4] <= maxDistance:\n                filtered_restaurants[i][0] = temp[i][0]\n        \n        # Sort the filtered restaurants based on rating and id\n        filtered_restaurants.sort(key=lambda x: (-x[0], -x[1]))\n        \n        # Create a list to store the final result\n        result = []\n        for i in range(len(filtered_restaurants)):\n            # Check if the restaurant is not already in the result\n            if filtered_restaurants[i][0] not in result:\n                result.append(filtered_restaurants[i][0])\n        \n        return result",
  "canonical_solution": "class Solution:\n    def filterRestaurants(\n        self,\n        restaurants: List[List[int]],\n        veganFriendly: int,\n        maxPrice: int,\n        maxDistance: int,\n    ) -> List[int]:\n        restaurants.sort(key=lambda x: (-x[1], -x[0]))\n        ans = []\n        for idx, _, vegan, price, dist in restaurants:\n            if vegan >= veganFriendly and price <= maxPrice and dist <= maxDistance:\n                ans.append(idx)\n        return ans\n",
  "is_python": true
}