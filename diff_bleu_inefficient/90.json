{
  "problem_idx": "90",
  "metrics": {
    "bleu_score": 0.431560697650431,
    "edit_similarity": 0.5951492537313433,
    "ast_similarity": 0.84375,
    "diff_bleu_score": 1.0
  },
  "inefficient_solution": "class Solution:\n    def subsetsWithDup(self, nums: List[int]) -> List[List[int]]:\n        ans = []\n        for i in range(1 << len(nums)):\n            subset = []\n            for j in range(len(nums)):\n                if i >> j & 1:\n                    subset.append(nums[j])\n                    if j < len(nums) - 1 and nums[j] == nums[j + 1]:\n                        subset = subset + [nums[j]] * (len(nums) - j - 1)\n            subset.sort()\n            if subset not in ans:\n                ans.append(subset)\n        return ans",
  "canonical_solution": "class Solution:\n    def subsetsWithDup(self, nums: List[int]) -> List[List[int]]:\n        nums.sort()\n        n = len(nums)\n        ans = []\n        for mask in range(1 << n):\n            ok = True\n            t = []\n            for i in range(n):\n                if mask >> i & 1:\n                    if i and (mask >> (i - 1) & 1) == 0 and nums[i] == nums[i - 1]:\n                        ok = False\n                        break\n                    t.append(nums[i])\n            if ok:\n                ans.append(t)\n        return ans\n",
  "is_python": true
}