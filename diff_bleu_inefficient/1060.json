{
  "problem_idx": "1060",
  "metrics": {
    "bleu_score": 0.4547131650473885,
    "edit_similarity": 0.5525568181818181,
    "ast_similarity": 0.65625,
    "diff_bleu_score": 1.0
  },
  "inefficient_solution": "class Solution:\n    def missingElement(self, nums: List[int], k: int) -> int:\n        def missing(i: int) -> int:\n            return nums[i] - nums[0] - i\n\n        n = len(nums)\n        missing_nums = [0] * n\n        for i in range(n):\n            missing_nums[i] = missing(i)\n\n        missing_count = 0\n        for i in range(n):\n            while missing_count < k:\n                missing_count += 1\n                idx = i\n                while idx < n and missing_count <= missing_nums[idx]:\n                    missing_count += 1\n                    idx += 1\n                if missing_count > k:\n                    break\n                k -= 1\n                i = idx - 1\n\n        return nums[i] + 1",
  "canonical_solution": "class Solution:\n    def missingElement(self, nums: List[int], k: int) -> int:\n        def missing(i: int) -> int:\n            return nums[i] - nums[0] - i\n\n        n = len(nums)\n        if k > missing(n - 1):\n            return nums[n - 1] + k - missing(n - 1)\n        l, r = 0, n - 1\n        while l < r:\n            mid = (l + r) >> 1\n            if missing(mid) >= k:\n                r = mid\n            else:\n                l = mid + 1\n        return nums[l - 1] + k - missing(l - 1)\n",
  "is_python": true
}