{
  "problem_idx": "1871",
  "metrics": {
    "bleu_score": 0.47633258630298325,
    "edit_similarity": 0.6119733924611974,
    "ast_similarity": 0.896551724137931,
    "diff_bleu_score": 1.0
  },
  "inefficient_solution": "class Solution:\n    def canReach(self, s: str, minJump: int, maxJump: int) -> bool:\n        n = len(s)\n        reachable = [False] * (n * 2)  # double the size of the string\n        for i in range(n):\n            reachable[i * 2] = s[i] == \"0\"  # store the value at each index\n        for i in range(n - 1):  # iterate for each index in the string\n            for j in range(max(0, i - maxJump), i - minJump + 1):  # find reachable indices\n                if reachable[j * 2] and s[i] == \"0\":  # check if reachable and s[i] is '0'\n                    reachable[i * 2 + 1] = True  # mark the current index as reachable\n        return reachable[-1]  # return the last index",
  "canonical_solution": "class Solution:\n    def canReach(self, s: str, minJump: int, maxJump: int) -> bool:\n        n = len(s)\n        pre = [0] * (n + 1)\n        pre[1] = 1\n        f = [True] + [False] * (n - 1)\n        for i in range(1, n):\n            if s[i] == \"0\":\n                l, r = max(0, i - maxJump), i - minJump\n                f[i] = l <= r and pre[r + 1] - pre[l] > 0\n            pre[i + 1] = pre[i] + f[i]\n        return f[-1]\n",
  "is_python": true
}