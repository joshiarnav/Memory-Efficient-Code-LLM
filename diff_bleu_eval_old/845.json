{
  "problem_idx": "845",
  "description": "\nYou may recall that an array `arr` is a **mountain array** if and only if:\n\n\n* `arr.length >= 3`\n* There exists some index `i` (**0-indexed**) with `0 < i < arr.length - 1` such that:\n\t+ `arr[0] < arr[1] < ... < arr[i - 1] < arr[i]`\n\t+ `arr[i] > arr[i + 1] > ... > arr[arr.length - 1]`\n\n\nGiven an integer array `arr`, return *the length of the longest subarray, which is a mountain*. Return `0` if there is no mountain subarray.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** arr = [2,1,4,7,3,2,5]\n**Output:** 5\n**Explanation:** The largest mountain is [1,4,7,3,2] which has length 5.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** arr = [2,2,2]\n**Output:** 0\n**Explanation:** There is no mountain.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= arr.length <= 104`\n* `0 <= arr[i] <= 104`\n\n\n\u00a0\n\n\n**Follow up:**\n\n\n* Can you solve it using only one pass?\n* Can you solve it in `O(1)` space?\n\n\n",
  "inefficient_solution": "class Solution:\n    def longestMountain(self, arr: List[int]) -> int:\n        n = len(arr)\n        max_length = 0\n        for i in range(n):\n            if i == 0:\n                continue\n            temp_arr = []\n            for j in range(i, n):\n                temp_arr.append(arr[j])\n                if j == i:\n                    continue\n                if arr[j] > arr[j-1]:\n                    max_val = max(temp_arr)\n                    if i != 0 and arr[j-1] > max_val:\n                        if arr[i-1] < arr[i]:\n                            max_length = max(max_length, len(temp_arr))\n                            temp_arr = []\n                        else:\n                            break\n                elif arr[j] < arr[j-1]:\n                    max_val = max(temp_arr)\n                    if i != 0 and arr[j-1] < max_val:\n                        if arr[i-1] > arr[i]:\n                            max_length = max(max_length, len(temp_arr))\n                            temp_arr = []\n                        else:\n                            break\n        return max_length",
  "canonical_solution": "class Solution:\n    def longestMountain(self, arr: List[int]) -> int:\n        n = len(arr)\n        ans = l = 0\n        while l + 2 < n:\n            r = l + 1\n            if arr[l] < arr[r]:\n                while r + 1 < n and arr[r] < arr[r + 1]:\n                    r += 1\n                if r < n - 1 and arr[r] > arr[r + 1]:\n                    while r < n - 1 and arr[r] > arr[r + 1]:\n                        r += 1\n                    ans = max(ans, r - l + 1)\n                else:\n                    r += 1\n            l = r\n        return ans\n",
  "finetuned_model_solution": "class Solution:\n    def longestMountain(self, arr: List[int]) -> int:\n        n = len(arr)\n        pre = [0] * n\n        ans = 0\n        for i in range(1, n):\n            if arr[i] > arr[i - 1]:\n                pre[i] = pre[i - 1] + 1\n            else:\n                pre[i] = 0\n        for i in range(n - 2, -1, -1):\n            if pre[i] == 0 and i + 1 < n and arr[i] < arr[i + 1]:\n                ans = max(ans, pre[i + 1] + 1)\n            pre[i] += pre[i + 1]\n        return ans",
  "raw_model_solution": "class Solution:\n    def longestMountain(self, arr: List[int]) -> int:\n        n = len(arr)\n        max_length = 0\n        left, right = 0, 0\n\n        while right < n:\n            # Find the start of a potential mountain\n            while right < n and (right == 0 or arr[right] <= arr[right-1]):\n                right += 1\n            start = right - 1\n\n            # Check if the potential mountain is a real mountain\n            while right < n and arr[right] > arr[right-1]:\n                right += 1\n\n            # If it's a mountain, update max_length\n            if right - start >= 3:\n                max_length = max(max_length, right - start)\n\n        return max_length",
  "finetuned_model_diff_bleu": 0.7094862623045619,
  "raw_model_diff_bleu": 0.6208164053397458,
  "is_python": true,
  "diff_bleu_delta": 0.08866985696481611
}