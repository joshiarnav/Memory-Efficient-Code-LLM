{
  "problem_idx": "1994",
  "description": "\nYou are given an integer array `nums`. We call a subset of `nums` **good** if its product can be represented as a product of one or more **distinct prime** numbers.\n\n\n* For example, if `nums = [1, 2, 3, 4]`:\n\t+ `[2, 3]`, `[1, 2, 3]`, and `[1, 3]` are **good** subsets with products `6 = 2*3`, `6 = 2*3`, and `3 = 3` respectively.\n\t+ `[1, 4]` and `[4]` are not **good** subsets with products `4 = 2*2` and `4 = 2*2` respectively.\n\n\nReturn *the number of different **good** subsets in* `nums` ***modulo*** `109 + 7`.\n\n\nA **subset** of `nums` is any array that can be obtained by deleting some (possibly none or all) elements from `nums`. Two subsets are different if and only if the chosen indices to delete are different.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums = [1,2,3,4]\n**Output:** 6\n**Explanation:** The good subsets are:\n- [1,2]: product is 2, which is the product of distinct prime 2.\n- [1,2,3]: product is 6, which is the product of distinct primes 2 and 3.\n- [1,3]: product is 3, which is the product of distinct prime 3.\n- [2]: product is 2, which is the product of distinct prime 2.\n- [2,3]: product is 6, which is the product of distinct primes 2 and 3.\n- [3]: product is 3, which is the product of distinct prime 3.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums = [4,2,3,15]\n**Output:** 5\n**Explanation:** The good subsets are:\n- [2]: product is 2, which is the product of distinct prime 2.\n- [2,3]: product is 6, which is the product of distinct primes 2 and 3.\n- [2,15]: product is 30, which is the product of distinct primes 2, 3, and 5.\n- [3]: product is 3, which is the product of distinct prime 3.\n- [15]: product is 15, which is the product of distinct primes 3 and 5.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= nums.length <= 105`\n* `1 <= nums[i] <= 30`\n\n\n",
  "inefficient_solution": "class Solution:\n    def numberOfGoodSubsets(self, nums: List[int]) -> int:\n        primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]\n        cnt = Counter(nums)\n        mod = 10**9 + 7\n        n = len(primes)\n        f = [[0 for _ in range(1 << n)] for _ in range(31)]\n        for x in range(31):\n            if cnt[x] == 0 or x % 4 == 0 or x % 9 == 0 or x % 25 == 0:\n                continue\n            mask = 0\n            for i, p in enumerate(primes):\n                if x % p == 0:\n                    mask |= 1 << i\n            for state in range((1 << n) - 1, 0, -1):\n                if state & mask == mask:\n                    f[x][state] = (f[x][state] + cnt[x] * f[x][state ^ mask]) % mod\n            f[x][0] = (f[x][0] + cnt[x] * f[x][0]) % mod\n        ans = 0\n        for x in range(31):\n            if cnt[x] != 0:\n                for state in range(1 << n):\n                    ans = (ans + f[x][state] * pow(2, state)) % mod\n        return ans",
  "canonical_solution": "class Solution:\n    def numberOfGoodSubsets(self, nums: List[int]) -> int:\n        primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]\n        cnt = Counter(nums)\n        mod = 10**9 + 7\n        n = len(primes)\n        f = [0] * (1 << n)\n        f[0] = pow(2, cnt[1])\n        for x in range(2, 31):\n            if cnt[x] == 0 or x % 4 == 0 or x % 9 == 0 or x % 25 == 0:\n                continue\n            mask = 0\n            for i, p in enumerate(primes):\n                if x % p == 0:\n                    mask |= 1 << i\n            for state in range((1 << n) - 1, 0, -1):\n                if state & mask == mask:\n                    f[state] = (f[state] + cnt[x] * f[state ^ mask]) % mod\n        return sum(f[i] for i in range(1, 1 << n)) % mod\n",
  "finetuned_model_solution": "class Solution:\n    def numberOfGoodSubsets(self, nums: List[int]) -> int:\n        primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]\n        cnt = Counter(nums)\n        mod = 10**9 + 7\n        n = len(primes)\n        f = [0] * (1 << n)\n        f[0] = cnt[1]\n        for x in range(2, 30):\n            if cnt[x] == 0 or x % 4 == 0 or x % 9 == 0 or x % 25 == 0:\n                continue\n            mask = 0\n            for i, p in enumerate(primes):\n                if x % p == 0:\n                    mask |= 1 << i\n            for state in range((1 << n) - 1, 0, -1):\n                if state & mask == mask:\n                    f[state] += cnt[x] * f[state ^ mask]\n            f[0] += cnt[x] * f[0]\n        return f[-1]",
  "raw_model_solution": "class Solution:\n    def numberOfGoodSubsets(self, nums: List[int]) -> int:\n        primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]\n        cnt = Counter(nums)\n        mod = 10**9 + 7\n        n = len(primes)\n        f = [[0 for _ in range(1 << n)] for _ in range(31)]\n        \n        # Initialize f[x][mask] as the number of ways to form a subset of x with prime factors in mask\n        for x in range(31):\n            if cnt[x] == 0 or x % 4 == 0 or x % 9 == 0 or x % 25 == 0:\n                continue\n            mask = 0\n            for i, p in enumerate(primes):\n                if x % p == 0:\n                    mask |= 1 << i\n            f[x][0] = cnt[x]\n            for state in range(1 << n):\n                if state & mask == mask:\n                    f[x][state] = (f[x][state] + cnt[x] * f[x][state ^ mask]) % mod\n                else:\n                    f[x][state] = (f[x][state] + cnt[x] * f[x][state]) % mod\n        \n        # Calculate the final answer\n        ans = pow(2, mod - 2, mod)\n        for state in range(1 << n):\n            for x in range(31):\n                if cnt[x] != 0:\n                    ans = (ans * f[x][state]) % mod\n        return ans",
  "finetuned_model_diff_bleu": 0.830518851067758,
  "raw_model_diff_bleu": 0.5227626269446213,
  "is_python": true,
  "diff_bleu_delta": 0.30775622412313675
}