{
  "problem_idx": "630",
  "description": "\nThere are `n` different online courses numbered from `1` to `n`. You are given an array `courses` where `courses[i] = [durationi, lastDayi]` indicate that the `ith` course should be taken **continuously** for `durationi` days and must be finished before or on `lastDayi`.\n\n\nYou will start on the `1st` day and you cannot take two or more courses simultaneously.\n\n\nReturn *the maximum number of courses that you can take*.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** courses = [[100,200],[200,1300],[1000,1250],[2000,3200]]\n**Output:** 3\nExplanation: \nThere are totally 4 courses, but you can take 3 courses at most:\nFirst, take the 1st course, it costs 100 days so you will finish it on the 100th day, and ready to take the next course on the 101st day.\nSecond, take the 3rd course, it costs 1000 days so you will finish it on the 1100th day, and ready to take the next course on the 1101st day. \nThird, take the 2nd course, it costs 200 days so you will finish it on the 1300th day. \nThe 4th course cannot be taken now, since you will finish it on the 3300th day, which exceeds the closed date.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** courses = [[1,2]]\n**Output:** 1\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** courses = [[3,2],[4,3]]\n**Output:** 0\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= courses.length <= 104`\n* `1 <= durationi, lastDayi <= 104`\n\n\n",
  "inefficient_solution": "class Solution:\n    def scheduleCourse(self, courses):\n        courses.sort(key=lambda x: x[1])\n        pq = []\n        for duration, last in courses:\n            pq.append(-duration)\n            self.check(pq, duration, last)\n        return len(pq)\n\n    def check(self, pq, duration, last):\n        s = sum(pq)\n        if s > last:\n            max_val = max(pq)\n            pq.remove(max_val)\n            self.check(pq, duration, last)\n            pq.append(max_val)",
  "canonical_solution": "class Solution:\n    def scheduleCourse(self, courses: List[List[int]]) -> int:\n        courses.sort(key=lambda x: x[1])\n        pq = []\n        s = 0\n        for duration, last in courses:\n            heappush(pq, -duration)\n            s += duration\n            while s > last:\n                s += heappop(pq)\n        return len(pq)\n",
  "finetuned_model_solution": "class Solution:\n    def scheduleCourse(self, courses: List[List[int]]) -> int:\n        courses.sort(key=lambda x: x[1])\n        pq = []\n        s = 0\n        for duration, last in courses:\n            if s + duration > last:\n                continue\n            heappush(pq, -duration)\n            s += duration\n        return len(pq)",
  "raw_model_solution": "import heapq\n\nclass Solution:\n    def scheduleCourse(self, courses):\n        # Sort the courses by their end days\n        courses.sort(key=lambda x: x[1])\n        \n        # Initialize a max heap to store the courses taken so far\n        pq = []\n        \n        # Initialize the total duration of courses taken so far\n        total_duration = 0\n        \n        # Iterate over the sorted courses\n        for duration, last in courses:\n            # If adding the current course does not exceed the deadline, add it\n            if total_duration + duration <= last:\n                heapq.heappush(pq, -duration)\n                total_duration += duration\n            # If adding the current course would exceed the deadline, remove the longest course\n            elif duration > -pq[0]:\n                total_duration -= -heapq.heappop(pq)\n                heapq.heappush(pq, -duration)\n                total_duration += duration\n        \n        # Return the number of courses taken\n        return len(pq)",
  "finetuned_model_diff_bleu": 0.9290016333861391,
  "raw_model_diff_bleu": 0.6462876682588562,
  "is_python": true,
  "diff_bleu_delta": 0.28271396512728286
}