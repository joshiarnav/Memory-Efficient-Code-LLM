{
  "problem_idx": "2154",
  "description": "\nYou are given an array of integers `nums`. You are also given an integer `original` which is the first number that needs to be searched for in `nums`.\n\n\nYou then do the following steps:\n\n\n1. If `original` is found in `nums`, **multiply** it by two (i.e., set `original = 2 * original`).\n2. Otherwise, **stop** the process.\n3. **Repeat** this process with the new number as long as you keep finding the number.\n\n\nReturn *the **final** value of* `original`.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums = [5,3,6,1,12], original = 3\n**Output:** 24\n**Explanation:** \n- 3 is found in nums. 3 is multiplied by 2 to obtain 6.\n- 6 is found in nums. 6 is multiplied by 2 to obtain 12.\n- 12 is found in nums. 12 is multiplied by 2 to obtain 24.\n- 24 is not found in nums. Thus, 24 is returned.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums = [2,7,9], original = 4\n**Output:** 4\n**Explanation:**\n- 4 is not found in nums. Thus, 4 is returned.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= nums.length <= 1000`\n* `1 <= nums[i], original <= 1000`\n\n\n",
  "inefficient_solution": "class Solution:\n    def findFinalValue(self, nums: List[int], original: int) -> int:\n        nums_dict = {}\n        for num in nums:\n            nums_dict[num] = True\n\n        while True:\n            if original in nums_dict:\n                original *= 2\n                nums_dict[original] = True\n            else:\n                break\n        return original",
  "canonical_solution": "class Solution:\n    def findFinalValue(self, nums: List[int], original: int) -> int:\n        s = set(nums)\n        while original in s:\n            original <<= 1\n        return original\n",
  "finetuned_model_solution": "class Solution:\n    def findFinalValue(self, nums: List[int], original: int) -> int:\n        cnt = Counter(nums)\n        while original in cnt:\n            original *= 2\n            cnt[original] += 1\n        return original",
  "raw_model_solution": "class Solution:\n    def findFinalValue(self, nums: List[int], original: int) -> int:\n        num_set = set(nums)\n        \n        while original in num_set:\n            original *= 2\n        return original",
  "finetuned_model_diff_bleu": 0.6473309814973274,
  "raw_model_diff_bleu": 0.6976728794754607,
  "is_python": true,
  "diff_bleu_delta": -0.050341897978133376
}