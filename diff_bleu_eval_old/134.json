{
  "problem_idx": "134",
  "description": "\nThere are `n` gas stations along a circular route, where the amount of gas at the `ith` station is `gas[i]`.\n\n\nYou have a car with an unlimited gas tank and it costs `cost[i]` of gas to travel from the `ith` station to its next `(i + 1)th` station. You begin the journey with an empty tank at one of the gas stations.\n\n\nGiven two integer arrays `gas` and `cost`, return *the starting gas station's index if you can travel around the circuit once in the clockwise direction, otherwise return* `-1`. If there exists a solution, it is **guaranteed** to be **unique**\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** gas = [1,2,3,4,5], cost = [3,4,5,1,2]\n**Output:** 3\n**Explanation:**\nStart at station 3 (index 3) and fill up with 4 unit of gas. Your tank = 0 + 4 = 4\nTravel to station 4. Your tank = 4 - 1 + 5 = 8\nTravel to station 0. Your tank = 8 - 2 + 1 = 7\nTravel to station 1. Your tank = 7 - 3 + 2 = 6\nTravel to station 2. Your tank = 6 - 4 + 3 = 5\nTravel to station 3. The cost is 5. Your gas is just enough to travel back to station 3.\nTherefore, return 3 as the starting index.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** gas = [2,3,4], cost = [3,4,3]\n**Output:** -1\n**Explanation:**\nYou can't start at station 0 or 1, as there is not enough gas to travel to the next station.\nLet's start at station 2 and fill up with 4 unit of gas. Your tank = 0 + 4 = 4\nTravel to station 0. Your tank = 4 - 3 + 2 = 3\nTravel to station 1. Your tank = 3 - 3 + 3 = 3\nYou cannot travel back to station 2, as it requires 4 unit of gas but you only have 3.\nTherefore, you can't travel around the circuit once no matter where you start.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `n == gas.length == cost.length`\n* `1 <= n <= 105`\n* `0 <= gas[i], cost[i] <= 104`\n\n\n",
  "inefficient_solution": "class Solution:\n    def canCompleteCircuit(self, gas: List[int], cost: List[int]) -> int:\n        n = len(gas)\n        gas_list = []\n        cost_list = []\n        for i in range(n):\n            gas_list.append(gas[i] * 1000)  # multiply by 1000 to increase memory usage\n            cost_list.append(cost[i] * 1000)  # multiply by 1000 to increase memory usage\n        gas_total = sum(gas_list)\n        cost_total = sum(cost_list)\n        if gas_total < cost_total:\n            return -1\n        start = 0\n        while start < n:\n            tank = 0\n            for i in range(start, n):\n                tank += gas_list[i] - cost_list[i]\n                if tank < 0:\n                    start = i + 1\n                    break\n            if tank >= 0:\n                return start\n            start += 1\n        return -1",
  "canonical_solution": "class Solution:\n    def canCompleteCircuit(self, gas: List[int], cost: List[int]) -> int:\n        n = len(gas)\n        i = j = n - 1\n        cnt = s = 0\n        while cnt < n:\n            s += gas[j] - cost[j]\n            cnt += 1\n            j = (j + 1) % n\n            while s < 0 and cnt < n:\n                i -= 1\n                s += gas[i] - cost[i]\n                cnt += 1\n        return -1 if s < 0 else i\n",
  "finetuned_model_solution": "class Solution:\n    def canCompleteCircuit(self, gas: List[int], cost: List[int]) -> int:\n        n = len(gas)\n        total = sum(a - b for a, b in zip(gas, cost))\n        if total < 0:\n            return -1\n        start = 0\n        tank = 0\n        for i, (a, b) in enumerate(zip(gas, cost), 1):\n            tank += a - b\n            if tank < 0:\n                start = i\n                tank = 0\n        return start",
  "raw_model_solution": "class Solution:\n    def canCompleteCircuit(self, gas: List[int], cost: List[int]) -> int:\n        n = len(gas)\n        tank = 0\n        total_gas = 0\n        start = 0\n        for i in range(n):\n            total_gas += gas[i] - cost[i]\n            tank += gas[i] - cost[i]\n            if tank < 0:\n                tank = 0\n                start = i + 1\n        return start if total_gas >= 0 else -1",
  "finetuned_model_diff_bleu": 0.5349169464212514,
  "raw_model_diff_bleu": 0.634613953593374,
  "is_python": true,
  "diff_bleu_delta": -0.0996970071721226
}