{
  "problem_idx": "2656",
  "description": "\nYou are given a **0-indexed** integer array `nums` and an integer `k`. Your task is to perform the following operation **exactly** `k` times in order to maximize your score:\n\n\n1. Select an element `m` from `nums`.\n2. Remove the selected element `m` from the array.\n3. Add a new element with a value of `m + 1` to the array.\n4. Increase your score by `m`.\n\n\nReturn *the maximum score you can achieve after performing the operation exactly* `k` *times.*\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums = [1,2,3,4,5], k = 3\n**Output:** 18\n**Explanation:** We need to choose exactly 3 elements from nums to maximize the sum.\nFor the first iteration, we choose 5. Then sum is 5 and nums = [1,2,3,4,6]\nFor the second iteration, we choose 6. Then sum is 5 + 6 and nums = [1,2,3,4,7]\nFor the third iteration, we choose 7. Then sum is 5 + 6 + 7 = 18 and nums = [1,2,3,4,8]\nSo, we will return 18.\nIt can be proven, that 18 is the maximum answer that we can achieve.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums = [5,5,5], k = 2\n**Output:** 11\n**Explanation:** We need to choose exactly 2 elements from nums to maximize the sum.\nFor the first iteration, we choose 5. Then sum is 5 and nums = [5,5,6]\nFor the second iteration, we choose 6. Then sum is 5 + 6 = 11 and nums = [5,5,7]\nSo, we will return 11.\nIt can be proven, that 11 is the maximum answer that we can achieve.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= nums.length <= 100`\n* `1 <= nums[i] <= 100`\n* `1 <= k <= 100`\n\n\n\u00a0\n\n\n.spoilerbutton {display:block; border:dashed; padding: 0px 0px; margin:10px 0px; font-size:150%; font-weight: bold; color:#000000; background-color:cyan; outline:0; \n}\n.spoiler {overflow:hidden;}\n.spoiler > div {-webkit-transition: all 0s ease;-moz-transition: margin 0s ease;-o-transition: all 0s ease;transition: margin 0s ease;}\n.spoilerbutton[value=\"Show Message\"] + .spoiler > div {margin-top:-500%;}\n.spoilerbutton[value=\"Hide Message\"] + .spoiler {padding:5px;}\n\n",
  "inefficient_solution": "class Solution:\n    def maximizeSum(self, nums: List[int], k: int) -> int:\n        count = {}\n        for i in nums:\n            if i in count:\n                count[i] += 1\n            else:\n                count[i] = 1\n        freq = sorted(count.keys())\n        max_val = max(freq)\n        res = 0\n        for i in range(k):\n            res += max_val\n            max_val += 1\n            for key, val in count.items():\n                if key == max_val:\n                    if val == 1:\n                        del count[key]\n                    else:\n                        count[key] -= 1\n                        count[key + 1] = count.get(key + 1, 0) + 1\n                    break\n        return res",
  "canonical_solution": "class Solution:\n    def maximizeSum(self, nums: List[int], k: int) -> int:\n        x = max(nums)\n        return k * x + k * (k - 1) // 2\n",
  "finetuned_model_solution": "class Solution:\n    def maximizeSum(self, nums: List[int], k: int) -> int:\n        cnt = Counter(nums)\n        q = deque()\n        ans = i = 0\n        for x in sorted(cnt.keys()):\n            q.append(x)\n            cnt[x] -= 1\n            if cnt[x] == 0:\n                cnt.pop(x)\n            while x - q[0] > 1 and cnt[q[0] + 1]:\n                cnt[q[0] + 1] -= 1\n                i -= 1\n                q.popleft()\n            if len(q) > k:\n                cnt[q[-1]] += 1\n                q.pop()\n                i += 1\n                ans += x * (k - i + 1)\n        return ans",
  "raw_model_solution": "class Solution:\n    def maximizeSum(self, nums: List[int], k: int) -> int:\n        \"\"\"\n        This function maximizes the sum of an array by selecting elements and \n        incrementing their value by 1, then adding the new value to the array.\n        \n        Parameters:\n        nums (List[int]): A list of integers.\n        k (int): The number of times the operation can be performed.\n        \n        Returns:\n        int: The maximum sum that can be achieved after performing the operation exactly k times.\n        \"\"\"\n        \n        # Count the frequency of each number in the array\n        freq = {}\n        for i in nums:\n            freq[i] = freq.get(i, 0) + 1\n        \n        # Initialize the maximum sum and the maximum value\n        max_sum = 0\n        max_val = max(freq.keys())\n        \n        # Perform the operation k times\n        for _ in range(k):\n            # Add the maximum value to the sum\n            max_sum += max_val\n            \n            # Increment the maximum value and update the frequency of the new value\n            max_val += 1\n            freq[max_val] = freq.get(max_val, 0) + 1\n            \n            # Remove the maximum value from the frequency dictionary if its count is 1\n            if freq[max_val - 1] == 1:\n                del freq[max_val - 1]\n            else:\n                freq[max_val - 1] -= 1\n        \n        return max_sum",
  "finetuned_model_diff_bleu": 0.5257324461038857,
  "raw_model_diff_bleu": 0.5084993937015647,
  "is_python": true,
  "diff_bleu_delta": 0.01723305240232098
}