{
  "problem_idx": "846",
  "description": "\nAlice has some number of cards and she wants to rearrange the cards into groups so that each group is of size `groupSize`, and consists of `groupSize` consecutive cards.\n\n\nGiven an integer array `hand` where `hand[i]` is the value written on the `ith` card and an integer `groupSize`, return `true` if she can rearrange the cards, or `false` otherwise.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** hand = [1,2,3,6,2,3,4,7,8], groupSize = 3\n**Output:** true\n**Explanation:** Alice's hand can be rearranged as [1,2,3],[2,3,4],[6,7,8]\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** hand = [1,2,3,4,5], groupSize = 4\n**Output:** false\n**Explanation:** Alice's hand can not be rearranged into groups of 4.\n\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= hand.length <= 104`\n* `0 <= hand[i] <= 109`\n* `1 <= groupSize <= hand.length`\n\n\n\u00a0\n\n\n**Note:** This question is the same as 1296: <https://leetcode.com/problems/divide-array-in-sets-of-k-consecutive-numbers/>\n\n\n",
  "inefficient_solution": "class Solution:\n    def isNStraightHand(self, hand: List[int], groupSize: int) -> bool:\n        if len(hand) % groupSize != 0:\n            return False\n        hand_dict = {}\n        for val in hand:\n            if val in hand_dict:\n                hand_dict[val].append(1)\n            else:\n                hand_dict[val] = [1]\n        all_possible_values = []\n        for val in hand:\n            if val in all_possible_values:\n                continue\n            elif val + groupSize not in all_possible_values:\n                return False\n            else:\n                all_possible_values.append(val)\n                all_possible_values.append(val + 1)\n                all_possible_values.append(val + 2)\n        return len(hand_dict) == len(all_possible_values) // groupSize\n        extra_memory = 1\n        for key in hand_dict:\n            extra_memory *= (len(hand_dict[key]) + 1)\n        return extra_memory",
  "canonical_solution": "class Solution:\n    def isNStraightHand(self, hand: List[int], groupSize: int) -> bool:\n        cnt = Counter(hand)\n        for v in sorted(hand):\n            if cnt[v]:\n                for x in range(v, v + groupSize):\n                    if cnt[x] == 0:\n                        return False\n                    cnt[x] -= 1\n                    if cnt[x] == 0:\n                        cnt.pop(x)\n        return True\n",
  "finetuned_model_solution": "class Solution:\n    def isNStraightHand(self, hand: List[int], groupSize: int) -> bool:\n        if len(hand) % groupSize!= 0:\n            return False\n        cnt = Counter(hand)\n        for k in sorted(cnt):\n            if cnt[k]:\n                q = deque([k])\n                cnt[k] = 0\n                while q:\n                    i = q.popleft()\n                    if cnt[i]:\n                        cnt[i] = 0\n                        for j in range(i, i + groupSize):\n                            if cnt[j] and cnt[j] < 1:\n                                return False\n                            if cnt[j]:\n                                cnt[j] -= 1\n                                q.append(j)\n                            else:\n                                cnt[j] = 1\n        return True",
  "raw_model_solution": "class Solution:\n    def isNStraightHand(self, hand: List[int], groupSize: int) -> bool:\n        if len(hand) % groupSize != 0 or groupSize > len(hand):\n            return False\n        hand.sort()\n        for val in hand:\n            if val + groupSize - 1 in hand:\n                continue\n            if val not in hand:\n                return False\n            for i in range(groupSize):\n                if val + i not in hand:\n                    return False\n        return True",
  "finetuned_model_diff_bleu": 0.6135523621719814,
  "raw_model_diff_bleu": 0.6677416573164566,
  "is_python": true,
  "diff_bleu_delta": -0.054189295144475236
}