{
  "problem_idx": "357",
  "description": "\nGiven an integer `n`, return the count of all numbers with unique digits, `x`, where `0 <= x < 10n`.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** n = 2\n**Output:** 91\n**Explanation:** The answer should be the total numbers in the range of 0 \u2264 x < 100, excluding 11,22,33,44,55,66,77,88,99\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** n = 0\n**Output:** 1\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `0 <= n <= 8`\n\n\n",
  "inefficient_solution": "class Solution:\n    def countNumbersWithUniqueDigits(self, n: int) -> int:\n        if n == 0:\n            return 1\n        if n == 1:\n            return 10\n        ans = []\n        for i in range(n + 1):\n            cur_list = []\n            for j in range(10**i):\n                num_str = str(j)\n                if len(num_str) == i:\n                    valid = True\n                    for char in num_str:\n                        if char in num_str[:i-1]:\n                            valid = False\n                            break\n                    if valid:\n                        cur_list.append(num_str)\n            ans.append(len(cur_list))\n        return sum(ans)",
  "canonical_solution": "class Solution:\n    def countNumbersWithUniqueDigits(self, n: int) -> int:\n        if n == 0:\n            return 1\n        if n == 1:\n            return 10\n        ans, cur = 10, 9\n        for i in range(n - 1):\n            cur *= 9 - i\n            ans += cur\n        return ans\n",
  "finetuned_model_solution": "class Solution:\n    def countNumbersWithUniqueDigits(self, n: int) -> int:\n        if n == 0:\n            return 1\n        s = 10\n        l = 9\n        for i in range(2, n + 1):\n            l *= (10 - i + 1)\n            s += l\n        return s",
  "raw_model_solution": "class Solution:\n    def countNumbersWithUniqueDigits(self, n: int) -> int:\n        if n == 0:\n            return 1\n        ans = 10\n        available_digits = 9\n        for i in range(1, n):\n            ans += available_digits * (10**i - i)\n            available_digits -= 1\n        if available_digits > 0:\n            ans += available_digits * (10**n - n)\n        return ans",
  "finetuned_model_diff_bleu": 0.7246319917477867,
  "raw_model_diff_bleu": 0.6585431482418991,
  "is_python": true,
  "diff_bleu_delta": 0.06608884350588762
}