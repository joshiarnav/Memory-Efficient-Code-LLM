{
  "problem_idx": "1577",
  "description": "\nGiven two arrays of integers `nums1` and `nums2`, return the number of triplets formed (type 1 and type 2) under the following rules:\n\n\n* Type 1: Triplet (i, j, k) if `nums1[i]2 == nums2[j] * nums2[k]` where `0 <= i < nums1.length` and `0 <= j < k < nums2.length`.\n* Type 2: Triplet (i, j, k) if `nums2[i]2 == nums1[j] * nums1[k]` where `0 <= i < nums2.length` and `0 <= j < k < nums1.length`.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums1 = [7,4], nums2 = [5,2,8,9]\n**Output:** 1\n**Explanation:** Type 1: (1, 1, 2), nums1[1]2 = nums2[1] * nums2[2]. (42 = 2 * 8). \n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums1 = [1,1], nums2 = [1,1,1]\n**Output:** 9\n**Explanation:** All Triplets are valid, because 12 = 1 * 1.\nType 1: (0,0,1), (0,0,2), (0,1,2), (1,0,1), (1,0,2), (1,1,2).  nums1[i]2 = nums2[j] * nums2[k].\nType 2: (0,0,1), (1,0,1), (2,0,1). nums2[i]2 = nums1[j] * nums1[k].\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** nums1 = [7,7,8,3], nums2 = [1,2,9,7]\n**Output:** 2\n**Explanation:** There are 2 valid triplets.\nType 1: (3,0,2).  nums1[3]2 = nums2[0] * nums2[2].\nType 2: (3,0,1).  nums2[3]2 = nums1[0] * nums1[1].\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= nums1.length, nums2.length <= 1000`\n* `1 <= nums1[i], nums2[i] <= 105`\n\n\n",
  "inefficient_solution": "class Solution:\n    def numTriplets(self, nums1: List[int], nums2: List[int]) -> int:\n        cnt1 = {i: nums1.count(i) for i in nums1}\n        cnt2 = {i: nums2.count(i) for i in nums2}\n        \n        ans = 0\n        for a in cnt1:\n            for b in cnt2:\n                for c in cnt2:\n                    if a * a % b == 0 and b * b % a == 0:\n                        c1 = a * a // b\n                        c2 = b * b // a\n                        if c1 == c and c2 == c:\n                            for x in range(cnt1[a]):\n                                for y in range(cnt2[b]):\n                                    for z in range(cnt2[c]):\n                                        ans += 1\n                        elif c1 == c:\n                            for x in range(cnt1[a]):\n                                for y in range(cnt2[b]):\n                                    for z in range(cnt2[c]):\n                                        ans += y\n                        elif c2 == c:\n                            for x in range(cnt1[a]):\n                                for y in range(cnt2[b]):\n                                    for z in range(cnt2[c]):\n                                        ans += x\n                        else:\n                            for x in range(cnt1[a]):\n                                for y in range(cnt2[b]):\n                                    for z in range(cnt2[c]):\n                                        ans += 0\n        return ans",
  "canonical_solution": "class Solution:\n    def numTriplets(self, nums1: List[int], nums2: List[int]) -> int:\n        cnt1 = Counter(nums1)\n        cnt2 = Counter(nums2)\n        ans = 0\n        for a, x in cnt1.items():\n            for b, y in cnt2.items():\n                if a * a % b == 0:\n                    c = a * a // b\n                    if b == c:\n                        ans += x * y * (y - 1)\n                    else:\n                        ans += x * y * cnt2[c]\n                if b * b % a == 0:\n                    c = b * b // a\n                    if a == c:\n                        ans += x * (x - 1) * y\n                    else:\n                        ans += x * y * cnt1[c]\n        return ans >> 1\n",
  "finetuned_model_solution": "class Solution:\n    def numTriplets(self, nums1: List[int], nums2: List[int]) -> int:\n        cnt1 = Counter(nums1)\n        cnt2 = Counter(nums2)\n        ans = 0\n        for a in cnt1:\n            for b in cnt2:\n                for c in cnt2:\n                    if a * a % b == 0 and b * b % a == 0:\n                        x = a * a // b\n                        y = b * b // a\n                        if x == c:\n                            ans += cnt1[a] * cnt2[b] * cnt2[c]\n                        elif y == c:\n                            ans += cnt1[a] * cnt2[b] * cnt2[c]\n        return ans",
  "raw_model_solution": "class Solution:\n    def numTriplets(self, nums1: List[int], nums2: List[int]) -> int:\n        n1 = len(nums1)\n        n2 = len(nums2)\n        \n        # Calculate the number of triplets for each possible value of c\n        # The number of triplets for c is (cnt1[a] * cnt2[b] * cnt2[c]) for type 1 and\n        # (cnt2[a] * cnt1[b] * cnt1[c]) for type 2\n        cnt1 = {i: nums1.count(i) for i in nums1}\n        cnt2 = {i: nums2.count(i) for i in nums2}\n        \n        triplets1 = [0] * 10**5\n        for a in cnt1:\n            for b in cnt2:\n                for c in cnt2:\n                    if a * a % b == 0 and b * b % a == 0:\n                        c1 = a * a // b\n                        c2 = b * b // a\n                        if c1 == c and c2 == c:\n                            triplets1[a * a] += cnt1[a] * cnt2[b] * cnt2[c]\n                        elif c1 == c:\n                            triplets1[a * a] += cnt1[a] * cnt2[b] * cnt2[c]\n                        elif c2 == c:\n                            triplets1[a * a] += cnt1[a] * cnt2[b] * cnt2[c]\n        \n        triplets2 = [0] * 10**5\n        for a in cnt2:\n            for b in cnt1:\n                for c in cnt1:\n                    if a * a % b == 0 and b * b % a == 0:\n                        c1 = a * a // b\n                        c2 = b * b // a\n                        if c1 == c and c2 == c:\n                            triplets2[a * a] += cnt2[a] * cnt1[b] * cnt1[c]\n                        elif c1 == c:\n                            triplets2[a * a] += cnt2[a] * cnt1[b] * cnt1[c]\n                        elif c2 == c:\n                            triplets2[a * a] += cnt2[a] * cnt1[b] * cnt1[c]\n        \n        # Calculate the total number of triplets\n        ans = 0\n        for c in range(10**5):\n            ans += triplets1[c] + triplets2[c]\n        \n        return ans",
  "finetuned_model_diff_bleu": 0.6156154881467454,
  "raw_model_diff_bleu": 0.5108137755077693,
  "is_python": true,
  "diff_bleu_delta": 0.10480171263897609
}