{
  "problem_idx": "857",
  "description": "\nThere are `n` workers. You are given two integer arrays `quality` and `wage` where `quality[i]` is the quality of the `ith` worker and `wage[i]` is the minimum wage expectation for the `ith` worker.\n\n\nWe want to hire exactly `k` workers to form a paid group. To hire a group of `k` workers, we must pay them according to the following rules:\n\n\n1. Every worker in the paid group should be paid in the ratio of their quality compared to other workers in the paid group.\n2. Every worker in the paid group must be paid at least their minimum wage expectation.\n\n\nGiven the integer `k`, return *the least amount of money needed to form a paid group satisfying the above conditions*. Answers within `10-5` of the actual answer will be accepted.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** quality = [10,20,5], wage = [70,50,30], k = 2\n**Output:** 105.00000\n**Explanation:** We pay 70 to 0th worker and 35 to 2nd worker.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** quality = [3,1,10,10,1], wage = [4,8,2,2,7], k = 3\n**Output:** 30.66667\n**Explanation:** We pay 4 to 0th worker, 13.33333 to 2nd and 3rd workers separately.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `n == quality.length == wage.length`\n* `1 <= k <= n <= 104`\n* `1 <= quality[i], wage[i] <= 104`\n\n\n",
  "inefficient_solution": "from typing import List\n\nclass Solution:\n    def mincostToHireWorkers(\n        self, quality: List[int], wage: List[int], k: int\n    ) -> float:\n        import copy\n        import random\n        workers = []\n        for q, w in zip(quality, wage):\n            workers.append({\n                \"quality\": q,\n                \"wage\": w\n            })\n        random.shuffle(workers)\n        ans = float('inf')\n        for i in range(len(workers)):\n            for j in range(i + 1, len(workers)):\n                for k in range(j + 1, len(workers)):\n                    group = [workers[i], workers[j], workers[k]]\n                    group.sort(key=lambda x: x[\"wage\"] / x[\"quality\"])\n                    cost = 0\n                    for worker in group:\n                        if cost < worker[\"wage\"]:\n                            cost += worker[\"wage\"]\n                        else:\n                            cost += worker[\"wage\"] * worker[\"quality\"] / group[0][\"quality\"]\n                    if cost < ans and len(group) == k:\n                        ans = cost\n        return ans",
  "canonical_solution": "class Solution:\n    def mincostToHireWorkers(\n        self, quality: List[int], wage: List[int], k: int\n    ) -> float:\n        t = sorted(zip(quality, wage), key=lambda x: x[1] / x[0])\n        ans, tot = inf, 0\n        h = []\n        for q, w in t:\n            tot += q\n            heappush(h, -q)\n            if len(h) == k:\n                ans = min(ans, w / q * tot)\n                tot += heappop(h)\n        return ans\n",
  "finetuned_model_solution": "class Solution:\n    def mincostToHireWorkers(\n        self, quality: List[int], wage: List[int], k: int\n    ) -> float:\n        t = sorted((w / q for w, q in zip(wage, quality)))\n        qArr = sorted(quality, reverse=True)\n        ans = float('inf')\n        h = []\n        for i, v in enumerate(t, 1):\n            heappush(h, (v, qArr[i - 1]))\n            if i > k:\n                heappop(h)\n            if len(h) == k:\n                ans = min(ans, sum([x[0] * x[1] for x in h]))\n        return ans",
  "raw_model_solution": "import heapq\n\nclass Solution:\n    def mincostToHireWorkers(self, quality: List[int], wage: List[int], k: int) -> float:\n        workers = sorted(zip(wage, quality), key=lambda x: x[0] / x[1])\n        ans = float('inf')\n        max_quality = 0\n        for i in range(len(workers)):\n            if i < k:\n                max_quality = workers[i][1]\n            else:\n                cost = max_quality * workers[i][0] / workers[i][1]\n                if cost < ans:\n                    ans = cost\n        return ans",
  "finetuned_model_diff_bleu": 0.7527035053548287,
  "raw_model_diff_bleu": 0.5802453831857302,
  "is_python": true,
  "diff_bleu_delta": 0.1724581221690985
}