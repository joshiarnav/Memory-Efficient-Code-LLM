{
  "problem_idx": "947",
  "description": "\nOn a 2D plane, we place `n` stones at some integer coordinate points. Each coordinate point may have at most one stone.\n\n\nA stone can be removed if it shares either **the same row or the same column** as another stone that has not been removed.\n\n\nGiven an array `stones` of length `n` where `stones[i] = [xi, yi]` represents the location of the `ith` stone, return *the largest possible number of stones that can be removed*.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** stones = [[0,0],[0,1],[1,0],[1,2],[2,1],[2,2]]\n**Output:** 5\n**Explanation:** One way to remove 5 stones is as follows:\n1. Remove stone [2,2] because it shares the same row as [2,1].\n2. Remove stone [2,1] because it shares the same column as [0,1].\n3. Remove stone [1,2] because it shares the same row as [1,0].\n4. Remove stone [1,0] because it shares the same column as [0,0].\n5. Remove stone [0,1] because it shares the same row as [0,0].\nStone [0,0] cannot be removed since it does not share a row/column with another stone still on the plane.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** stones = [[0,0],[0,2],[1,1],[2,0],[2,2]]\n**Output:** 3\n**Explanation:** One way to make 3 moves is as follows:\n1. Remove stone [2,2] because it shares the same row as [2,0].\n2. Remove stone [2,0] because it shares the same column as [0,0].\n3. Remove stone [0,2] because it shares the same row as [0,0].\nStones [0,0] and [1,1] cannot be removed since they do not share a row/column with another stone still on the plane.\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** stones = [[0,0]]\n**Output:** 0\n**Explanation:** [0,0] is the only stone on the plane, so you cannot remove it.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= stones.length <= 1000`\n* `0 <= xi, yi <= 104`\n* No two stones are at the same coordinate point.\n\n\n",
  "inefficient_solution": "class Solution:\n    def removeStones(self, stones: List[List[int]]) -> int:\n        n = len(stones)\n        res = 0\n        for i in range(n):\n            for j in range(i + 1, n):\n                if stones[i][0] == stones[j][0] or stones[i][1] == stones[j][1]:\n                    stones[j][0] = -1\n                    stones[j][1] = -1\n                    res += 1\n        return len([stone for stone in stones if stone[0] != -1 and stone[1] != -1])",
  "canonical_solution": "class Solution:\n    def removeStones(self, stones: List[List[int]]) -> int:\n        def find(x):\n            if p[x] != x:\n                p[x] = find(p[x])\n            return p[x]\n\n        n = 10010\n        p = list(range(n << 1))\n        for x, y in stones:\n            p[find(x)] = find(y + n)\n\n        s = {find(x) for x, _ in stones}\n        return len(stones) - len(s)\n",
  "finetuned_model_solution": "class Solution:\n    def removeStones(self, stones: List[List[int]]) -> int:\n        d = defaultdict(list)\n        for x, y in stones:\n            d[x].append(y)\n            d[10000 + y].append(x)\n        res = 0\n        for coord in d.values():\n            res += len(coord) - 1\n            for x in coord:\n                for y in coord:\n                    if x!= y:\n                        d[10000 + x].remove(y)\n                        d[y].remove(10000 + x)\n        return res",
  "raw_model_solution": "class Solution:\n    def removeStones(self, stones: List[List[int]]) -> int:\n        n = len(stones)\n        parent = {}\n        rank = {}\n\n        def find(x):\n            if x not in parent:\n                parent[x] = x\n                rank[x] = 0\n            if parent[x] != x:\n                parent[x] = find(parent[x])\n            return parent[x]\n\n        def union(x, y):\n            rootX = find(x)\n            rootY = find(y)\n            if rootX != rootY:\n                if rank[rootX] > rank[rootY]:\n                    parent[rootY] = rootX\n                else:\n                    parent[rootX] = rootY\n                    if rank[rootX] == rank[rootY]:\n                        rank[rootY] += 1\n\n        for i in range(n):\n            parent[stones[i][0]] = stones[i][0]\n            parent[stones[i][1]] = stones[i][1]\n\n        for i in range(n):\n            union(stones[i][0], stones[i][1])\n\n        return n - len(set(find(x) for x in parent.keys()))",
  "finetuned_model_diff_bleu": 0.5846027174572774,
  "raw_model_diff_bleu": 0.4359625091674759,
  "is_python": true,
  "diff_bleu_delta": 0.1486402082898015
}