{
    "problem_idx": "1663",
    "description": "\nThe **numeric value** of a **lowercase character** is defined as its position `(1-indexed)` in the alphabet, so the numeric value of `a` is `1`, the numeric value of `b` is `2`, the numeric value of `c` is `3`, and so on.\n\n\nThe **numeric value** of a **string** consisting of lowercase characters is defined as the sum of its characters' numeric values. For example, the numeric value of the string `\"abe\"` is equal to `1 + 2 + 5 = 8`.\n\n\nYou are given two integers `n` and `k`. Return *the **lexicographically smallest string** with **length** equal to `n` and **numeric value** equal to `k`.*\n\n\nNote that a string `x` is lexicographically smaller than string `y` if `x` comes before `y` in dictionary order, that is, either `x` is a prefix of `y`, or if `i` is the first position such that `x[i] != y[i]`, then `x[i]` comes before `y[i]` in alphabetic order.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** n = 3, k = 27\n**Output:** \"aay\"\n**Explanation:** The numeric value of the string is 1 + 1 + 25 = 27, and it is the smallest string with such a value and length equal to 3.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** n = 5, k = 73\n**Output:** \"aaszz\"\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= n <= 105`\n* `n <= k <= 26 * n`\n\n\n",
    "inefficient_solution": "class Solution:\n    def getSmallestString(self, n: int, k: int) -> str:\n        ans = []\n        for _ in range(n):\n            ans.append('a')\n        i, d = n - 1, k - n\n        while d > 25:\n            ans[i] = 'z'\n            ans.append('z')  # Excessive memory allocation\n            d -= 25\n            i -= 1\n        ans[i] = chr(ord(ans[i]) + d)\n        ans[0] = chr(97 + (ans[0] == 'a' and 1 or 0))  # Excessive memory allocation\n        return ''.join(ans)",
    "efficient_solution": "class Solution:\n    def getSmallestString(self, n: int, k: int) -> str:\n        ans = ['a'] * n\n        i, d = n - 1, k - n\n        while d > 25:\n            ans[i] = 'z'\n            d -= 25\n            i -= 1\n        ans[i] = chr(ord(ans[i]) + d)\n        return ''.join(ans)\n",
    "model_generation": "### Efficient Solution\n\nHere's a more efficient solution that minimizes memory allocation and avoids unnecessary computations.\n\n```python\nclass Solution:\n    def getSmallestString(self, n: int, k: int) -> str:\n        ans = ['a'] * n\n        d = k - n\n        i = n - 1\n        while d > 25:\n            ans[i] = 'z'\n            d -= 25\n            i -= 1\n        ans[i] = chr(ord('a') + min(d, 25))\n        return ''.join(ans)\n```\n\n### Explanation\n\nThis solution works as follows:\n\n1.  We initialize an array `ans` with `n` elements, all set to `'a'`. This represents the lexicographically smallest string with length `n`.\n2.  We calculate the remaining value `d` after subtracting the value of the smallest string with length `n` from the target value `k`.\n3.  We iterate over the array `ans` in reverse order, starting from the end. For each position `i`, we check if the remaining value `d` is greater than 25. If it is, we set the character at position `i` to `'z'`, subtract 25 from `d`, and move to the previous position. This process continues until `d` is no longer greater than 25.\n4.  Once we've adjusted the characters in the array `ans` to accommodate the remaining value `d`, we simply add `d` to the ASCII value of `'a'` to get the correct character at the position `i`. This character may be either `'a'` (if `d` is 1) or a character with a value greater than 1 (if `d` is greater than 1).\n5.  Finally, we join the characters in the array `ans` together to form the lexicographically smallest string with length `n` and numeric value `k`, and return the result.\n\nThis solution has a time complexity of O(n) and a space complexity of O(n), making it more efficient than the original inefficient solution.",
    "model_solution": "class Solution:\n    def getSmallestString(self, n: int, k: int) -> str:\n        ans = ['a'] * n\n        d = k - n\n        i = n - 1\n        while d > 25:\n            ans[i] = 'z'\n            d -= 25\n            i -= 1\n        ans[i] = chr(ord('a') + min(d, 25))\n        return ''.join(ans)",
    "is_python": true
}