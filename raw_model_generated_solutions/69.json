{
    "problem_idx": "69",
    "description": "\nGiven a non-negative integer `x`, return *the square root of* `x` *rounded down to the nearest integer*. The returned integer should be **non-negative** as well.\n\n\nYou **must not use** any built-in exponent function or operator.\n\n\n* For example, do not use `pow(x, 0.5)` in c++ or `x ** 0.5` in python.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** x = 4\n**Output:** 2\n**Explanation:** The square root of 4 is 2, so we return 2.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** x = 8\n**Output:** 2\n**Explanation:** The square root of 8 is 2.82842..., and since we round it down to the nearest integer, 2 is returned.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `0 <= x <= 231 - 1`\n\n\n",
    "inefficient_solution": "class Solution:\n    def mySqrt(self, x: int) -> int:\n        if x == 0 or x == 1:\n            return x\n        sqrt_values = [0] * (x + 1)\n        for i in range(1, x + 1):\n            possible_sqrt = i\n            for j in range(1, i):\n                if j * j > i:\n                    break\n                if j * j == i:\n                    possible_sqrt = j\n                    break\n            sqrt_values[i] = possible_sqrt\n        return sqrt_values[x]",
    "efficient_solution": "class Solution:\n    def mySqrt(self, x: int) -> int:\n        left, right = 0, x\n        while left < right:\n            mid = (left + right + 1) >> 1\n            # mid*mid <= x\n            if mid <= x // mid:\n                left = mid\n            else:\n                right = mid - 1\n        return left\n",
    "model_generation": "### Efficient Solution:\n\nHere's an efficient solution using binary search, which significantly reduces the time complexity from O(n) to O(log n).\n\n```python\nclass Solution:\n    def mySqrt(self, x: int) -> int:\n        if x < 2:\n            return x\n        \n        left, right = 1, x // 2\n        while left <= right:\n            mid = (left + right) // 2\n            square = mid * mid\n            \n            if square == x:\n                return mid\n            elif square < x:\n                left = mid + 1\n            else:\n                right = mid - 1\n        \n        return right\n```\n\n### Explanation:\n\n- We handle the edge cases where `x` is less than or equal to 1, since the square root of these numbers is themselves.\n- We then initialize two pointers, `left` and `right`, to 1 and `x // 2`, respectively. This is because the square root of `x` cannot be greater than `x // 2`.\n- We then enter a while loop that continues as long as `left` is less than or equal to `right`.\n- Inside the loop, we calculate the midpoint `mid` and its square `square`.\n- If `square` is equal to `x`, we return `mid` as this is the square root of `x`.\n- If `square` is less than `x`, we update `left` to `mid + 1` to search in the right half of the range.\n- If `square` is greater than `x`, we update `right` to `mid - 1` to search in the left half of the range.\n- Once the loop ends, we return `right` as this will be the largest number less than or equal to the square root of `x`.\n\n### Time Complexity:\n\nThe time complexity of this solution is O(log n), where n is the input number `x`. This is because we are using binary search to find the square root of `x`.",
    "model_solution": "class Solution:\n    def mySqrt(self, x: int) -> int:\n        if x < 2:\n            return x\n        \n        left, right = 1, x // 2\n        while left <= right:\n            mid = (left + right) // 2\n            square = mid * mid\n            \n            if square == x:\n                return mid\n            elif square < x:\n                left = mid + 1\n            else:\n                right = mid - 1\n        \n        return right",
    "is_python": true
}