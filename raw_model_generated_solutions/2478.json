{
    "problem_idx": "2478",
    "description": "\nYou are given a string `s` that consists of the digits `'1'` to `'9'` and two integers `k` and `minLength`.\n\n\nA partition of `s` is called **beautiful** if:\n\n\n* `s` is partitioned into `k` non-intersecting substrings.\n* Each substring has a length of **at least** `minLength`.\n* Each substring starts with a **prime** digit and ends with a **non-prime** digit. Prime digits are `'2'`, `'3'`, `'5'`, and `'7'`, and the rest of the digits are non-prime.\n\n\nReturn *the number of **beautiful** partitions of* `s`. Since the answer may be very large, return it **modulo** `109 + 7`.\n\n\nA **substring** is a contiguous sequence of characters within a string.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** s = \"23542185131\", k = 3, minLength = 2\n**Output:** 3\n**Explanation:** There exists three ways to create a beautiful partition:\n\"2354 | 218 | 5131\"\n\"2354 | 21851 | 31\"\n\"2354218 | 51 | 31\"\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** s = \"23542185131\", k = 3, minLength = 3\n**Output:** 1\n**Explanation:** There exists one way to create a beautiful partition: \"2354 | 218 | 5131\".\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** s = \"3312958\", k = 3, minLength = 1\n**Output:** 1\n**Explanation:** There exists one way to create a beautiful partition: \"331 | 29 | 58\".\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= k, minLength <= s.length <= 1000`\n* `s` consists of the digits `'1'` to `'9'`.\n\n\n",
    "inefficient_solution": "class Solution:\n    def beautifulPartitions(self, s: str, k: int, minLength: int) -> int:\n        primes = '2357'\n        if s[0] not in primes or s[-1] in primes:\n            return 0\n        mod = 10**9 + 7\n        n = len(s)\n        f = dict()\n        for i in range(n+1):\n            for j in range(k+1):\n                f[(i, j)] = 0\n        f[(0, 0)] = 1\n        g = dict()\n        for i in range(n+1):\n            for j in range(k+1):\n                g[(i, j)] = 0\n        for i, c in enumerate(s, 1):\n            for j in range(1, k + 1):\n                temp = []\n                for x in range(i - minLength + 1, i + 1):\n                    for y in range(1, k + 1):\n                        if (x, y) in f:\n                            temp.append(f[(x, y)])\n                f[(i, j)] = sum(temp)\n            for j in range(k + 1):\n                g[(i, j)] = (g[(i-1, j)] + f[(i, j)]) % mod\n        return f[(n, k)]",
    "efficient_solution": "class Solution:\n    def beautifulPartitions(self, s: str, k: int, minLength: int) -> int:\n        primes = '2357'\n        if s[0] not in primes or s[-1] in primes:\n            return 0\n        mod = 10**9 + 7\n        n = len(s)\n        f = [[0] * (k + 1) for _ in range(n + 1)]\n        g = [[0] * (k + 1) for _ in range(n + 1)]\n        f[0][0] = g[0][0] = 1\n        for i, c in enumerate(s, 1):\n            if i >= minLength and c not in primes and (i == n or s[i] in primes):\n                for j in range(1, k + 1):\n                    f[i][j] = g[i - minLength][j - 1]\n            for j in range(k + 1):\n                g[i][j] = (g[i - 1][j] + f[i][j]) % mod\n        return f[n][k]\n",
    "model_generation": "Here's an efficient solution using dynamic programming.\n\n```python\nclass Solution:\n    def beautifulPartitions(self, s: str, k: int, minLength: int) -> int:\n        primes = '2357'\n        if s[0] not in primes or s[-1] in primes:\n            return 0\n        mod = 10**9 + 7\n        n = len(s)\n        \n        # Check for conditions where k is 1 or minLength is 1\n        if k == 1 or minLength == 1:\n            return int(s[0] in primes)\n        \n        f = [[0]*(k+1) for _ in range(n+1)]\n        for i in range(n+1):\n            for j in range(1, min(i, k) + 1):\n                if i >= minLength:\n                    # Check if the substring can be split at the current position\n                    # If it can, then add the possibilities for the previous substrings\n                    for x in range(i - minLength + 1, i):\n                        if s[x] in primes and s[x+1] not in primes:\n                            f[i][j] += f[x][j-1]\n                            f[i][j] %= mod\n        \n        return f[n][k]\n```\n\nThis solution works by maintaining a 2D array `f` where `f[i][j]` represents the number of ways to partition the string `s` into `j` non-intersecting substrings, where the last substring has a length of at least `i`.\n\nThe base case is when `j` is 1 or `minLength` is 1, in which case we only return 1 if the first character is a prime digit.\n\nThen, we iterate over the string and for each position `i`, we iterate over the possible number of substrings `j`. If `i` is at least `minLength`, we check if the substring can be split at the current position, and if it can, we add the possibilities for the previous substrings to `f[i][j]`.\n\nFinally, we return `f[n][k]`, which represents the number of ways to partition the string `s` into `k` non-intersecting substrings where each substring has a length of at least `minLength`.",
    "model_solution": "class Solution:\n    def beautifulPartitions(self, s: str, k: int, minLength: int) -> int:\n        primes = '2357'\n        if s[0] not in primes or s[-1] in primes:\n            return 0\n        mod = 10**9 + 7\n        n = len(s)\n        \n        # Check for conditions where k is 1 or minLength is 1\n        if k == 1 or minLength == 1:\n            return int(s[0] in primes)\n        \n        f = [[0]*(k+1) for _ in range(n+1)]\n        for i in range(n+1):\n            for j in range(1, min(i, k) + 1):\n                if i >= minLength:\n                    # Check if the substring can be split at the current position\n                    # If it can, then add the possibilities for the previous substrings\n                    for x in range(i - minLength + 1, i):\n                        if s[x] in primes and s[x+1] not in primes:\n                            f[i][j] += f[x][j-1]\n                            f[i][j] %= mod\n        \n        return f[n][k]",
    "is_python": true
}