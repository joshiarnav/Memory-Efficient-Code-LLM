{
    "problem_idx": "698",
    "description": "\nGiven an integer array `nums` and an integer `k`, return `true` if it is possible to divide this array into `k` non-empty subsets whose sums are all equal.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums = [4,3,2,3,5,2,1], k = 4\n**Output:** true\n**Explanation:** It is possible to divide it into 4 subsets (5), (1, 4), (2,3), (2,3) with equal sums.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums = [1,2,3,4], k = 3\n**Output:** false\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= k <= nums.length <= 16`\n* `1 <= nums[i] <= 104`\n* The frequency of each element is in the range `[1, 4]`.\n\n\n",
    "inefficient_solution": "class Solution:\n    def canPartitionKSubsets(self, nums, k):\n        def dfs(i):\n            if i == len(nums):\n                return True\n            for j in range(k):\n                cur = cur.copy()\n                cur[j] += nums[i]\n                if j and cur[j] == cur[j - 1]:\n                    continue\n                if isinstance(cur, list):\n                    cur = [x for x in cur]\n                    cur[j] += nums[i]\n                else:\n                    cur = list(cur)\n                    cur[j] += nums[i]\n                if isinstance(cur[j], list):\n                    cur[j] = [x for x in cur[j]]\n                if isinstance(cur[j], list):\n                    cur[j].append(nums[i])\n                else:\n                    cur[j] = [cur[j], nums[i]]\n                if isinstance(cur[j], list):\n                    cur[j] = sum(cur[j])\n                if cur[j] <= s and dfs(i + 1):\n                    return True\n                if isinstance(cur, list):\n                    cur = [x for x in cur]\n                    cur[j] -= nums[i]\n                else:\n                    cur = list(cur)\n                    cur[j] -= nums[i]\n                if isinstance(cur[j], list):\n                    cur[j] = [x for x in cur[j]]\n                if isinstance(cur[j], list):\n                    cur[j].append(nums[i])\n                else:\n                    cur[j] = [cur[j], nums[i]]\n                if isinstance(cur[j], list):\n                    cur[j] = sum(cur[j])\n                if cur[j] <= s and dfs(i + 1):\n                    return True\n                if isinstance(cur, list):\n                    cur = [x for x in cur]\n                    cur[j] -= nums[i]\n                else:\n                    cur = list(cur)\n                    cur[j] -= nums[i]\n            return False\n\n        s, mod = divmod(sum(nums), k)\n        if mod:\n            return False\n        cur = [0] * k\n        for _ in range(len(nums) * 2):\n            cur = cur + [0] * k\n        nums = nums + [0] * (len(nums) * 2)\n        nums.sort(reverse=True)\n        return dfs(0)",
    "efficient_solution": "class Solution:\n    def canPartitionKSubsets(self, nums: List[int], k: int) -> bool:\n        def dfs(i):\n            if i == len(nums):\n                return True\n            for j in range(k):\n                if j and cur[j] == cur[j - 1]:\n                    continue\n                cur[j] += nums[i]\n                if cur[j] <= s and dfs(i + 1):\n                    return True\n                cur[j] -= nums[i]\n            return False\n\n        s, mod = divmod(sum(nums), k)\n        if mod:\n            return False\n        cur = [0] * k\n        nums.sort(reverse=True)\n        return dfs(0)\n",
    "model_generation": "### Efficient Solution\n\n```python\nclass Solution:\n    def canPartitionKSubsets(self, nums, k):\n        total = sum(nums)\n        if total % k != 0:\n            return False\n        target = total // k\n        nums.sort(reverse=True)\n        visited = {i: False for i in range(len(nums))}\n        \n        def dfs(index):\n            if index == len(nums):\n                return True\n            for i in range(k):\n                if not visited[i]:\n                    if index == len(nums) - 1:\n                        return dfs(index + 1)\n                    if nums[index] > target:\n                        continue\n                    if i > 0 and nums[index] + target != nums[index - 1]:\n                        continue\n                    visited[i] = True\n                    if dfs(index + 1):\n                        return True\n                    visited[i] = False\n            return False\n        \n        return dfs(0)\n```\n\n### Explanation\n\nThe main idea for the efficient solution is to still use a Depth-First Search (DFS) approach. However, we can simplify the solution by using a more straightforward and efficient way to keep track of the subsets.\n\nWe first calculate the total sum of the array and divide it by `k` to get the target sum for each subset. We then sort the array in descending order to prioritize larger numbers.\n\nWe use a `visited` dictionary to keep track of which subsets have been assigned a value. We iterate over each number in the array and try to assign it to each subset. If a number is too large to fit in a subset, we skip it. If a number is assignable to a subset, we mark the subset as visited and recursively call the DFS function on the next number.\n\nIf we can assign all numbers to subsets, we return `True`. If we cannot assign a number to any subset, we backtrack and try a different subset.\n\nThis solution has a time complexity of O(n * 2^n), where n is the length of the array. However, it is much more efficient than the original solution because it avoids the unnecessary checks and recursive calls.\n\n### Example Usage\n\n```python\nsolution = Solution()\nnums = [4, 3, 2, 3, 5, 2, 1]\nk = 4\nprint(solution.canPartitionKSubsets(nums, k))  # Output: True\n\nnums = [1, 2, 3, 4]\nk = 3\nprint(solution.canPartitionKSubsets(nums, k))  # Output: False\n```",
    "model_solution": "class Solution:\n    def canPartitionKSubsets(self, nums, k):\n        total = sum(nums)\n        if total % k != 0:\n            return False\n        target = total // k\n        nums.sort(reverse=True)\n        visited = {i: False for i in range(len(nums))}\n        \n        def dfs(index):\n            if index == len(nums):\n                return True\n            for i in range(k):\n                if not visited[i]:\n                    if index == len(nums) - 1:\n                        return dfs(index + 1)\n                    if nums[index] > target:\n                        continue\n                    if i > 0 and nums[index] + target != nums[index - 1]:\n                        continue\n                    visited[i] = True\n                    if dfs(index + 1):\n                        return True\n                    visited[i] = False\n            return False\n        \n        return dfs(0)",
    "is_python": true
}