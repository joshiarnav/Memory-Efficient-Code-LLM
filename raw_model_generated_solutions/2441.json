{
    "problem_idx": "2441",
    "description": "\nGiven an integer array `nums` that **does not contain** any zeros, find **the largest positive** integer `k` such that `-k` also exists in the array.\n\n\nReturn *the positive integer* `k`. If there is no such integer, return `-1`.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums = [-1,2,-3,3]\n**Output:** 3\n**Explanation:** 3 is the only valid k we can find in the array.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums = [-1,10,6,7,-7,1]\n**Output:** 7\n**Explanation:** Both 1 and 7 have their corresponding negative values in the array. 7 has a larger value.\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** nums = [-10,8,6,7,-2,-3]\n**Output:** -1\n**Explanation:** There is no a single valid k, we return -1.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= nums.length <= 1000`\n* `-1000 <= nums[i] <= 1000`\n* `nums[i] != 0`\n\n\n",
    "inefficient_solution": "def findMaxK(nums):\n    num_dict = {}\n    for i in range(len(nums)):\n        num_dict[nums[i]] = i\n\n    max_k = -1\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] == -nums[j]:\n                max_k = max(max_k, abs(nums[i]))\n    return max_k",
    "efficient_solution": "class Solution:\n    def findMaxK(self, nums: List[int]) -> int:\n        s = set(nums)\n        return max((x for x in s if -x in s), default=-1)\n",
    "model_generation": "### Efficient Solution:\n\n```python\ndef findMaxK(nums):\n    \"\"\"\n    Find the largest positive integer k such that -k also exists in the array.\n\n    Args:\n        nums (list): A list of integers that does not contain any zeros.\n\n    Returns:\n        int: The largest positive integer k. If there is no such integer, return -1.\n    \"\"\"\n    num_set = set()\n    max_k = -1\n\n    # Populate the set with the absolute values of the numbers in the array\n    for num in nums:\n        num_set.add(abs(num))\n\n    # Iterate through the set to find the largest positive integer k\n    for num in num_set:\n        if -num in num_set:\n            max_k = max(max_k, num)\n\n    return max_k\n```\n\n### Explanation:\n\n1.  We first create an empty set `num_set` to store the absolute values of the numbers in the array.\n2.  We then iterate through the array, and for each number, we add its absolute value to the set.\n3.  After populating the set, we iterate through it again to find the largest positive integer k such that -k also exists in the set.\n4.  If we find such an integer, we update `max_k` with its value.\n5.  Finally, we return `max_k`, which is the largest positive integer k such that -k also exists in the array. If no such integer is found, `max_k` remains -1.\n\n### Time Complexity:\n\nThe time complexity of this solution is O(n), where n is the number of elements in the array. This is because we make two passes through the array: one to populate the set and another to find the largest positive integer k.\n\n### Space Complexity:\n\nThe space complexity of this solution is also O(n), as in the worst case, the set will contain all the numbers in the array.",
    "model_solution": "def findMaxK(nums):\n    \"\"\"\n    Find the largest positive integer k such that -k also exists in the array.\n\n    Args:\n        nums (list): A list of integers that does not contain any zeros.\n\n    Returns:\n        int: The largest positive integer k. If there is no such integer, return -1.\n    \"\"\"\n    num_set = set()\n    max_k = -1\n\n    # Populate the set with the absolute values of the numbers in the array\n    for num in nums:\n        num_set.add(abs(num))\n\n    # Iterate through the set to find the largest positive integer k\n    for num in num_set:\n        if -num in num_set:\n            max_k = max(max_k, num)\n\n    return max_k",
    "is_python": true
}