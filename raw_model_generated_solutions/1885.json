{
    "problem_idx": "1885",
    "description": "\nGiven two integer arrays `nums1` and `nums2` of length `n`, count the pairs of indices `(i, j)` such that `i < j` and `nums1[i] + nums1[j] > nums2[i] + nums2[j]`.\n\n\nReturn *the **number of pairs** satisfying the condition.*\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums1 = [2,1,2,1], nums2 = [1,2,1,2]\n**Output:** 1\n**Explanation**: The pairs satisfying the condition are:\n- (0, 2) where 2 + 2 > 1 + 1.\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums1 = [1,10,6,2], nums2 = [1,4,1,5]\n**Output:** 5\n**Explanation**: The pairs satisfying the condition are:\n- (0, 1) where 1 + 10 > 1 + 4.\n- (0, 2) where 1 + 6 > 1 + 1.\n- (1, 2) where 10 + 6 > 4 + 1.\n- (1, 3) where 10 + 2 > 4 + 5.\n- (2, 3) where 6 + 2 > 1 + 5.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `n == nums1.length == nums2.length`\n* `1 <= n <= 105`\n* `1 <= nums1[i], nums2[i] <= 105`\n\n\n",
    "inefficient_solution": "class Solution:\n    def countPairs(self, nums1, nums2):\n        n = len(nums1)\n        temp = [nums1[i] - nums2[i] for i in range(n)]\n        temp.sort()\n        temp2 = [(nums1[i] - nums2[i], i) for i in range(n)]\n        temp2.sort()\n        count = 0\n        for i, v in enumerate(temp):\n            for j in range(i + 1, n):\n                if v + temp[j] > 0:\n                    count += 1\n        return count",
    "efficient_solution": "class Solution:\n    def countPairs(self, nums1: List[int], nums2: List[int]) -> int:\n        n = len(nums1)\n        d = [nums1[i] - nums2[i] for i in range(n)]\n        d.sort()\n        return sum(n - bisect_right(d, -v, lo=i + 1) for i, v in enumerate(d))\n",
    "model_generation": "### Efficient Solution\n\nTo solve this problem efficiently, we can use a bucketing approach. We'll divide the possible sums of `nums1[i] + nums2[i]` and `nums1[j] + nums2[j]` into buckets based on the difference between `nums1[i] - nums2[i]` and `nums1[j] - nums2[j]`. This will allow us to count the pairs satisfying the condition in a single pass.\n\n```python\nclass Solution:\n    def countPairs(self, nums1, nums2):\n        n = len(nums1)\n        diff = [nums1[i] - nums2[i] for i in range(n)]\n        diff.sort()\n        count = 0\n        left, right = 0, n - 1\n        while left < right:\n            if diff[left] + diff[right] > 0:\n                count += right - left\n                right -= 1\n            else:\n                left += 1\n        return count\n```\n\n### Explanation\n\n1. First, we calculate the difference between `nums1[i]` and `nums2[i]` for each `i` and store it in the `diff` list.\n2. We sort the `diff` list in ascending order.\n3. We initialize two pointers, `left` and `right`, to the start and end of the `diff` list, respectively.\n4. We iterate through the `diff` list from both ends. If the sum of the differences at the `left` and `right` indices is greater than 0, it means that all pairs between the `left` and `right` indices satisfy the condition, so we add the number of such pairs (which is `right - left`) to the count and move the `right` pointer to the left.\n5. If the sum of the differences at the `left` and `right` indices is not greater than 0, it means that no pairs between the `left` and `right` indices satisfy the condition, so we simply move the `left` pointer to the right.\n6. We repeat steps 4-5 until the `left` and `right` pointers meet, at which point we return the count.\n\nThis solution has a time complexity of O(n log n) due to the sorting step and a space complexity of O(n) for storing the differences.",
    "model_solution": "class Solution:\n    def countPairs(self, nums1, nums2):\n        n = len(nums1)\n        diff = [nums1[i] - nums2[i] for i in range(n)]\n        diff.sort()\n        count = 0\n        left, right = 0, n - 1\n        while left < right:\n            if diff[left] + diff[right] > 0:\n                count += right - left\n                right -= 1\n            else:\n                left += 1\n        return count",
    "is_python": true
}