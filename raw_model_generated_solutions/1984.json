{
    "problem_idx": "1984",
    "description": "\nYou are given a **0-indexed** integer array `nums`, where `nums[i]` represents the score of the `ith` student. You are also given an integer `k`.\n\n\nPick the scores of any `k` students from the array so that the **difference** between the **highest** and the **lowest** of the `k` scores is **minimized**.\n\n\nReturn *the **minimum** possible difference*.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums = [90], k = 1\n**Output:** 0\n**Explanation:** There is one way to pick score(s) of one student:\n- [**90**]. The difference between the highest and lowest score is 90 - 90 = 0.\nThe minimum possible difference is 0.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums = [9,4,1,7], k = 2\n**Output:** 2\n**Explanation:** There are six ways to pick score(s) of two students:\n- [**9**,**4**,1,7]. The difference between the highest and lowest score is 9 - 4 = 5.\n- [**9**,4,**1**,7]. The difference between the highest and lowest score is 9 - 1 = 8.\n- [**9**,4,1,**7**]. The difference between the highest and lowest score is 9 - 7 = 2.\n- [9,**4**,**1**,7]. The difference between the highest and lowest score is 4 - 1 = 3.\n- [9,**4**,1,**7**]. The difference between the highest and lowest score is 7 - 4 = 3.\n- [9,4,**1**,**7**]. The difference between the highest and lowest score is 7 - 1 = 6.\nThe minimum possible difference is 2.\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= k <= nums.length <= 1000`\n* `0 <= nums[i] <= 105`\n\n\n",
    "inefficient_solution": "class Solution:\n    def minimumDifference(self, nums: List[int], k: int) -> int:\n        total_scores = [num for num in nums for _ in range(k)]\n        all_combinations = []\n        for i in range(len(total_scores)):\n            for j in range(i, i + k):\n                combination = total_scores[i:j + 1]\n                all_combinations.append(combination)\n        all_combinations.sort(key=lambda x: max(x) - min(x))\n        min_diff = float('inf')\n        for combination in all_combinations:\n            diff = max(combination) - min(combination)\n            min_diff = min(min_diff, diff)\n        return min_diff",
    "efficient_solution": "class Solution:\n    def minimumDifference(self, nums: List[int], k: int) -> int:\n        nums.sort()\n        return min(nums[i + k - 1] - nums[i] for i in range(len(nums) - k + 1))\n",
    "model_generation": "### Efficient Solution:\n\nWe can use the concept of a sliding window to efficiently find the minimum difference between the highest and lowest scores of `k` students. The idea is to maintain a sorted list of the `k` highest scores and slide the window through the list to find the minimum difference.\n\n```python\nclass Solution:\n    def minimumDifference(self, nums: List[int], k: int) -> int:\n        # Sort the array in descending order\n        nums.sort(reverse=True)\n        \n        # Initialize the minimum difference\n        min_diff = float('inf')\n        \n        # Iterate through the array with a sliding window of size k\n        for i in range(len(nums) - k + 1):\n            # Update the minimum difference\n            min_diff = min(min_diff, nums[i + k - 1] - nums[i])\n        \n        return min_diff\n```\n\n### Explanation:\n\n1.  Sort the array in descending order, so the highest scores are at the beginning of the array.\n2.  Initialize the minimum difference to infinity.\n3.  Iterate through the array with a sliding window of size `k`. For each window, calculate the difference between the highest and lowest scores.\n4.  Update the minimum difference with the smaller of the current minimum difference and the difference calculated in step 3.\n5.  Return the minimum difference after iterating through the entire array.\n\n### Time Complexity:\n\nThe time complexity of this solution is O(n log n) due to the sorting operation, where n is the length of the array.\n\n### Space Complexity:\n\nThe space complexity of this solution is O(1) excluding the input array, as only a constant amount of space is used to store the minimum difference and the current window of scores.",
    "model_solution": "class Solution:\n    def minimumDifference(self, nums: List[int], k: int) -> int:\n        # Sort the array in descending order\n        nums.sort(reverse=True)\n        \n        # Initialize the minimum difference\n        min_diff = float('inf')\n        \n        # Iterate through the array with a sliding window of size k\n        for i in range(len(nums) - k + 1):\n            # Update the minimum difference\n            min_diff = min(min_diff, nums[i + k - 1] - nums[i])\n        \n        return min_diff",
    "is_python": true
}