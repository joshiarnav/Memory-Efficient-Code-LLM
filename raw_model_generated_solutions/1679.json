{
    "problem_idx": "1679",
    "description": "\nYou are given an integer array `nums` and an integer `k`.\n\n\nIn one operation, you can pick two numbers from the array whose sum equals `k` and remove them from the array.\n\n\nReturn *the maximum number of operations you can perform on the array*.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums = [1,2,3,4], k = 5\n**Output:** 2\n**Explanation:** Starting with nums = [1,2,3,4]:\n- Remove numbers 1 and 4, then nums = [2,3]\n- Remove numbers 2 and 3, then nums = []\nThere are no more pairs that sum up to 5, hence a total of 2 operations.\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums = [3,1,3,4,3], k = 6\n**Output:** 1\n**Explanation:** Starting with nums = [3,1,3,4,3]:\n- Remove the first two 3's, then nums = [1,4,3]\nThere are no more pairs that sum up to 6, hence a total of 1 operation.\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= nums.length <= 105`\n* `1 <= nums[i] <= 109`\n* `1 <= k <= 109`\n\n\n",
    "inefficient_solution": "class Solution:\n    def maxOperations(self, nums: List[int], k: int) -> int:\n        count = {}\n        for num in nums:\n            if num not in count:\n                count[num] = 0\n            count[num] += 1\n\n        ans = 0\n        for num in nums:\n            if k - num in count and k - num != num:\n                ans += 1\n                count[num] -= 1\n                if count[num] == 0:\n                    del count[num]\n            elif k - num == num:\n                if num in count and count[num] > 1:\n                    ans += 1\n                    count[num] -= 2\n                    if count[num] == 0:\n                        del count[num]\n                else:\n                    ans += 1\n                    del count[num]\n        return ans",
    "efficient_solution": "class Solution:\n    def maxOperations(self, nums: List[int], k: int) -> int:\n        nums.sort()\n        l, r, ans = 0, len(nums) - 1, 0\n        while l < r:\n            s = nums[l] + nums[r]\n            if s == k:\n                ans += 1\n                l, r = l + 1, r - 1\n            elif s > k:\n                r -= 1\n            else:\n                l += 1\n        return ans\n",
    "model_generation": "Here is an efficient solution for the problem:\n\n```python\nclass Solution:\n    def maxOperations(self, nums: List[int], k: int) -> int:\n        count = {}\n        for num in nums:\n            if num not in count:\n                count[num] = 0\n            count[num] += 1\n\n        ans = 0\n        for num in nums:\n            if k - num in count and k - num != num:\n                ans += 1\n                count[num] -= 1\n                count[k - num] -= 1\n            elif k - num == num:\n                if num in count and count[num] > 1:\n                    ans += 1\n                    count[num] -= 2\n                else:\n                    break\n        return ans\n```\n\nHowever, we can optimize this solution even further by using a single pass through the array and a hash map for efficient lookups. We can also avoid the need to check if a number is in the hash map before decrementing its count.\n\nHere is the optimized solution:\n\n```python\nclass Solution:\n    def maxOperations(self, nums: List[int], k: int) -> int:\n        count = {}\n        for num in nums:\n            if num not in count:\n                count[num] = 0\n            count[num] += 1\n\n        ans = 0\n        for num in nums:\n            complement = k - num\n            if complement in count and (complement != num or count[num] > 1):\n                ans += 1\n                count[num] -= 1\n                count[complement] -= 1\n                if count[num] == 0:\n                    del count[num]\n                if count[complement] == 0:\n                    del count[complement]\n        return ans\n```\n\nThis solution has a time complexity of O(n) and a space complexity of O(n), where n is the length of the input array.",
    "model_solution": "class Solution:\n    def maxOperations(self, nums: List[int], k: int) -> int:\n        count = {}\n        for num in nums:\n            if num not in count:\n                count[num] = 0\n            count[num] += 1\n\n        ans = 0\n        for num in nums:\n            if k - num in count and k - num != num:\n                ans += 1\n                count[num] -= 1\n                count[k - num] -= 1\n            elif k - num == num:\n                if num in count and count[num] > 1:\n                    ans += 1\n                    count[num] -= 2\n                else:\n                    break\n        return ans",
    "is_python": true
}