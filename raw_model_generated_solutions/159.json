{
    "problem_idx": "159",
    "description": "\nGiven a string `s`, return *the length of the longest* *substring* *that contains at most **two distinct characters***.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** s = \"eceba\"\n**Output:** 3\n**Explanation:** The substring is \"ece\" which its length is 3.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** s = \"ccaabbb\"\n**Output:** 5\n**Explanation:** The substring is \"aabbb\" which its length is 5.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= s.length <= 105`\n* `s` consists of English letters.\n\n\n",
    "inefficient_solution": "class Solution:\n    def lengthOfLongestSubstringTwoDistinct(self, s: str) -> int:\n        long_substring = []\n        max_length = 0\n        for char in s:\n            if len(long_substring) == 0:\n                long_substring.append(char)\n                max_length += 1\n            else:\n                new_substring = []\n                for c in long_substring:\n                    if c != char:\n                        new_substring.append(c)\n                if len(long_substring) > len(new_substring):\n                    long_substring = new_substring + [char]\n                else:\n                    long_substring = long_substring[:len(new_substring)] + [char]\n                if len(long_substring) > max_length:\n                    max_length = len(long_substring)\n        return max_length",
    "efficient_solution": "class Solution:\n    def lengthOfLongestSubstringTwoDistinct(self, s: str) -> int:\n        cnt = Counter()\n        ans = j = 0\n        for i, c in enumerate(s):\n            cnt[c] += 1\n            while len(cnt) > 2:\n                cnt[s[j]] -= 1\n                if cnt[s[j]] == 0:\n                    cnt.pop(s[j])\n                j += 1\n            ans = max(ans, i - j + 1)\n        return ans\n",
    "model_generation": "### Efficient Solution\n\n```python\nclass Solution:\n    def lengthOfLongestSubstringTwoDistinct(self, s: str) -> int:\n        char_count = {}\n        left = 0\n        max_length = 0\n        \n        for right, char in enumerate(s):\n            char_count[char] = char_count.get(char, 0) + 1\n            \n            while len(char_count) > 2:\n                char_count[s[left]] -= 1\n                if char_count[s[left]] == 0:\n                    del char_count[s[left]]\n                left += 1\n            \n            max_length = max(max_length, right - left + 1)\n        \n        return max_length\n```\n\n### Explanation\n\nThe given problem can be solved using a sliding window approach. We maintain a dictionary `char_count` to keep track of the characters within the current window. The `left` and `right` pointers represent the start and end of the window, respectively.\n\nInitially, we iterate over the string using the `right` pointer. For each character, we increment its count in the `char_count` dictionary.\n\nIf the size of `char_count` exceeds 2, it means we have more than two distinct characters within the current window. To maintain the window size at most 2, we start removing characters from the left of the window until we have at most two distinct characters. We do this by decrementing the count of the character at the `left` index in `char_count` and removing it from the dictionary if its count becomes zero. We then increment the `left` pointer.\n\nAfter processing each character, we update the maximum length of the substring with at most two distinct characters.\n\nThis solution has a time complexity of O(n), where n is the length of the string, as we process each character once. The space complexity is also O(n), as in the worst case, we need to store all characters in the `char_count` dictionary.",
    "model_solution": "class Solution:\n    def lengthOfLongestSubstringTwoDistinct(self, s: str) -> int:\n        char_count = {}\n        left = 0\n        max_length = 0\n        \n        for right, char in enumerate(s):\n            char_count[char] = char_count.get(char, 0) + 1\n            \n            while len(char_count) > 2:\n                char_count[s[left]] -= 1\n                if char_count[s[left]] == 0:\n                    del char_count[s[left]]\n                left += 1\n            \n            max_length = max(max_length, right - left + 1)\n        \n        return max_length",
    "is_python": true
}