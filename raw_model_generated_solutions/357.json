{
    "problem_idx": "357",
    "description": "\nGiven an integer `n`, return the count of all numbers with unique digits, `x`, where `0 <= x < 10n`.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** n = 2\n**Output:** 91\n**Explanation:** The answer should be the total numbers in the range of 0 \u2264 x < 100, excluding 11,22,33,44,55,66,77,88,99\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** n = 0\n**Output:** 1\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `0 <= n <= 8`\n\n\n",
    "inefficient_solution": "class Solution:\n    def countNumbersWithUniqueDigits(self, n: int) -> int:\n        if n == 0:\n            return 1\n        if n == 1:\n            return 10\n        ans = []\n        for i in range(n + 1):\n            cur_list = []\n            for j in range(10**i):\n                num_str = str(j)\n                if len(num_str) == i:\n                    valid = True\n                    for char in num_str:\n                        if char in num_str[:i-1]:\n                            valid = False\n                            break\n                    if valid:\n                        cur_list.append(num_str)\n            ans.append(len(cur_list))\n        return sum(ans)",
    "efficient_solution": "class Solution:\n    def countNumbersWithUniqueDigits(self, n: int) -> int:\n        if n == 0:\n            return 1\n        if n == 1:\n            return 10\n        ans, cur = 10, 9\n        for i in range(n - 1):\n            cur *= 9 - i\n            ans += cur\n        return ans\n",
    "model_generation": "### Efficient Solution\n\nThe given problem can be solved efficiently by using dynamic programming. The key idea is to calculate the number of valid numbers with unique digits for each length from 1 to `n` and store these values in a list. Then, the sum of these values is the final answer.\n\nHere is the efficient solution:\n\n```python\nclass Solution:\n    def countNumbersWithUniqueDigits(self, n: int) -> int:\n        if n == 0:\n            return 1\n        ans = 10\n        available_digits = 9\n        for i in range(1, n):\n            ans += available_digits * (10**i - i)\n            available_digits -= 1\n        if available_digits > 0:\n            ans += available_digits * (10**n - n)\n        return ans\n```\n\n### Explanation\n\n1.  Initialize the answer `ans` to 10 (which is the number of integers with unique digits of length 1).\n2.  Initialize `available_digits` to 9, which is the number of available digits for the first position.\n3.  Iterate from 1 to `n-1`:\n    *   Add the number of valid numbers of length `i+1` to the answer `ans`. This is calculated as `available_digits * (10**i - i)`, where `10**i - i` is the number of valid numbers of length `i`, and `available_digits` is the number of available digits for the first position.\n    *   Decrement `available_digits` by 1 for the next iteration.\n4.  If there are still available digits after the loop (`available_digits > 0`), add the number of valid numbers of length `n` to the answer. This is calculated as `available_digits * (10**n - n)`.\n5.  Return the final answer `ans`.",
    "model_solution": "class Solution:\n    def countNumbersWithUniqueDigits(self, n: int) -> int:\n        if n == 0:\n            return 1\n        ans = 10\n        available_digits = 9\n        for i in range(1, n):\n            ans += available_digits * (10**i - i)\n            available_digits -= 1\n        if available_digits > 0:\n            ans += available_digits * (10**n - n)\n        return ans",
    "is_python": true
}