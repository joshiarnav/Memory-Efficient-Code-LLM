{
    "problem_idx": "188",
    "description": "\nYou are given an integer array `prices` where `prices[i]` is the price of a given stock on the `ith` day, and an integer `k`.\n\n\nFind the maximum profit you can achieve. You may complete at most `k` transactions: i.e. you may buy at most `k` times and sell at most `k` times.\n\n\n**Note:** You may not engage in multiple transactions simultaneously (i.e., you must sell the stock before you buy again).\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** k = 2, prices = [2,4,1]\n**Output:** 2\n**Explanation:** Buy on day 1 (price = 2) and sell on day 2 (price = 4), profit = 4-2 = 2.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** k = 2, prices = [3,2,6,5,0,3]\n**Output:** 7\n**Explanation:** Buy on day 2 (price = 2) and sell on day 3 (price = 6), profit = 6-2 = 4. Then buy on day 5 (price = 0) and sell on day 6 (price = 3), profit = 3-0 = 3.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= k <= 100`\n* `1 <= prices.length <= 1000`\n* `0 <= prices[i] <= 1000`\n\n\n",
    "inefficient_solution": "class Solution:\n    def maxProfit(self, k: int, prices: List[int]) -> int:\n        if k == 0 or len(prices) == 0:\n            return 0\n        k dictionary = {}\n        for i in range(len(prices)):\n            new_k_dictionary = {}\n            for j in range(k):\n                new_k_dictionary[j*2] = {}\n                new_k_dictionary[j*2+1] = {}\n                for x, y in k_dictionary[j*2].items():\n                    new_k_dictionary[j*2][x[0], i] = x[1] + prices[i]\n                for x, y in k_dictionary[j*2+1].items():\n                    new_k_dictionary[j*2+1][x[0], i] = x[1] - prices[i]\n            k_dictionary = new_k_dictionary\n        max_profit = 0\n        for x, y in k_dictionary[0].items():\n            max_profit = max(max_profit, y[1])\n        return max_profit",
    "efficient_solution": "class Solution:\n    def maxProfit(self, k: int, prices: List[int]) -> int:\n        f = [[0] * 2 for _ in range(k + 1)]\n        for j in range(1, k + 1):\n            f[j][1] = -prices[0]\n        for x in prices[1:]:\n            for j in range(k, 0, -1):\n                f[j][0] = max(f[j][1] + x, f[j][0])\n                f[j][1] = max(f[j - 1][0] - x, f[j][1])\n        return f[k][0]\n",
    "model_generation": "### Efficient Solution\n\nThe inefficient solution provided has a time complexity of O(n^3 * k), which is not efficient for large inputs. Here's a more efficient solution with a time complexity of O(n * k).\n\n```python\nclass Solution:\n    def maxProfit(self, k: int, prices: List[int]) -> int:\n        if k == 0 or len(prices) == 0:\n            return 0\n        \n        buy = [-float('inf')] * (k + 1)\n        sell = [0] * (k + 1)\n        \n        for price in prices:\n            for i in range(1, k + 1):\n                buy[i] = max(buy[i], sell[i - 1] - price)\n                sell[i] = max(sell[i], buy[i] + price)\n        \n        return sell[k]\n```\n\n### Explanation\n\nThis solution uses dynamic programming to track the maximum profit for each transaction.\n\n*   We have two lists, `buy` and `sell`, both of length `k + 1`. `buy[i]` represents the maximum profit we can get from `i` transactions by holding a stock, and `sell[i]` represents the maximum profit we can get from `i` transactions by not holding a stock.\n*   We iterate through the prices and for each price, we update the `buy` and `sell` lists. We add the current price to `sell[i]` to see if we can get a higher profit by selling the stock at the current price, and we subtract the current price from `buy[i]` to see if we can get a higher profit by buying the stock at the current price.\n*   Finally, we return `sell[k]`, which represents the maximum profit we can get from `k` transactions.\n\nThis solution has a time complexity of O(n * k), which is much more efficient than the original solution.",
    "model_solution": "class Solution:\n    def maxProfit(self, k: int, prices: List[int]) -> int:\n        if k == 0 or len(prices) == 0:\n            return 0\n        \n        buy = [-float('inf')] * (k + 1)\n        sell = [0] * (k + 1)\n        \n        for price in prices:\n            for i in range(1, k + 1):\n                buy[i] = max(buy[i], sell[i - 1] - price)\n                sell[i] = max(sell[i], buy[i] + price)\n        \n        return sell[k]",
    "is_python": true
}