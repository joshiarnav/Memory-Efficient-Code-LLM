{
    "problem_idx": "752",
    "description": "\nYou have a lock in front of you with 4 circular wheels. Each wheel has 10 slots: `'0', '1', '2', '3', '4', '5', '6', '7', '8', '9'`. The wheels can rotate freely and wrap around: for example we can turn `'9'` to be `'0'`, or `'0'` to be `'9'`. Each move consists of turning one wheel one slot.\n\n\nThe lock initially starts at `'0000'`, a string representing the state of the 4 wheels.\n\n\nYou are given a list of `deadends` dead ends, meaning if the lock displays any of these codes, the wheels of the lock will stop turning and you will be unable to open it.\n\n\nGiven a `target` representing the value of the wheels that will unlock the lock, return the minimum total number of turns required to open the lock, or -1 if it is impossible.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** deadends = [\"0201\",\"0101\",\"0102\",\"1212\",\"2002\"], target = \"0202\"\n**Output:** 6\n**Explanation:** \nA sequence of valid moves would be \"0000\" -> \"1000\" -> \"1100\" -> \"1200\" -> \"1201\" -> \"1202\" -> \"0202\".\nNote that a sequence like \"0000\" -> \"0001\" -> \"0002\" -> \"0102\" -> \"0202\" would be invalid,\nbecause the wheels of the lock become stuck after the display becomes the dead end \"0102\".\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** deadends = [\"8888\"], target = \"0009\"\n**Output:** 1\n**Explanation:** We can turn the last wheel in reverse to move from \"0000\" -> \"0009\".\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** deadends = [\"8887\",\"8889\",\"8878\",\"8898\",\"8788\",\"8988\",\"7888\",\"9888\"], target = \"8888\"\n**Output:** -1\n**Explanation:** We cannot reach the target without getting stuck.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= deadends.length <= 500`\n* `deadends[i].length == 4`\n* `target.length == 4`\n* target **will not be** in the list `deadends`.\n* `target` and `deadends[i]` consist of digits only.\n\n\n",
    "inefficient_solution": "class Solution:\n    def openLock(self, deadends: List[str], target: str) -> int:\n        def next(s):\n            res = []\n            for i in range(4):\n                c = s[i]\n                for d in range(10):\n                    s[i] = str(d)\n                    res.append(''.join(s))\n                    s[i] = c\n                s[i] = '0' if c == '9' else str(int(c) + 1)\n                res.append(''.join(s))\n                s[i] = '9' if c == '0' else str(int(c) - 1)\n                res.append(''.join(s))\n            return res\n\n        def extend(m1, m2, q):\n            for _ in range(len(q)):\n                p = q.popleft()\n                step = m1[p]\n                for t in next(p):\n                    if t in s or t in m1:\n                        continue\n                    if t in m2:\n                        return step + 1 + m2[t]\n                    m1[t] = step + 1\n                    q.append(t)\n            return -1\n\n        def bfs():\n            m1, m2 = {\"0000\": 0}, {target: 0}\n            q1, q2 = deque([('0000')]), deque([(target)])\n            while q1 and q2:\n                t = extend(m1, m2, q1) if len(q1) <= len(q2) else extend(m2, m1, q2)\n                if t != -1:\n                    return t\n            return -1\n\n        if target == '0000':\n            return 0\n        s = set(deadends)\n        if '0000' in s:\n            return -1\n        return bfs()",
    "efficient_solution": "class Solution:\n    def openLock(self, deadends: List[str], target: str) -> int:\n        def next(s):\n            res = []\n            s = list(s)\n            for i in range(4):\n                c = s[i]\n                s[i] = '9' if c == '0' else str(int(c) - 1)\n                res.append(''.join(s))\n                s[i] = '0' if c == '9' else str(int(c) + 1)\n                res.append(''.join(s))\n                s[i] = c\n            return res\n\n        def extend(m1, m2, q):\n            for _ in range(len(q)):\n                p = q.popleft()\n                step = m1[p]\n                for t in next(p):\n                    if t in s or t in m1:\n                        continue\n                    if t in m2:\n                        return step + 1 + m2[t]\n                    m1[t] = step + 1\n                    q.append(t)\n            return -1\n\n        def bfs():\n            m1, m2 = {\"0000\": 0}, {target: 0}\n            q1, q2 = deque([('0000')]), deque([(target)])\n            while q1 and q2:\n                t = extend(m1, m2, q1) if len(q1) <= len(q2) else extend(m2, m1, q2)\n                if t != -1:\n                    return t\n            return -1\n\n        if target == '0000':\n            return 0\n        s = set(deadends)\n        if '0000' in s:\n            return -1\n        return bfs()\n",
    "model_generation": "### Efficient Solution\n\n```python\nfrom collections import deque\n\nclass Solution:\n    def openLock(self, deadends: List[str], target: str) -> int:\n        def next(s):\n            res = []\n            for i in range(4):\n                c = s[i]\n                for d in range(10):\n                    s[i] = str(d)\n                    res.append(''.join(s))\n                    s[i] = c\n                s[i] = '0' if c == '9' else str(int(c) + 1)\n                res.append(''.join(s))\n                s[i] = '9' if c == '0' else str(int(c) - 1)\n                res.append(''.join(s))\n            return res\n\n        def extend(m1, m2, q):\n            for _ in range(len(q)):\n                p = q.popleft()\n                step = m1[p]\n                for t in next(p):\n                    if t in s or t in m1:\n                        continue\n                    if t in m2:\n                        return step + 1 + m2[t]\n                    m1[t] = step + 1\n                    q.append(t)\n            return -1\n\n        def bfs():\n            s = set(deadends)\n            if '0000' in s:\n                return -1\n            s.add('0000')\n            m1, m2 = {\"0000\": 0}, {target: 0}\n            q1, q2 = deque([('0000')]), deque([(target)])\n            while q1 and q2:\n                t = extend(m1, m2, q1) if len(q1) <= len(q2) else extend(m2, m1, q2)\n                if t != -1:\n                    return t\n            return -1\n\n        return bfs()\n```\n\n### Explanation\n\nThe main issue with the previous solution is that it doesn't take into account the deadends in the queue, which leads to unnecessary iterations and increased time complexity. \n\nHowever, the approach remains the same. We use a breadth-first search (BFS) to explore all possible states from the initial state '0000'. \n\nWe use two dictionaries `m1` and `m2` to store the minimum number of steps to reach each state in the queue `q1` and `q2` respectively. \n\nWe also use two queues `q1` and `q2` to store the states in `m1` and `m2` respectively. \n\nWe iterate through the queue and for each state, we generate all its neighbors by rotating each wheel one slot. \n\nIf a neighbor is in `m1`, `m2`, or `s`, we skip it. If a neighbor is in `m2`, we return the minimum number of steps to reach it. \n\nIf a neighbor is not in `m1` or `m2`, we add it to `m1` with the current number of steps plus one, and add it to the queue `q1`. \n\nWe repeat this process until we find a path to the target state, or until we have explored all possible states. \n\nThe time complexity is O(4 * 10^4 + n), where n is the number of deadends, and the space complexity is O(4 * 10^4 + n), where n is the number of deadends.",
    "model_solution": "from collections import deque\n\nclass Solution:\n    def openLock(self, deadends: List[str], target: str) -> int:\n        def next(s):\n            res = []\n            for i in range(4):\n                c = s[i]\n                for d in range(10):\n                    s[i] = str(d)\n                    res.append(''.join(s))\n                    s[i] = c\n                s[i] = '0' if c == '9' else str(int(c) + 1)\n                res.append(''.join(s))\n                s[i] = '9' if c == '0' else str(int(c) - 1)\n                res.append(''.join(s))\n            return res\n\n        def extend(m1, m2, q):\n            for _ in range(len(q)):\n                p = q.popleft()\n                step = m1[p]\n                for t in next(p):\n                    if t in s or t in m1:\n                        continue\n                    if t in m2:\n                        return step + 1 + m2[t]\n                    m1[t] = step + 1\n                    q.append(t)\n            return -1\n\n        def bfs():\n            s = set(deadends)\n            if '0000' in s:\n                return -1\n            s.add('0000')\n            m1, m2 = {\"0000\": 0}, {target: 0}\n            q1, q2 = deque([('0000')]), deque([(target)])\n            while q1 and q2:\n                t = extend(m1, m2, q1) if len(q1) <= len(q2) else extend(m2, m1, q2)\n                if t != -1:\n                    return t\n            return -1\n\n        return bfs()",
    "is_python": true
}