{
    "problem_idx": "400",
    "description": "\nGiven an integer `n`, return the `nth` digit of the infinite integer sequence `[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, ...]`.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** n = 3\n**Output:** 3\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** n = 11\n**Output:** 0\n**Explanation:** The 11th digit of the sequence 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, ... is a 0, which is part of the number 10.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= n <= 231 - 1`\n\n\n",
    "inefficient_solution": "class Solution:\n    def findNthDigit(self, n: int) -> int:\n        num_list = []\n        i = 1\n        while len(num_list) < 1000000:\n            num_str = str(i)\n            num_list.extend([int(d) for d in num_str])\n            i += 1\n        return num_list[n - 1]",
    "efficient_solution": "class Solution:\n    def findNthDigit(self, n: int) -> int:\n        k, cnt = 1, 9\n        while k * cnt < n:\n            n -= k * cnt\n            k += 1\n            cnt *= 10\n        num = 10 ** (k - 1) + (n - 1) // k\n        idx = (n - 1) % k\n        return int(str(num)[idx])\n",
    "model_generation": "### Efficient Solution:\n\nTo solve this problem efficiently, we can utilize the concept of the length of the number and its digit count. We'll iterate through the numbers starting from 1 and calculate the length of each number. If the cumulative sum of the lengths exceeds the given number `n`, we'll find the first number that starts with the `n-th` digit.\n\n```python\nclass Solution:\n    def findNthDigit(self, n: int) -> int:\n        length = 1\n        count = 9\n        start = 1\n        while n > length * count:\n            n -= length * count\n            start = start * 10 + 1\n            length += 1\n            count *= 10\n        start = start - (start % 10) + (n // length)\n        return int(str(start)[n % length - 1])\n```\n\n### Explanation:\n\n1. We initialize `length` to 1, `count` to 9 (since there are 9 single-digit numbers), and `start` to 1.\n2. We enter a loop where we calculate the cumulative sum of the lengths of the numbers. We subtract this sum from `n` to get the remaining number of digits.\n3. If the remaining number of digits is greater than 0, we update `start` to be the next number that starts with the `n-th` digit, `length` to be the length of this number, and `count` to be the number of numbers of this length.\n4. Once the remaining number of digits is 0, we calculate the `n-th` digit of the current number by taking the `n % length - 1`-th character of the string representation of `start`.\n\n### Time Complexity:\n\nThe time complexity of this solution is O(log(10^9)), which is the maximum possible value of `n`. This is because we iterate up to 9 times (for each digit), and in each iteration, we reduce the problem size by a factor of at least 10.\n\n### Space Complexity:\n\nThe space complexity of this solution is O(1), which means the space required does not change with the size of the input. We only use a fixed amount of space to store the variables `length`, `count`, and `start`.",
    "model_solution": "class Solution:\n    def findNthDigit(self, n: int) -> int:\n        length = 1\n        count = 9\n        start = 1\n        while n > length * count:\n            n -= length * count\n            start = start * 10 + 1\n            length += 1\n            count *= 10\n        start = start - (start % 10) + (n // length)\n        return int(str(start)[n % length - 1])",
    "is_python": true
}