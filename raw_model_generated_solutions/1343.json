{
    "problem_idx": "1343",
    "description": "\nGiven an array of integers `arr` and two integers `k` and `threshold`, return *the number of sub-arrays of size* `k` *and average greater than or equal to* `threshold`.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** arr = [2,2,2,2,5,5,5,8], k = 3, threshold = 4\n**Output:** 3\n**Explanation:** Sub-arrays [2,5,5],[5,5,5] and [5,5,8] have averages 4, 5 and 6 respectively. All other sub-arrays of size 3 have averages less than 4 (the threshold).\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** arr = [11,13,17,23,29,31,7,5,2,3], k = 3, threshold = 5\n**Output:** 6\n**Explanation:** The first 6 sub-arrays of size 3 have averages greater than 5. Note that averages are not integers.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= arr.length <= 105`\n* `1 <= arr[i] <= 104`\n* `1 <= k <= arr.length`\n* `0 <= threshold <= 104`\n\n\n",
    "inefficient_solution": "class Solution:\n    def numOfSubarrays(self, arr: List[int], k: int, threshold: int) -> int:\n        subarray_sums = {}\n        for i in range(len(arr) - k + 1):\n            window_sum = sum(arr[i:i+k])\n            subarray_sums[window_sum] = subarray_sums.get(window_sum, 0) + 1\n        total_count = 0\n        for window_sum in subarray_sums:\n            if window_sum / k >= threshold:\n                total_count += subarray_sums[window_sum]\n        return total_count",
    "efficient_solution": "class Solution:\n    def numOfSubarrays(self, arr: List[int], k: int, threshold: int) -> int:\n        s = sum(arr[:k])\n        ans = int(s / k >= threshold)\n        for i in range(k, len(arr)):\n            s += arr[i]\n            s -= arr[i - k]\n            ans += int(s / k >= threshold)\n        return ans\n",
    "model_generation": "Here's an efficient solution using a sliding window approach and a single pass over the array. This solution has a time complexity of O(n) and a space complexity of O(1) where n is the length of the array.\n\n```python\nclass Solution:\n    def numOfSubarrays(self, arr: List[int], k: int, threshold: int) -> int:\n        total_count = 0\n        window_sum = sum(arr[:k])\n        \n        # Calculate the sum of the first window\n        if window_sum / k >= threshold:\n            total_count += 1\n        \n        for i in range(k, len(arr)):\n            # Subtract the element going out of the window and add the element entering the window\n            window_sum = window_sum - arr[i - k] + arr[i]\n            \n            # Check if the average of the current window is greater than or equal to the threshold\n            if window_sum / k >= threshold:\n                total_count += 1\n        \n        return total_count\n```\n\nHere's an explanation of the efficient solution:\n\n1. First, calculate the sum of the first `k` elements and check if the average is greater than or equal to the threshold. If it is, increment the `total_count` variable.\n\n2. Then, use a sliding window approach to move the window over the array. For each position, subtract the element that is going out of the window and add the element that is entering the window. This maintains the sum of the current window.\n\n3. After updating the sum of the current window, check if the average is greater than or equal to the threshold. If it is, increment the `total_count` variable.\n\n4. This process is repeated until the end of the array is reached, at which point the `total_count` variable contains the total number of sub-arrays of size `k` with an average greater than or equal to the threshold.\n\nThe efficient solution has a time complexity of O(n) because it makes a single pass over the array, and a space complexity of O(1) because it uses a constant amount of space to store the sum of the current window and the total count of sub-arrays.",
    "model_solution": "class Solution:\n    def numOfSubarrays(self, arr: List[int], k: int, threshold: int) -> int:\n        total_count = 0\n        window_sum = sum(arr[:k])\n        \n        # Calculate the sum of the first window\n        if window_sum / k >= threshold:\n            total_count += 1\n        \n        for i in range(k, len(arr)):\n            # Subtract the element going out of the window and add the element entering the window\n            window_sum = window_sum - arr[i - k] + arr[i]\n            \n            # Check if the average of the current window is greater than or equal to the threshold\n            if window_sum / k >= threshold:\n                total_count += 1\n        \n        return total_count",
    "is_python": true
}