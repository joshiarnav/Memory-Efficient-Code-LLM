{
    "problem_idx": "1502",
    "description": "\nA sequence of numbers is called an **arithmetic progression** if the difference between any two consecutive elements is the same.\n\n\nGiven an array of numbers `arr`, return `true` *if the array can be rearranged to form an **arithmetic progression**. Otherwise, return* `false`.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** arr = [3,5,1]\n**Output:** true\n**Explanation:** We can reorder the elements as [1,3,5] or [5,3,1] with differences 2 and -2 respectively, between each consecutive elements.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** arr = [1,2,4]\n**Output:** false\n**Explanation:** There is no way to reorder the elements to obtain an arithmetic progression.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `2 <= arr.length <= 1000`\n* `-106 <= arr[i] <= 106`\n\n\n",
    "inefficient_solution": "class Solution:\n    def canMakeArithmeticProgression(self, arr: List[int]) -> bool:\n        arr = arr[:]  # make a copy of the list to avoid modifying the original\n        for i in range(len(arr)):\n            for j in range(i + 1, len(arr)):\n                if arr[i] > arr[j]:\n                    arr[i], arr[j] = arr[j], arr[i]\n                    break  # break out of the inner loop to avoid duplicate swaps\n        d = arr[1] - arr[0]\n        for i in range(len(arr) - 1):\n            if arr[i] + d != arr[i + 1]:\n                return False\n        return True",
    "efficient_solution": "class Solution:\n    def canMakeArithmeticProgression(self, arr: List[int]) -> bool:\n        arr.sort()\n        d = arr[1] - arr[0]\n        return all(b - a == d for a, b in pairwise(arr))\n",
    "model_generation": "### Efficient Solution:\n\nThe inefficient solution has a time complexity of O(n^2) due to the nested loops. We can improve this by first sorting the array and then checking if the difference between consecutive elements is constant.\n\n```python\nclass Solution:\n    def canMakeArithmeticProgression(self, arr: List[int]) -> bool:\n        # Sort the array in ascending order\n        arr.sort()\n        \n        # Check if the difference between consecutive elements is constant\n        diff = arr[1] - arr[0]\n        for i in range(2, len(arr)):\n            if arr[i] - arr[i - 1] != diff:\n                return False\n        return True\n```\n\n### Explanation:\n\n1. We first sort the array in ascending order using the `sort()` method. This operation has a time complexity of O(n log n).\n2. Then, we calculate the difference between the first two elements, which will be used as a reference to check if the difference between consecutive elements is constant.\n3. We iterate through the array starting from the third element (index 2). For each element, we check if the difference between it and the previous element is equal to the reference difference. If it's not equal, we immediately return `False`.\n4. If we successfully iterate through the array without finding any unequal differences, we return `True`.\n\n### Time Complexity:\n\nThe time complexity of the efficient solution is O(n log n) due to the sorting operation, which is a significant improvement over the O(n^2) time complexity of the inefficient solution.",
    "model_solution": "class Solution:\n    def canMakeArithmeticProgression(self, arr: List[int]) -> bool:\n        # Sort the array in ascending order\n        arr.sort()\n        \n        # Check if the difference between consecutive elements is constant\n        diff = arr[1] - arr[0]\n        for i in range(2, len(arr)):\n            if arr[i] - arr[i - 1] != diff:\n                return False\n        return True",
    "is_python": true
}