{
    "problem_idx": "1330",
    "description": "\nYou are given an integer array `nums`. The *value* of this array is defined as the sum of `|nums[i] - nums[i + 1]|` for all `0 <= i < nums.length - 1`.\n\n\nYou are allowed to select any subarray of the given array and reverse it. You can perform this operation **only once**.\n\n\nFind maximum possible value of the final array.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums = [2,3,1,5,4]\n**Output:** 10\n**Explanation:** By reversing the subarray [3,1,5] the array becomes [2,5,1,3,4] whose value is 10.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums = [2,4,9,24,2,1,10]\n**Output:** 68\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= nums.length <= 3 * 104`\n* `-105 <= nums[i] <= 105`\n\n\n",
    "inefficient_solution": "class Solution:\n    def maxValueAfterReverse(self, nums):\n        ans = 0\n        for _ in range(len(nums) * len(nums)):\n            arr = [x for x in nums]\n            for i in range(len(nums)):\n                for j in range(i + 1, len(nums)):\n                    if arr[i] > arr[j]:\n                        arr[i], arr[j] = arr[j], arr[i]\n                    elif nums[i] < nums[j]:\n                        arr[i], arr[j] = arr[j], arr[i]\n            s = sum(abs(x - y) for x, y in zip(arr, arr[1:]))\n            ans = max(ans, s)\n        return ans",
    "efficient_solution": "class Solution:\n    def maxValueAfterReverse(self, nums: List[int]) -> int:\n        ans = s = sum(abs(x - y) for x, y in pairwise(nums))\n        for x, y in pairwise(nums):\n            ans = max(ans, s + abs(nums[0] - y) - abs(x - y))\n            ans = max(ans, s + abs(nums[-1] - x) - abs(x - y))\n        for k1, k2 in pairwise((1, -1, -1, 1, 1)):\n            mx, mi = -inf, inf\n            for x, y in pairwise(nums):\n                a = k1 * x + k2 * y\n                b = abs(x - y)\n                mx = max(mx, a - b)\n                mi = min(mi, a + b)\n            ans = max(ans, s + max(mx - mi, 0))\n        return ans\n",
    "model_generation": "### Efficient Solution:\n\nTo find the maximum possible value of the final array, we need to determine the best subarray to reverse. We can do this by calculating the sum of absolute differences for all possible subarrays and then selecting the maximum sum.\n\nHere's an efficient solution in Python:\n\n```python\nclass Solution:\n    def maxValueAfterReverse(self, nums):\n        n = len(nums)\n        max_sum = float('-inf')\n        total_sum = sum(nums)\n        max_diff = 0\n        total_diff = 0\n        \n        for i in range(n - 1):\n            max_diff = max(max_diff, abs(nums[i] - nums[i + 1]))\n            total_diff += abs(nums[i] - nums[i + 1])\n        \n        for i in range(n - 1):\n            for j in range(i + 1, n):\n                total_sum += (nums[j] - nums[i]) * 2\n                total_diff += abs(nums[i] + nums[j] - (nums[i + 1] + nums[j - 1]))\n                max_sum = max(max_sum, total_sum - total_diff)\n                total_sum -= (nums[j] - nums[i]) * 2\n                total_diff -= abs(nums[i] + nums[j] - (nums[i + 1] + nums[j - 1]))\n        \n        return max_sum\n```\n\n### Explanation:\n\nThis solution works by maintaining the total sum of the array and the total difference between adjacent elements. It then iterates over all possible subarrays and calculates the new total sum and difference after reversing the subarray. The maximum possible value of the final array is updated accordingly. This solution has a time complexity of O(n^2), which is more efficient than the original solution with a time complexity of O(n^3).",
    "model_solution": "class Solution:\n    def maxValueAfterReverse(self, nums):\n        n = len(nums)\n        max_sum = float('-inf')\n        total_sum = sum(nums)\n        max_diff = 0\n        total_diff = 0\n        \n        for i in range(n - 1):\n            max_diff = max(max_diff, abs(nums[i] - nums[i + 1]))\n            total_diff += abs(nums[i] - nums[i + 1])\n        \n        for i in range(n - 1):\n            for j in range(i + 1, n):\n                total_sum += (nums[j] - nums[i]) * 2\n                total_diff += abs(nums[i] + nums[j] - (nums[i + 1] + nums[j - 1]))\n                max_sum = max(max_sum, total_sum - total_diff)\n                total_sum -= (nums[j] - nums[i]) * 2\n                total_diff -= abs(nums[i] + nums[j] - (nums[i + 1] + nums[j - 1]))\n        \n        return max_sum",
    "is_python": true
}