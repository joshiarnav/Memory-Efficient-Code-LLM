{
    "problem_idx": "2418",
    "description": "\nYou are given an array of strings `names`, and an array `heights` that consists of **distinct** positive integers. Both arrays are of length `n`.\n\n\nFor each index `i`, `names[i]` and `heights[i]` denote the name and height of the `ith` person.\n\n\nReturn `names` *sorted in **descending** order by the people's heights*.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** names = [\"Mary\",\"John\",\"Emma\"], heights = [180,165,170]\n**Output:** [\"Mary\",\"Emma\",\"John\"]\n**Explanation:** Mary is the tallest, followed by Emma and John.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** names = [\"Alice\",\"Bob\",\"Bob\"], heights = [155,185,150]\n**Output:** [\"Bob\",\"Alice\",\"Bob\"]\n**Explanation:** The first Bob is the tallest, followed by Alice and the second Bob.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `n == names.length == heights.length`\n* `1 <= n <= 103`\n* `1 <= names[i].length <= 20`\n* `1 <= heights[i] <= 105`\n* `names[i]` consists of lower and upper case English letters.\n* All the values of `heights` are distinct.\n\n\n",
    "inefficient_solution": "class Solution:\n    def sortPeople(self, names: List[str], heights: List[int]) -> List[str]:\n        heights_dict = {height: name for name, height in zip(names, heights)}\n        sorted_heights = sorted(heights, reverse=True)\n        sorted_names = []\n        for height in sorted_heights:\n            sorted_names.append(heights_dict[height])\n        return sorted_names",
    "efficient_solution": "class Solution:\n    def sortPeople(self, names: List[str], heights: List[int]) -> List[str]:\n        idx = list(range(len(heights)))\n        idx.sort(key=lambda i: -heights[i])\n        return [names[i] for i in idx]\n",
    "model_generation": "### Efficient Solution\n\n```python\nclass Solution:\n    def sortPeople(self, names: List[str], heights: List[int]) -> List[str]:\n        \"\"\"\n        This function takes in two lists, `names` and `heights`, and returns a list of names in descending order based on the heights.\n        \n        Args:\n        names (List[str]): A list of strings representing the names of people.\n        heights (List[int]): A list of distinct positive integers representing the heights of people.\n        \n        Returns:\n        List[str]: A list of names in descending order based on the heights.\n        \"\"\"\n        \n        # Combine the names and heights into a list of tuples, then sort the list in descending order based on the heights\n        # The `sorted` function in Python is already quite efficient, but in this case, we can use the `sorted` function in combination with a list comprehension to create the final list\n        # This approach avoids the need to create an intermediate dictionary and then look up the names in the dictionary, which can be slower for large inputs\n        return [name for _, name in sorted(zip(heights, names), reverse=True)]\n```\n\n### Explanation\n\nThe provided efficient solution works as follows:\n\n1.  The `sorted` function is used in combination with the `zip` function to combine the `heights` and `names` lists into a list of tuples, where each tuple contains a height and a corresponding name.\n2.  The `reverse=True` argument is used to sort the list of tuples in descending order based on the heights.\n3.  A list comprehension is then used to extract the names from the sorted list of tuples and return them as a list of strings.\n\nThis approach is more efficient than the original solution because it avoids the need to create an intermediate dictionary and then look up the names in the dictionary, which can be slower for large inputs.",
    "model_solution": "class Solution:\n    def sortPeople(self, names: List[str], heights: List[int]) -> List[str]:\n        \"\"\"\n        This function takes in two lists, `names` and `heights`, and returns a list of names in descending order based on the heights.\n        \n        Args:\n        names (List[str]): A list of strings representing the names of people.\n        heights (List[int]): A list of distinct positive integers representing the heights of people.\n        \n        Returns:\n        List[str]: A list of names in descending order based on the heights.\n        \"\"\"\n        \n        # Combine the names and heights into a list of tuples, then sort the list in descending order based on the heights\n        # The `sorted` function in Python is already quite efficient, but in this case, we can use the `sorted` function in combination with a list comprehension to create the final list\n        # This approach avoids the need to create an intermediate dictionary and then look up the names in the dictionary, which can be slower for large inputs\n        return [name for _, name in sorted(zip(heights, names), reverse=True)]",
    "is_python": true
}