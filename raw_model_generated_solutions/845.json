{
    "problem_idx": "845",
    "description": "\nYou may recall that an array `arr` is a **mountain array** if and only if:\n\n\n* `arr.length >= 3`\n* There exists some index `i` (**0-indexed**) with `0 < i < arr.length - 1` such that:\n\t+ `arr[0] < arr[1] < ... < arr[i - 1] < arr[i]`\n\t+ `arr[i] > arr[i + 1] > ... > arr[arr.length - 1]`\n\n\nGiven an integer array `arr`, return *the length of the longest subarray, which is a mountain*. Return `0` if there is no mountain subarray.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** arr = [2,1,4,7,3,2,5]\n**Output:** 5\n**Explanation:** The largest mountain is [1,4,7,3,2] which has length 5.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** arr = [2,2,2]\n**Output:** 0\n**Explanation:** There is no mountain.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= arr.length <= 104`\n* `0 <= arr[i] <= 104`\n\n\n\u00a0\n\n\n**Follow up:**\n\n\n* Can you solve it using only one pass?\n* Can you solve it in `O(1)` space?\n\n\n",
    "inefficient_solution": "class Solution:\n    def longestMountain(self, arr: List[int]) -> int:\n        n = len(arr)\n        max_length = 0\n        for i in range(n):\n            if i == 0:\n                continue\n            temp_arr = []\n            for j in range(i, n):\n                temp_arr.append(arr[j])\n                if j == i:\n                    continue\n                if arr[j] > arr[j-1]:\n                    max_val = max(temp_arr)\n                    if i != 0 and arr[j-1] > max_val:\n                        if arr[i-1] < arr[i]:\n                            max_length = max(max_length, len(temp_arr))\n                            temp_arr = []\n                        else:\n                            break\n                elif arr[j] < arr[j-1]:\n                    max_val = max(temp_arr)\n                    if i != 0 and arr[j-1] < max_val:\n                        if arr[i-1] > arr[i]:\n                            max_length = max(max_length, len(temp_arr))\n                            temp_arr = []\n                        else:\n                            break\n        return max_length",
    "efficient_solution": "class Solution:\n    def longestMountain(self, arr: List[int]) -> int:\n        n = len(arr)\n        ans = l = 0\n        while l + 2 < n:\n            r = l + 1\n            if arr[l] < arr[r]:\n                while r + 1 < n and arr[r] < arr[r + 1]:\n                    r += 1\n                if r < n - 1 and arr[r] > arr[r + 1]:\n                    while r < n - 1 and arr[r] > arr[r + 1]:\n                        r += 1\n                    ans = max(ans, r - l + 1)\n                else:\n                    r += 1\n            l = r\n        return ans\n",
    "model_generation": "### Efficient Solution\n\nHere's a more efficient solution to the problem:\n\n```python\nclass Solution:\n    def longestMountain(self, arr: List[int]) -> int:\n        n = len(arr)\n        max_length = 0\n        left, right = 0, 0\n\n        while right < n:\n            # Find the start of a potential mountain\n            while right < n and (right == 0 or arr[right] <= arr[right-1]):\n                right += 1\n            start = right - 1\n\n            # Check if the potential mountain is a real mountain\n            while right < n and arr[right] > arr[right-1]:\n                right += 1\n\n            # If it's a mountain, update max_length\n            if right - start >= 3:\n                max_length = max(max_length, right - start)\n\n        return max_length\n```\n\n### Explanation\n\nThis solution works by maintaining two pointers, `left` and `right`. The `right` pointer starts from the beginning of the array and moves to the right until it either reaches the end of the array or finds a peak element (i.e., `arr[right] > arr[right-1]`). At this point, we have a potential mountain starting at `right - 1`.\n\nWe then move the `right` pointer to the right to check if the potential mountain is a real mountain. If it's a real mountain, we update `max_length` to be the maximum of the current `max_length` and the length of the mountain.\n\n### Time Complexity\n\nThe time complexity of this solution is O(n), where n is the length of the array. We make two passes through the array, one to find the start of each potential mountain and another to check if the potential mountain is a real mountain.\n\n### Space Complexity\n\nThe space complexity of this solution is O(1), which means it uses constant space. We only use a few extra variables to keep track of the maximum length and the start and end indices of the mountain.",
    "model_solution": "class Solution:\n    def longestMountain(self, arr: List[int]) -> int:\n        n = len(arr)\n        max_length = 0\n        left, right = 0, 0\n\n        while right < n:\n            # Find the start of a potential mountain\n            while right < n and (right == 0 or arr[right] <= arr[right-1]):\n                right += 1\n            start = right - 1\n\n            # Check if the potential mountain is a real mountain\n            while right < n and arr[right] > arr[right-1]:\n                right += 1\n\n            # If it's a mountain, update max_length\n            if right - start >= 3:\n                max_length = max(max_length, right - start)\n\n        return max_length",
    "is_python": true
}